[{"path":"https://tanaylab.github.io/prego/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Weizmann Institute Science Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tanaylab.github.io/prego/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aviezer Lifshitz. Author, maintainer. Amos Tanay. Author.","code":""},{"path":"https://tanaylab.github.io/prego/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lifshitz , Tanay (2024). prego: PWM Regression Optimizer. R package version 0.0.3.","code":"@Manual{,   title = {prego: PWM Regression Optimizer},   author = {Aviezer Lifshitz and Amos Tanay},   year = {2024},   note = {R package version 0.0.3}, }"},{"path":"https://tanaylab.github.io/prego/index.html","id":"prego","dir":"","previous_headings":"","what":"PWM Regression Optimizer","title":"PWM Regression Optimizer","text":"prego package implements simple regression algorithms finding motifs DNA. can either use find motif discriminating two clusters DNA sequences, generating motifs one continuous variables. PREGO algorithm described .","code":""},{"path":"https://tanaylab.github.io/prego/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"PWM Regression Optimizer","text":"can install development version prego like :","code":"remotes::install_github(\"tanaylab/prego\")"},{"path":"https://tanaylab.github.io/prego/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"PWM Regression Optimizer","text":"set continuous variables:  binary response:  clusters sequences:","code":"library(prego) #> ℹ Parallelization enabled. Using 77 threads. res <- regress_pwm(sequences_example, response_mat_example) #> ℹ Using \"r2\" as the final metric #> ℹ Number of response variables: 5 #>  #> ── Generate candidate kmers #>  #> ── Regress each candidate kmer #> ℹ Running regression on 10 candidate kmers #> • Bidirectional: TRUE #> • Spat bin size: 40 #> • Number of spatial bins 7 #> • Length of sequence: 280 #> • Min gap: 0 #> • Max gap: 1 #> • Kmer length: 8 #> • Improve epsilon: 1e-04 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> • kmer: \"TTTACAAC\", score (r2): 0.0126890005368537 #> • kmer: \"TA*CTGCTG\", score (r2): 0.00334159650449452 #> • kmer: \"AACCATCT\", score (r2): 0.0643097230120355 #> • kmer: \"AGA*AAGAA\", score (r2): 0.060384757659326 #> • kmer: \"TTATC*TCT\", score (r2): 0.0657310811484614 #> • kmer: \"TCACCTTG\", score (r2): 0.0623381197705449 #> • kmer: \"CTCTGCAG\", score (r2): 0.0677598761958694 #> • kmer: \"TAGCTGTC\", score (r2): 0.0640768115164421 #> • kmer: \"GACAAT*CT\", score (r2): 0.0607251519441225 #> • kmer: \"TCTTATCT\", score (r2): 0.0628163788281552 #> ℹ Best match in the database: \"JASPAR.ct\", cor: 0.667 #> ℹ Best motif: \"***CTCTGCAG****\", score (r2): 0.0677598761958694 plot_regression_qc(res) #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> ℹ The deprecated feature was likely used in the ggseqlogo package. #>   Please report the issue at <https://github.com/omarwagih/ggseqlogo/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) #> ℹ Using \"ks\" as the final metric #> ℹ Number of response variables: 1 #>  #> ── Generate candidate kmers #>  #> ── Regress each candidate kmer #> ℹ Running regression on 10 candidate kmers #> • Bidirectional: TRUE #> • Spat bin size: 40 #> • Number of spatial bins 7 #> • Length of sequence: 280 #> • Min gap: 0 #> • Max gap: 1 #> • Kmer length: 8 #> • Improve epsilon: 1e-04 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> • kmer: \"TTAAT*ATT\", score (ks): 0.854878919705105 #> • kmer: \"AAT*ATTAA\", score (ks): 0.854878919705105 #> • kmer: \"TAAT*ATTA\", score (ks): 0.843301065576269 #> • kmer: \"GTTAAT*AT\", score (ks): 0.844482257088238 #> • kmer: \"AT*ATTAAC\", score (ks): 0.844482257088238 #> • kmer: \"AA*CATTAA\", score (ks): 0.84950858078479 #> • kmer: \"TTAA*CATT\", score (ks): 0.849192870611084 #> • kmer: \"TAATCATT\", score (ks): 0.841995767306361 #> • kmer: \"TTA*TCATT\", score (ks): 0.845127829960678 #> • kmer: \"TAA*CATTA\", score (ks): 0.833248418183164 #> ℹ Best match in the database: \"JOLMA.HNF1B_di_full_1\", cor: 0.8 #> ✔ \"JOLMA.HNF1B_di_full_1\" KS test D: 0.8512, p-value: 0 #> ℹ Best motif: \"***TTAAT*ATT***\", score (ks): 0.854878919705105 plot_regression_qc(res_binary) res <- regress_pwm.clusters(cluster_sequences_example, clusters_example) #> ℹ Using sampled optimization #> ℹ Running regression for 5 clusters #> ℹ Matching with motif databases res$stats #> # A tibble: 5 × 7 #>   cluster consensus  ks_D    r2 seed_motif      db_match                 db_ma…¹ #>   <chr>   <chr>     <dbl> <dbl> <chr>           <chr>                      <dbl> #> 1 c100    GA***AT   0.668 0.326 ***TGATGG*TG*** HOCOMOCO.PDX1_HUMAN.H11…   0.786 #> 2 c111    Y**TAAA   0.836 0.514 ***GC*ATAAAA*** JOLMA.CDX2_mono_DBD        0.889 #> 3 c29     T*A***W*Y 0.830 0.552 ***TTAA*CATT*** JOLMA.HNF1B_di_full_1      0.745 #> 4 c5      <NA>      0.569 0.194 ***TGAT*GATG*** JASPAR.CG15696-RA          0.725 #> 5 c6      ATC       0.606 0.262 ***TCTTATCT**** HOMER.Gata2                0.864 #> # … with abbreviated variable name ¹​db_match_cor"},{"path":"https://tanaylab.github.io/prego/reference/HOCOMOCO_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"PSSMs from the HOCOMOCO motif database — HOCOMOCO_motifs","title":"PSSMs from the HOCOMOCO motif database — HOCOMOCO_motifs","text":"PSSMs HOCOMOCO motif database","code":""},{"path":"https://tanaylab.github.io/prego/reference/HOCOMOCO_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSSMs from the HOCOMOCO motif database — HOCOMOCO_motifs","text":"","code":"HOCOMOCO_motifs"},{"path":"https://tanaylab.github.io/prego/reference/HOCOMOCO_motifs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PSSMs from the HOCOMOCO motif database — HOCOMOCO_motifs","text":"data frame containing PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name.","code":""},{"path":"https://tanaylab.github.io/prego/reference/HOCOMOCO_motifs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PSSMs from the HOCOMOCO motif database — HOCOMOCO_motifs","text":"https://hocomoco11.autosome.ru/downloads/","code":""},{"path":"https://tanaylab.github.io/prego/reference/HOCOMOCO_motifs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PSSMs from the HOCOMOCO motif database — HOCOMOCO_motifs","text":"Ivan V. Kulakovskiy; Ilya E. Vorontsov; Ivan S. Yevshin; Ruslan N. Sharipov; Alla D. Fedorova; Eugene . Rumynskiy; Yulia . Medvedeva; Arturo Magana-Mora; Vladimir B. Bajic; Dmitry . Papatsenko; Fedor . Kolpakov; Vsevolod J. Makeev: HOCOMOCO: towards complete collection transcription factor binding models human mouse via large-scale ChIP-Seq analysis. Nucl. Acids Res., Database issue, gkx1106 (11 November 2017). https://doi.org/10.1093/nar/gkx1106","code":""},{"path":"https://tanaylab.github.io/prego/reference/HOMER_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"PSSMs from the HOMER motif database — HOMER_motifs","title":"PSSMs from the HOMER motif database — HOMER_motifs","text":"PSSMs HOMER motif database","code":""},{"path":"https://tanaylab.github.io/prego/reference/HOMER_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSSMs from the HOMER motif database — HOMER_motifs","text":"","code":"HOMER_motifs"},{"path":"https://tanaylab.github.io/prego/reference/HOMER_motifs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PSSMs from the HOMER motif database — HOMER_motifs","text":"data frame containing PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name.","code":""},{"path":"https://tanaylab.github.io/prego/reference/HOMER_motifs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PSSMs from the HOMER motif database — HOMER_motifs","text":"http://homer.ucsd.edu/homer/motif/","code":""},{"path":"https://tanaylab.github.io/prego/reference/HOMER_motifs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PSSMs from the HOMER motif database — HOMER_motifs","text":"Heinz S, Benner C, Spann N, Bertolino E et al. Simple Combinations Lineage-Determining Transcription Factors Prime cis-Regulatory Elements Required Macrophage B Cell Identities. Mol Cell 2010 May 28;38(4):576-589. PMID: 20513432","code":""},{"path":"https://tanaylab.github.io/prego/reference/JASPAR_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"PSSMs from the JASPAR motif database — JASPAR_motifs","title":"PSSMs from the JASPAR motif database — JASPAR_motifs","text":"PSSMs JASPAR motif database","code":""},{"path":"https://tanaylab.github.io/prego/reference/JASPAR_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSSMs from the JASPAR motif database — JASPAR_motifs","text":"","code":"JASPAR_motifs"},{"path":"https://tanaylab.github.io/prego/reference/JASPAR_motifs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PSSMs from the JASPAR motif database — JASPAR_motifs","text":"data frame containing PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name.","code":""},{"path":"https://tanaylab.github.io/prego/reference/JASPAR_motifs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PSSMs from the JASPAR motif database — JASPAR_motifs","text":"https://jaspar.genereg.net/downloads/","code":""},{"path":"https://tanaylab.github.io/prego/reference/JASPAR_motifs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PSSMs from the JASPAR motif database — JASPAR_motifs","text":"Castro-Mondragon JA, Riudavets-Puig R, Rauluseviciute , Berhanu Lemma R, Turchi L, Blanc-Mathieu R, Lucas J, Boddie P, Khan , Manosalva Pérez N, Fornes O, Leung TY, Aguirre , Hammal F, Schmelter D, Baranasic D, Ballester B, Sandelin , Lenhard B, Vandepoele K, Wasserman WW, Parcy F, Mathelier JASPAR 2022: 9th release open-access database transcription factor binding profiles Nucleic Acids Res. 2022 Jan 7;50(D1):D165-D173.; doi: 10.1093/nar/gkab1113","code":""},{"path":"https://tanaylab.github.io/prego/reference/JOLMA_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"PSSMs from the Jolma et al. motif database — JOLMA_motifs","title":"PSSMs from the Jolma et al. motif database — JOLMA_motifs","text":"PSSMs Jolma et al. motif database","code":""},{"path":"https://tanaylab.github.io/prego/reference/JOLMA_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSSMs from the Jolma et al. motif database — JOLMA_motifs","text":"","code":"JOLMA_motifs"},{"path":"https://tanaylab.github.io/prego/reference/JOLMA_motifs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PSSMs from the Jolma et al. motif database — JOLMA_motifs","text":"data frame containing PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name.","code":""},{"path":"https://tanaylab.github.io/prego/reference/JOLMA_motifs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PSSMs from the Jolma et al. motif database — JOLMA_motifs","text":"https://doi.org/10.1038/nature18912","code":""},{"path":"https://tanaylab.github.io/prego/reference/JOLMA_motifs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PSSMs from the Jolma et al. motif database — JOLMA_motifs","text":"Jolma, ., Yin, Y., Nitta, K. et al. DNA-dependent formation transcription factor pairs alters binding specificity. Nature 534, S15–S16 (2016). https://doi.org/10.1038/nature18912","code":""},{"path":"https://tanaylab.github.io/prego/reference/MOTIF_DB.html","id":null,"dir":"Reference","previous_headings":"","what":"A MotifDB object with motifs from all bundled databases — MOTIF_DB","title":"A MotifDB object with motifs from all bundled databases — MOTIF_DB","text":"MotifDB object motifs bundled databases","code":""},{"path":"https://tanaylab.github.io/prego/reference/MOTIF_DB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A MotifDB object with motifs from all bundled databases — MOTIF_DB","text":"","code":"MOTIF_DB"},{"path":"https://tanaylab.github.io/prego/reference/MOTIF_DB.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A MotifDB object with motifs from all bundled databases — MOTIF_DB","text":"MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/MotifDB-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MotifDB Class — MotifDB-class","title":"MotifDB Class — MotifDB-class","text":"S4 class store position weight matrices properties","code":""},{"path":"https://tanaylab.github.io/prego/reference/MotifDB-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MotifDB Class — MotifDB-class","text":"mat numeric matrix containing position weight matrices log scale rc_mat numeric matrix containing reverse complement position weight matrices motif_lengths named integer vector containing length motif prior pssm prior probability spat_factors numeric matrix containing spatial factors spat_bin_size size spatial bins","code":""},{"path":"https://tanaylab.github.io/prego/reference/all_motif_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a data frame of all the motif datasets bundled with prego — all_motif_datasets","title":"Get a data frame of all the motif datasets bundled with prego — all_motif_datasets","text":"data frame contain PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name. Individual datasets available within package HOMER_motifs, JASPAR_motifs, JOLMA_motifs, HOCOMOCO_motifs.","code":""},{"path":"https://tanaylab.github.io/prego/reference/all_motif_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a data frame of all the motif datasets bundled with prego — all_motif_datasets","text":"","code":"all_motif_datasets()"},{"path":"https://tanaylab.github.io/prego/reference/all_motif_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a data frame of all the motif datasets bundled with prego — all_motif_datasets","text":"data frame concatenates motifs \"HOMER\", \"JASPAR\" \"JOLMA\". Motif names prefixed dataset name, e.g. \"JASPAR.GATA4\".","code":""},{"path":"https://tanaylab.github.io/prego/reference/all_motif_datasets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get a data frame of all the motif datasets bundled with prego — all_motif_datasets","text":"HOMER: Heinz S, Benner C, Spann N, Bertolino E et al. Simple Combinations Lineage-Determining Transcription Factors Prime cis-Regulatory Elements Required Macrophage B Cell Identities. Mol Cell 2010 May 28;38(4):576-589. PMID: 20513432 JASPAR: Castro-Mondragon JA, Riudavets-Puig R, Rauluseviciute , Berhanu Lemma R, Turchi L, Blanc-Mathieu R, Lucas J, Boddie P, Khan , Manosalva Pérez N, Fornes O, Leung TY, Aguirre , Hammal F, Schmelter D, Baranasic D, Ballester B, Sandelin , Lenhard B, Vandepoele K, Wasserman WW, Parcy F, Mathelier JASPAR 2022: 9th release open-access database transcription factor binding profiles Nucleic Acids Res. 2022 Jan 7;50(D1):D165-D173.; doi: 10.1093/nar/gkab1113 JOLMA: Jolma, ., Yin, Y., Nitta, K. et al. DNA-dependent formation transcription factor pairs alters binding specificity. Nature 534, S15–S16 (2016). https://doi.org/10.1038/nature18912 HOCOMOCO: Ivan V. Kulakovskiy; Ilya E. Vorontsov; Ivan S. Yevshin; Ruslan N. Sharipov; Alla D. Fedorova; Eugene . Rumynskiy; Yulia . Medvedeva; Arturo Magana-Mora; Vladimir B. Bajic; Dmitry . Papatsenko; Fedor . Kolpakov; Vsevolod J. Makeev: HOCOMOCO: towards complete collection transcription factor binding models human mouse via large-scale ChIP-Seq analysis. Nucl. Acids Res., Database issue, gkx1106 (11 November 2017). https://doi.org/10.1093/nar/gkx1106","code":""},{"path":"https://tanaylab.github.io/prego/reference/all_motif_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a data frame of all the motif datasets bundled with prego — all_motif_datasets","text":"","code":"all_motif_datasets() #> # A tibble: 49,269 x 8 #>        motif pos     A     C     G     T dataset motif_orig #> 1 HOMER.AP_1   0 0.419 0.275 0.277 0.028   HOMER       AP_1 #> 2 HOMER.AP_1   1 0.001 0.001 0.001 0.997   HOMER       AP_1 #> 3 HOMER.AP_1   2 0.010 0.002 0.965 0.023   HOMER       AP_1 #> 4 HOMER.AP_1   3 0.984 0.003 0.001 0.012   HOMER       AP_1 #> 5 HOMER.AP_1   4 0.062 0.579 0.305 0.054   HOMER       AP_1 #> 6 HOMER.AP_1   5 0.026 0.001 0.001 0.972   HOMER       AP_1 #> # ... with 49,263 more rows"},{"path":"https://tanaylab.github.io/prego/reference/as.data.frame-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a MotifDB object to a data frame — as.data.frame,MotifDB-method","title":"Convert a MotifDB object to a data frame — as.data.frame,MotifDB-method","text":"Convert MotifDB object data frame","code":""},{"path":"https://tanaylab.github.io/prego/reference/as.data.frame-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a MotifDB object to a data frame — as.data.frame,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"https://tanaylab.github.io/prego/reference/as.data.frame-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a MotifDB object to a data frame — as.data.frame,MotifDB-method","text":"x MotifDB object row.names NULL character vector giving row names data frame optional logical. TRUE, setting row names converting column names (syntactic names: see make.names) optional ... additional arguments passed methods","code":""},{"path":"https://tanaylab.github.io/prego/reference/as.data.frame-MotifDB-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a MotifDB object to a data frame — as.data.frame,MotifDB-method","text":"data frame containing motif probabilities","code":""},{"path":"https://tanaylab.github.io/prego/reference/as.data.frame-MotifDB-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a MotifDB object to a data frame — as.data.frame,MotifDB-method","text":"","code":"dataset <- as.data.frame(MOTIF_DB) head(dataset) #>                          motif pos           A           C           G #> 1 HOCOMOCO.AHR_HUMAN.H11MO.0.B   1 0.266233766 0.116883117 0.363636364 #> 2 HOCOMOCO.AHR_HUMAN.H11MO.0.B   2 0.071428571 0.077922078 0.227272727 #> 3 HOCOMOCO.AHR_HUMAN.H11MO.0.B   3 0.142857143 0.285714286 0.136363636 #> 4 HOCOMOCO.AHR_HUMAN.H11MO.0.B   4 0.019480519 0.006493506 0.948051948 #> 5 HOCOMOCO.AHR_HUMAN.H11MO.0.B   5 0.006493506 0.974025974 0.006493506 #> 6 HOCOMOCO.AHR_HUMAN.H11MO.0.B   6 0.019480519 0.006493506 0.967532468 #>             T #> 1 0.253246753 #> 2 0.623376623 #> 3 0.435064935 #> 4 0.025974026 #> 5 0.012987013 #> 6 0.006493506 nrow(dataset) #> [1] 49269 length(unique(dataset$motif)) #> [1] 3867"},{"path":"https://tanaylab.github.io/prego/reference/as.matrix-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a MotifDB object to a matrix — as.matrix,MotifDB-method","title":"Convert a MotifDB object to a matrix — as.matrix,MotifDB-method","text":"Convert MotifDB object matrix","code":""},{"path":"https://tanaylab.github.io/prego/reference/as.matrix-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a MotifDB object to a matrix — as.matrix,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' as.matrix(x, ...)"},{"path":"https://tanaylab.github.io/prego/reference/as.matrix-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a MotifDB object to a matrix — as.matrix,MotifDB-method","text":"x MotifDB object ... ignored arguments","code":""},{"path":"https://tanaylab.github.io/prego/reference/as.matrix-MotifDB-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a MotifDB object to a matrix — as.matrix,MotifDB-method","text":"matrix containing motif probabilities, rownames motif_position, colnames nucleotides","code":""},{"path":"https://tanaylab.github.io/prego/reference/as.matrix-MotifDB-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a MotifDB object to a matrix — as.matrix,MotifDB-method","text":"","code":"as.matrix(MOTIF_DB[\"HOMER.GATA3_2\"]) #>                     A     C     G     T #> HOMER.GATA3_2_1 0.662 0.066 0.006 0.266 #> HOMER.GATA3_2_2 0.001 0.007 0.991 0.001 #> HOMER.GATA3_2_3 0.989 0.004 0.001 0.006 #> HOMER.GATA3_2_4 0.002 0.023 0.001 0.974 #> HOMER.GATA3_2_5 0.825 0.061 0.011 0.103 #> HOMER.GATA3_2_6 0.778 0.048 0.129 0.045 #> HOMER.GATA3_2_7 0.184 0.401 0.348 0.067 #> HOMER.GATA3_2_8 0.433 0.167 0.359 0.041"},{"path":"https://tanaylab.github.io/prego/reference/bits_per_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the number of bits per position in a Position-Specific Scoring Matrix (PSSM). — bits_per_pos","title":"Calculate the number of bits per position in a Position-Specific Scoring Matrix (PSSM). — bits_per_pos","text":"function takes PSSM input calculates number bits per position. PSSM data frame matrix columns representing nucleotides , C, G, T. function first normalizes PSSM dividing element sum row. , calculates entropy position using formula: bits = log2(4) + sum(p * log2(p)), p probability nucleotide position. Finally, sets negative values zero returns resulting bits per position.","code":""},{"path":"https://tanaylab.github.io/prego/reference/bits_per_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the number of bits per position in a Position-Specific Scoring Matrix (PSSM). — bits_per_pos","text":"","code":"bits_per_pos(pssm, prior = 0.01)"},{"path":"https://tanaylab.github.io/prego/reference/bits_per_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the number of bits per position in a Position-Specific Scoring Matrix (PSSM). — bits_per_pos","text":"pssm data frame matrix representing Position-Specific Scoring Matrix (PSSM). prior numeric value indicating prior probability nucleotide. Default 0.01.","code":""},{"path":"https://tanaylab.github.io/prego/reference/bits_per_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the number of bits per position in a Position-Specific Scoring Matrix (PSSM). — bits_per_pos","text":"numeric vector representing number bits per position PSSM.","code":""},{"path":"https://tanaylab.github.io/prego/reference/bits_per_pos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the number of bits per position in a Position-Specific Scoring Matrix (PSSM). — bits_per_pos","text":"","code":"pssm <- data.frame(     A = c(0.2, 0.3, 0.1, 0.4),     C = c(0.1, 0.2, 0.3, 0.4),     G = c(0.4, 0.3, 0.2, 0.1),     T = c(0.3, 0.2, 0.4, 0.1) ) bits_per_pos(pssm) #> [1] 0.14121539 0.02684396 0.14121539 0.25558682"},{"path":"https://tanaylab.github.io/prego/reference/calc_seq_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Position Weight Matrix (PWM) Scores for DNA Sequences — calc_seq_pwm","title":"Calculate Position Weight Matrix (PWM) Scores for DNA Sequences — calc_seq_pwm","text":"Calculate Position Weight Matrix (PWM) Scores DNA Sequences","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_seq_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Position Weight Matrix (PWM) Scores for DNA Sequences — calc_seq_pwm","text":"","code":"calc_seq_pwm(sequences, mdb, bidirect = TRUE)"},{"path":"https://tanaylab.github.io/prego/reference/calc_seq_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Position Weight Matrix (PWM) Scores for DNA Sequences — calc_seq_pwm","text":"sequences Character vector DNA sequences. mdb MotifDB object containing PWMs. bidirect motif bi-directional. TRUE, reverse-complement motif used well.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_seq_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Position Weight Matrix (PWM) Scores for DNA Sequences — calc_seq_pwm","text":"numeric matrix sequences rows motifs columns, containing PWM scores. Row names preserved input sequences exist. Column names preserved PWM matrix exist.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_seq_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Position Weight Matrix (PWM) Scores for DNA Sequences — calc_seq_pwm","text":"","code":"sequences <- c(\"ACGTACGT\", \"TGCATGCA\") scores <- calc_seq_pwm(sequences, MOTIF_DB)"},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinuc_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dinucleotide Distribution in Sequences — calc_sequences_dinuc_dist","title":"Calculate Dinucleotide Distribution in Sequences — calc_sequences_dinuc_dist","text":"Calculate Dinucleotide Distribution Sequences","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinuc_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dinucleotide Distribution in Sequences — calc_sequences_dinuc_dist","text":"","code":"calc_sequences_dinuc_dist(sequences, size = NULL)"},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinuc_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dinucleotide Distribution in Sequences — calc_sequences_dinuc_dist","text":"sequences character vector containing sequences analyze. element vector single sequence. size integer specifying size consider analysis. NULL (default), maximum length sequences sequences vector used.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinuc_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dinucleotide Distribution in Sequences — calc_sequences_dinuc_dist","text":"data frame columns 'pos' 16 columns representing possible dinucleotide. row represents position sequences (1 size), contains fraction dinucleotide position across sequences.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinuc_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Dinucleotide Distribution in Sequences — calc_sequences_dinuc_dist","text":"","code":"# Generate some random sequences for testing set.seed(60427) sequences <- sapply(1:100, function(x) {     paste0(sample(c(\"A\", \"C\", \"G\", \"T\"), 1000, replace = TRUE), collapse = \"\") }) sequences <- as.character(sequences)  # Calculate the dinucleotide distribution result <- calc_sequences_dinuc_dist(sequences)  head(result) #>   pos   AA   AC   AG   AT   CA   CC   CG   CT   GA   GC   GG   GT   TA   TC #> 1   1 0.10 0.06 0.04 0.10 0.07 0.06 0.08 0.07 0.03 0.03 0.06 0.07 0.07 0.04 #> 2   2 0.07 0.06 0.10 0.04 0.02 0.08 0.07 0.02 0.09 0.08 0.04 0.05 0.10 0.06 #> 3   3 0.05 0.09 0.05 0.09 0.09 0.09 0.04 0.06 0.05 0.06 0.10 0.09 0.02 0.04 #> 4   4 0.03 0.06 0.06 0.06 0.07 0.10 0.05 0.06 0.06 0.05 0.05 0.07 0.05 0.09 #> 5   5 0.11 0.04 0.03 0.03 0.04 0.09 0.08 0.09 0.06 0.01 0.10 0.05 0.06 0.09 #> 6   6 0.06 0.08 0.06 0.07 0.03 0.07 0.05 0.08 0.04 0.08 0.09 0.05 0.08 0.01 #>     TG   TT #> 1 0.08 0.04 #> 2 0.09 0.03 #> 3 0.04 0.04 #> 4 0.06 0.08 #> 5 0.05 0.07 #> 6 0.11 0.04"},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinucs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dinucleotide Counts for Sequences — calc_sequences_dinucs","title":"Calculate Dinucleotide Counts for Sequences — calc_sequences_dinucs","text":"function calculates total count dinucleotide sequence vector DNA sequences.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinucs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dinucleotide Counts for Sequences — calc_sequences_dinucs","text":"","code":"calc_sequences_dinucs(sequences)"},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinucs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dinucleotide Counts for Sequences — calc_sequences_dinucs","text":"sequences character vector DNA sequences. element string representing DNA sequence composed , T, C, G.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinucs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dinucleotide Counts for Sequences — calc_sequences_dinucs","text":"numeric matrix : row corresponds sequence input vector. column represents specific dinucleotide (AA, AC, AG, , CA, CC, etc.). values matrix counts dinucleotide sequence. Column names set corresponding dinucleotides.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_dinucs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Dinucleotide Counts for Sequences — calc_sequences_dinucs","text":"","code":"sequences <- c(\"ATCG\", \"GCTA\", \"AATT\") result <- calc_sequences_dinucs(sequences) print(result) #>      AA AC AG AT CA CC CG CT GA GC GG GT TA TC TG TT #> [1,]  0  0  0  1  0  0  1  0  0  0  0  0  0  1  0  0 #> [2,]  0  0  0  0  0  0  0  1  0  1  0  0  1  0  0  0 #> [3,]  1  0  0  1  0  0  0  0  0  0  0  0  0  0  0  1"},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_trinuc_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Trinucleotide Distribution in Sequences — calc_sequences_trinuc_dist","title":"Calculate Trinucleotide Distribution in Sequences — calc_sequences_trinuc_dist","text":"Calculate Trinucleotide Distribution Sequences","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_trinuc_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Trinucleotide Distribution in Sequences — calc_sequences_trinuc_dist","text":"","code":"calc_sequences_trinuc_dist(sequences, size = NULL)"},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_trinuc_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Trinucleotide Distribution in Sequences — calc_sequences_trinuc_dist","text":"sequences character vector containing sequences analyze. element vector single sequence. size integer specifying size consider analysis. NULL (default), maximum length sequences sequences vector used.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_trinuc_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Trinucleotide Distribution in Sequences — calc_sequences_trinuc_dist","text":"data frame columns 'pos' 64 columns representing possible trinucleotide. row represents position sequences (1 size), contains fraction trinucleotide position across sequences.","code":""},{"path":"https://tanaylab.github.io/prego/reference/calc_sequences_trinuc_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Trinucleotide Distribution in Sequences — calc_sequences_trinuc_dist","text":"","code":"# Generate some random sequences for testing set.seed(60427) sequences <- sapply(1:100, function(x) {     paste0(sample(c(\"A\", \"C\", \"G\", \"T\"), 1000, replace = TRUE), collapse = \"\") }) sequences <- as.character(sequences)  # Calculate the trinucleotide distribution result <- calc_sequences_trinuc_dist(sequences)  head(result) #>   pos  AAA  AAC  AAG  AAT  ACA  ACC  ACG  ACT  AGA  AGC  AGG  AGT  ATA  ATC #> 1   1 0.02 0.02 0.04 0.02 0.01 0.04 0.01 0.00 0.02 0.02 0.00 0.00 0.03 0.04 #> 2   2 0.01 0.01 0.02 0.03 0.03 0.01 0.01 0.01 0.01 0.01 0.04 0.04 0.01 0.00 #> 3   3 0.00 0.01 0.01 0.03 0.02 0.04 0.01 0.02 0.02 0.01 0.01 0.01 0.03 0.01 #> 4   4 0.02 0.00 0.00 0.01 0.00 0.03 0.01 0.02 0.01 0.00 0.04 0.01 0.01 0.02 #> 5   5 0.02 0.03 0.04 0.02 0.00 0.01 0.02 0.01 0.01 0.01 0.01 0.00 0.02 0.00 #> 6   6 0.00 0.02 0.01 0.03 0.00 0.05 0.02 0.01 0.02 0.01 0.02 0.01 0.01 0.02 #>    ATG  ATT  CAA  CAC  CAG  CAT  CCA  CCC  CCG  CCT  CGA  CGC  CGG  CGT  CTA #> 1 0.02 0.01 0.02 0.01 0.03 0.01 0.00 0.02 0.03 0.01 0.01 0.04 0.00 0.03 0.01 #> 2 0.02 0.01 0.02 0.00 0.00 0.00 0.02 0.02 0.03 0.01 0.01 0.02 0.02 0.02 0.00 #> 3 0.03 0.02 0.01 0.03 0.04 0.01 0.01 0.03 0.03 0.02 0.01 0.01 0.01 0.01 0.01 #> 4 0.02 0.01 0.04 0.01 0.01 0.01 0.01 0.02 0.05 0.02 0.00 0.00 0.02 0.03 0.01 #> 5 0.01 0.00 0.01 0.01 0.02 0.00 0.01 0.02 0.02 0.04 0.00 0.03 0.03 0.02 0.03 #> 6 0.04 0.00 0.00 0.00 0.01 0.02 0.01 0.02 0.02 0.02 0.01 0.02 0.01 0.01 0.03 #>    CTC  CTG  CTT  GAA  GAC  GAG  GAT  GCA  GCC  GCG  GCT  GGA  GGC  GGG  GGT #> 1 0.01 0.03 0.02 0.00 0.02 0.01 0.00 0.00 0.00 0.02 0.01 0.02 0.01 0.03 0.00 #> 2 0.02 0.00 0.00 0.02 0.06 0.00 0.01 0.02 0.03 0.00 0.03 0.02 0.00 0.01 0.01 #> 3 0.01 0.02 0.02 0.02 0.01 0.00 0.02 0.03 0.02 0.00 0.01 0.02 0.02 0.03 0.03 #> 4 0.03 0.01 0.01 0.01 0.03 0.02 0.00 0.02 0.02 0.00 0.01 0.03 0.00 0.01 0.01 #> 5 0.00 0.06 0.00 0.02 0.01 0.00 0.03 0.00 0.01 0.00 0.00 0.02 0.03 0.03 0.02 #> 6 0.02 0.00 0.03 0.02 0.01 0.00 0.01 0.01 0.03 0.02 0.02 0.04 0.00 0.03 0.02 #>    GTA  GTC  GTG  GTT  TAA  TAC  TAG  TAT  TCA  TCC  TCG  TCT  TGA  TGC  TGG #> 1 0.04 0.00 0.03 0.00 0.03 0.01 0.02 0.01 0.01 0.02 0.01 0.00 0.04 0.01 0.01 #> 2 0.01 0.01 0.01 0.02 0.00 0.02 0.03 0.05 0.02 0.03 0.00 0.01 0.01 0.03 0.03 #> 3 0.01 0.05 0.01 0.02 0.00 0.01 0.01 0.00 0.01 0.01 0.01 0.01 0.01 0.01 0.00 #> 4 0.02 0.00 0.01 0.04 0.04 0.00 0.00 0.01 0.01 0.02 0.02 0.04 0.02 0.01 0.03 #> 5 0.03 0.01 0.01 0.00 0.01 0.03 0.00 0.02 0.02 0.03 0.01 0.03 0.01 0.01 0.02 #> 6 0.00 0.02 0.02 0.01 0.00 0.02 0.04 0.02 0.00 0.01 0.00 0.00 0.02 0.04 0.05 #>    TGT  TTA  TTC  TTG  TTT #> 1 0.02 0.02 0.01 0.01 0.00 #> 2 0.02 0.00 0.01 0.01 0.01 #> 3 0.02 0.00 0.02 0.00 0.02 #> 4 0.00 0.02 0.04 0.01 0.01 #> 5 0.01 0.00 0.00 0.03 0.04 #> 6 0.00 0.01 0.02 0.00 0.01"},{"path":"https://tanaylab.github.io/prego/reference/cluster_mat_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset examples — cluster_mat_example","title":"Dataset examples — cluster_mat_example","text":"Dataset examples","code":""},{"path":"https://tanaylab.github.io/prego/reference/cluster_mat_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset examples — cluster_mat_example","text":"","code":"cluster_mat_example  cluster_sequences_example  clusters_example  response_mat_example  sequences_example"},{"path":"https://tanaylab.github.io/prego/reference/cluster_mat_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset examples — cluster_mat_example","text":"sequences response variables various formats function examples object class character length 2359. object class character length 2359. object class matrix (inherits array) 1000 rows 5 columns. object class character length 1000.","code":""},{"path":"https://tanaylab.github.io/prego/reference/compute_local_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute local PWMs for a set of sequences given a PSSM matrix — compute_local_pwm","title":"Compute local PWMs for a set of sequences given a PSSM matrix — compute_local_pwm","text":"compute local PWM position every sequence. edges sequences become NA.","code":""},{"path":"https://tanaylab.github.io/prego/reference/compute_local_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute local PWMs for a set of sequences given a PSSM matrix — compute_local_pwm","text":"","code":"compute_local_pwm(   sequences,   pssm,   spat = NULL,   spat_min = 0,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01 )"},{"path":"https://tanaylab.github.io/prego/reference/compute_local_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute local PWMs for a set of sequences given a PSSM matrix — compute_local_pwm","text":"sequences vector sequences pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide.","code":""},{"path":"https://tanaylab.github.io/prego/reference/compute_local_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute local PWMs for a set of sequences given a PSSM matrix — compute_local_pwm","text":"matrix length(sequences) rows ncol(pssm) columns local PWM sequence position.","code":""},{"path":"https://tanaylab.github.io/prego/reference/compute_local_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute local PWMs for a set of sequences given a PSSM matrix — compute_local_pwm","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1])  pwm <- compute_local_pwm(cluster_sequences_example, res$pssm, res$spat) head(pwm) } # }"},{"path":"https://tanaylab.github.io/prego/reference/compute_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"Compute PWMs set sequences given PSSM matrix","code":""},{"path":"https://tanaylab.github.io/prego/reference/compute_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"","code":"compute_pwm(   sequences,   pssm,   spat = NULL,   spat_min = 1,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01,   func = \"logSumExp\" )"},{"path":"https://tanaylab.github.io/prego/reference/compute_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"sequences vector sequences pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide. func function use combine PWMs sequence. Either 'logSumExp' 'max'. default 'logSumExp'.","code":""},{"path":"https://tanaylab.github.io/prego/reference/compute_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"vector predicted pwm sequence.","code":""},{"path":"https://tanaylab.github.io/prego/reference/compute_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1])  pwm <- compute_pwm(cluster_sequences_example, res$pssm, res$spat) head(pwm)  # this is similar to the prediction in the regression head(res$pred) } # }"},{"path":"https://tanaylab.github.io/prego/reference/consensus_from_pssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert PSSM to consensus sequence — consensus_from_pssm","title":"Convert PSSM to consensus sequence — consensus_from_pssm","text":"Convert PSSM consensus sequence","code":""},{"path":"https://tanaylab.github.io/prego/reference/consensus_from_pssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert PSSM to consensus sequence — consensus_from_pssm","text":"","code":"consensus_from_pssm(pssm, single_thresh = 0.4, double_thresh = 0.6)"},{"path":"https://tanaylab.github.io/prego/reference/consensus_from_pssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert PSSM to consensus sequence — consensus_from_pssm","text":"pssm PSSM matrix single_thresh, double_thresh thresholds consensus sequence calculation (single double nucleotides)","code":""},{"path":"https://tanaylab.github.io/prego/reference/consensus_from_pssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert PSSM to consensus sequence — consensus_from_pssm","text":"consensus sequence PSSM. consensus sequence can found, function returns NA.","code":""},{"path":"https://tanaylab.github.io/prego/reference/consensus_from_pssm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert PSSM to consensus sequence — consensus_from_pssm","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) consensus_from_pssm(res$pssm) } # }"},{"path":"https://tanaylab.github.io/prego/reference/create_motif_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a MotifDB object from a tidy data frame — create_motif_db","title":"Create a MotifDB object from a tidy data frame — create_motif_db","text":"Create MotifDB object tidy data frame","code":""},{"path":"https://tanaylab.github.io/prego/reference/create_motif_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a MotifDB object from a tidy data frame — create_motif_db","text":"","code":"create_motif_db(motif_db, prior = 0.01, spat_factors = NULL, spat_bin_size = 1)"},{"path":"https://tanaylab.github.io/prego/reference/create_motif_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a MotifDB object from a tidy data frame — create_motif_db","text":"motif_db tidy data frame containing motif information prior Pseudocount prior add probabilities (default: 0.01) spat_factors Matrix spatial factors (rows=motifs, cols=bins) NULL spat_bin_size Size spatial bins (default: 1)","code":""},{"path":"https://tanaylab.github.io/prego/reference/create_motif_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a MotifDB object from a tidy data frame — create_motif_db","text":"MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/create_motif_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a MotifDB object from a tidy data frame — create_motif_db","text":"","code":"create_motif_db(all_motif_datasets()) #> MotifDB object with 3867 motifs and prior 0.01 #> Slots include: @mat, @rc_mat @motif_lengths, @prior, @spat_factors, @spat_bin_size"},{"path":"https://tanaylab.github.io/prego/reference/export_multi_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a multiple motif regression model — export_multi_regression","title":"Export a multiple motif regression model — export_multi_regression","text":"Export multiple motif regression model","code":""},{"path":"https://tanaylab.github.io/prego/reference/export_multi_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a multiple motif regression model — export_multi_regression","text":"","code":"export_multi_regression(reg, fn = NULL)"},{"path":"https://tanaylab.github.io/prego/reference/export_multi_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a multiple motif regression model — export_multi_regression","text":"reg multiple motif regression model, returned regress_pwm motif_num > 1 fn file name save model . NULL - model returned list","code":""},{"path":"https://tanaylab.github.io/prego/reference/export_multi_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a multiple motif regression model — export_multi_regression","text":"None","code":""},{"path":"https://tanaylab.github.io/prego/reference/export_multi_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a multiple motif regression model — export_multi_regression","text":"","code":"if (FALSE) { # \\dontrun{ res_multi <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1],     final_metric = \"ks\", spat_bin_size = 40,     spat_num_bins = 7,     motif_num = 2 ) export_fn <- tempfile() export_multi_regression(res_multi, export_fn)  light_res <- export_multi_regression(res_multi)  # loading can be done by: r <- load_multi_regression(export_fn) } # }"},{"path":"https://tanaylab.github.io/prego/reference/export_regression_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a motif regression model — export_regression_model","title":"Export a motif regression model — export_regression_model","text":"Export motif regression model","code":""},{"path":"https://tanaylab.github.io/prego/reference/export_regression_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a motif regression model — export_regression_model","text":"","code":"export_regression_model(model, fn = NULL)"},{"path":"https://tanaylab.github.io/prego/reference/export_regression_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a motif regression model — export_regression_model","text":"model motif regression model, returned regress_pwm motif_num = 1 fn file name save model . NULL - model returned list","code":""},{"path":"https://tanaylab.github.io/prego/reference/export_regression_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a motif regression model — export_regression_model","text":"None","code":""},{"path":"https://tanaylab.github.io/prego/reference/export_regression_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a motif regression model — export_regression_model","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1],     final_metric = \"ks\", spat_bin_size = 40,     spat_num_bins = 7 ) export_fn <- tempfile() export_regression_model(export_fn) r <- load_regression(export_fn) } # }"},{"path":"https://tanaylab.github.io/prego/reference/extract_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract pwm of sequences from a motif database — extract_pwm_old","title":"Extract pwm of sequences from a motif database — extract_pwm_old","text":"Extracts pwm motif motif database. extract_pwm_old deprecated version function, slower, returns slightly different results due float percision instead double. sequences length, old version used.","code":""},{"path":"https://tanaylab.github.io/prego/reference/extract_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract pwm of sequences from a motif database — extract_pwm_old","text":"","code":"extract_pwm_old(   sequences,   motifs = NULL,   dataset = all_motif_datasets(),   spat = NULL,   spat_min = 0,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01,   func = \"logSumExp\",   parallel = getOption(\"prego.parallel\", TRUE) )  extract_pwm(   sequences,   motifs = NULL,   dataset = MOTIF_DB,   spat = NULL,   spat_min = 0,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01,   func = \"logSumExp\",   parallel = getOption(\"prego.parallel\", TRUE) )"},{"path":"https://tanaylab.github.io/prego/reference/extract_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract pwm of sequences from a motif database — extract_pwm_old","text":"sequences vector sequences motifs names specific motifs extract dataset dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs JASPAR_motifs, all_motif_datasets(), MotifDB object. spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide. func function use combine PWMs sequence. Either 'logSumExp' 'max'. default 'logSumExp'. parallel logical, whether use parallel processing","code":""},{"path":"https://tanaylab.github.io/prego/reference/extract_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract pwm of sequences from a motif database — extract_pwm_old","text":"matrix size # sequences x # motifs pwm sequence motif","code":""},{"path":"https://tanaylab.github.io/prego/reference/extract_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract pwm of sequences from a motif database — extract_pwm_old","text":"","code":"if (FALSE) { # \\dontrun{ pwms <- extract_pwm(     cluster_sequences_example,     motifs = c(\"JASPAR.CDX1\", \"HOMER.Hnf1\", \"HOMER.GATA3_2\") ) head(pwms)  # all motifs all_pwms <- extract_pwm(cluster_sequences_example, prior = 0.01) dim(all_pwms) all_pwms[1:5, 1:5]  # for a specific dataset pwms_jaspar <- extract_pwm(cluster_sequences_example, dataset = JASPAR_motifs, prior = 0.01) head(pwms_jaspar)  # for specific motifs pwms_jaspar <- extract_pwm(     cluster_sequences_example,     motifs = c(\"JASPAR.CDX1\", \"JASPAR.CDX2\"),     prior = 0.01 ) } # }"},{"path":"https://tanaylab.github.io/prego/reference/generate_kmers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate kmers — generate_kmers","title":"Generate kmers — generate_kmers","text":"function generates possible kmers considering gap length. Gaps represented 'N'.","code":""},{"path":"https://tanaylab.github.io/prego/reference/generate_kmers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate kmers — generate_kmers","text":"","code":"generate_kmers(kmer_length, max_gap = 0, min_gap = 0)"},{"path":"https://tanaylab.github.io/prego/reference/generate_kmers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate kmers — generate_kmers","text":"kmer_length number non-gap characters motifs screened. max_gap maximum length gap considered pattern. Default: 0 min_gap minimum length gap considered pattern. Default: 0","code":""},{"path":"https://tanaylab.github.io/prego/reference/generate_kmers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate kmers — generate_kmers","text":"vector possible kmers considering gap length.","code":""},{"path":"https://tanaylab.github.io/prego/reference/generate_kmers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate kmers — generate_kmers","text":"","code":"# Generate kmers of length 2 without any gaps generate_kmers(2) #>  [1] \"TT\" \"CT\" \"GT\" \"AT\" \"TC\" \"CC\" \"GC\" \"AC\" \"TG\" \"CG\" \"GG\" \"AG\" \"TA\" \"CA\" \"GA\" #> [16] \"AA\"  # Generate kmers of length 3 with a single gap (1 'N') at any position generate_kmers(3, min_gap = 1, max_gap = 1) #>   [1] \"NTT\" \"NTT\" \"NTT\" \"NTT\" \"NCT\" \"NCT\" \"NCT\" \"NCT\" \"NGT\" \"NGT\" \"NGT\" \"NGT\" #>  [13] \"NAT\" \"NAT\" \"NAT\" \"NAT\" \"NTC\" \"NTC\" \"NTC\" \"NTC\" \"NCC\" \"NCC\" \"NCC\" \"NCC\" #>  [25] \"NGC\" \"NGC\" \"NGC\" \"NGC\" \"NAC\" \"NAC\" \"NAC\" \"NAC\" \"NTG\" \"NTG\" \"NTG\" \"NTG\" #>  [37] \"NCG\" \"NCG\" \"NCG\" \"NCG\" \"NGG\" \"NGG\" \"NGG\" \"NGG\" \"NAG\" \"NAG\" \"NAG\" \"NAG\" #>  [49] \"NTA\" \"NTA\" \"NTA\" \"NTA\" \"NCA\" \"NCA\" \"NCA\" \"NCA\" \"NGA\" \"NGA\" \"NGA\" \"NGA\" #>  [61] \"NAA\" \"NAA\" \"NAA\" \"NAA\" \"TNT\" \"CNT\" \"GNT\" \"ANT\" \"TNT\" \"CNT\" \"GNT\" \"ANT\" #>  [73] \"TNT\" \"CNT\" \"GNT\" \"ANT\" \"TNT\" \"CNT\" \"GNT\" \"ANT\" \"TNC\" \"CNC\" \"GNC\" \"ANC\" #>  [85] \"TNC\" \"CNC\" \"GNC\" \"ANC\" \"TNC\" \"CNC\" \"GNC\" \"ANC\" \"TNC\" \"CNC\" \"GNC\" \"ANC\" #>  [97] \"TNG\" \"CNG\" \"GNG\" \"ANG\" \"TNG\" \"CNG\" \"GNG\" \"ANG\" \"TNG\" \"CNG\" \"GNG\" \"ANG\" #> [109] \"TNG\" \"CNG\" \"GNG\" \"ANG\" \"TNA\" \"CNA\" \"GNA\" \"ANA\" \"TNA\" \"CNA\" \"GNA\" \"ANA\" #> [121] \"TNA\" \"CNA\" \"GNA\" \"ANA\" \"TNA\" \"CNA\" \"GNA\" \"ANA\" \"TTN\" \"CTN\" \"GTN\" \"ATN\" #> [133] \"TCN\" \"CCN\" \"GCN\" \"ACN\" \"TGN\" \"CGN\" \"GGN\" \"AGN\" \"TAN\" \"CAN\" \"GAN\" \"AAN\" #> [145] \"TTN\" \"CTN\" \"GTN\" \"ATN\" \"TCN\" \"CCN\" \"GCN\" \"ACN\" \"TGN\" \"CGN\" \"GGN\" \"AGN\" #> [157] \"TAN\" \"CAN\" \"GAN\" \"AAN\" \"TTN\" \"CTN\" \"GTN\" \"ATN\" \"TCN\" \"CCN\" \"GCN\" \"ACN\" #> [169] \"TGN\" \"CGN\" \"GGN\" \"AGN\" \"TAN\" \"CAN\" \"GAN\" \"AAN\" \"TTN\" \"CTN\" \"GTN\" \"ATN\" #> [181] \"TCN\" \"CCN\" \"GCN\" \"ACN\" \"TGN\" \"CGN\" \"GGN\" \"AGN\" \"TAN\" \"CAN\" \"GAN\" \"AAN\"  # Generate kmers of length 3 with a gap of 1 to 2 'N's at any position generate_kmers(3, min_gap = 1, max_gap = 2) #>   [1] \"NTT\" \"NTT\" \"NTT\" \"NTT\" \"NCT\" \"NCT\" \"NCT\" \"NCT\" \"NGT\" \"NGT\" \"NGT\" \"NGT\" #>  [13] \"NAT\" \"NAT\" \"NAT\" \"NAT\" \"NTC\" \"NTC\" \"NTC\" \"NTC\" \"NCC\" \"NCC\" \"NCC\" \"NCC\" #>  [25] \"NGC\" \"NGC\" \"NGC\" \"NGC\" \"NAC\" \"NAC\" \"NAC\" \"NAC\" \"NTG\" \"NTG\" \"NTG\" \"NTG\" #>  [37] \"NCG\" \"NCG\" \"NCG\" \"NCG\" \"NGG\" \"NGG\" \"NGG\" \"NGG\" \"NAG\" \"NAG\" \"NAG\" \"NAG\" #>  [49] \"NTA\" \"NTA\" \"NTA\" \"NTA\" \"NCA\" \"NCA\" \"NCA\" \"NCA\" \"NGA\" \"NGA\" \"NGA\" \"NGA\" #>  [61] \"NAA\" \"NAA\" \"NAA\" \"NAA\" \"TNT\" \"CNT\" \"GNT\" \"ANT\" \"TNT\" \"CNT\" \"GNT\" \"ANT\" #>  [73] \"TNT\" \"CNT\" \"GNT\" \"ANT\" \"TNT\" \"CNT\" \"GNT\" \"ANT\" \"TNC\" \"CNC\" \"GNC\" \"ANC\" #>  [85] \"TNC\" \"CNC\" \"GNC\" \"ANC\" \"TNC\" \"CNC\" \"GNC\" \"ANC\" \"TNC\" \"CNC\" \"GNC\" \"ANC\" #>  [97] \"TNG\" \"CNG\" \"GNG\" \"ANG\" \"TNG\" \"CNG\" \"GNG\" \"ANG\" \"TNG\" \"CNG\" \"GNG\" \"ANG\" #> [109] \"TNG\" \"CNG\" \"GNG\" \"ANG\" \"TNA\" \"CNA\" \"GNA\" \"ANA\" \"TNA\" \"CNA\" \"GNA\" \"ANA\" #> [121] \"TNA\" \"CNA\" \"GNA\" \"ANA\" \"TNA\" \"CNA\" \"GNA\" \"ANA\" \"TTN\" \"CTN\" \"GTN\" \"ATN\" #> [133] \"TCN\" \"CCN\" \"GCN\" \"ACN\" \"TGN\" \"CGN\" \"GGN\" \"AGN\" \"TAN\" \"CAN\" \"GAN\" \"AAN\" #> [145] \"TTN\" \"CTN\" \"GTN\" \"ATN\" \"TCN\" \"CCN\" \"GCN\" \"ACN\" \"TGN\" \"CGN\" \"GGN\" \"AGN\" #> [157] \"TAN\" \"CAN\" \"GAN\" \"AAN\" \"TTN\" \"CTN\" \"GTN\" \"ATN\" \"TCN\" \"CCN\" \"GCN\" \"ACN\" #> [169] \"TGN\" \"CGN\" \"GGN\" \"AGN\" \"TAN\" \"CAN\" \"GAN\" \"AAN\" \"TTN\" \"CTN\" \"GTN\" \"ATN\" #> [181] \"TCN\" \"CCN\" \"GCN\" \"ACN\" \"TGN\" \"CGN\" \"GGN\" \"AGN\" \"TAN\" \"CAN\" \"GAN\" \"AAN\" #> [193] \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNT\" #> [205] \"NNT\" \"NNT\" \"NNT\" \"NNT\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" #> [217] \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNC\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" #> [229] \"NNG\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" \"NNG\" #> [241] \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"NNA\" #> [253] \"NNA\" \"NNA\" \"NNA\" \"NNA\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" #> [265] \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" #> [277] \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" #> [289] \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" #> [301] \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\" #> [313] \"TNN\" \"CNN\" \"GNN\" \"ANN\" \"TNN\" \"CNN\" \"GNN\" \"ANN\"  # Generate kmers of length 3 with a gap of 2 'N's at any position generate_kmers(3, min_gap = 2, max_gap},{"path":"https://tanaylab.github.io/prego/reference/get_motif_pssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract pssm of sequences from a motif database — get_motif_pssm","title":"Extract pssm of sequences from a motif database — get_motif_pssm","text":"Extract pssm sequences motif database","code":""},{"path":"https://tanaylab.github.io/prego/reference/get_motif_pssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract pssm of sequences from a motif database — get_motif_pssm","text":"","code":"get_motif_pssm(motif, dataset = all_motif_datasets())"},{"path":"https://tanaylab.github.io/prego/reference/get_motif_pssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract pssm of sequences from a motif database — get_motif_pssm","text":"motif name motif extract dataset dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs JASPAR_motifs, all_motif_datasets().","code":""},{"path":"https://tanaylab.github.io/prego/reference/get_motif_pssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract pssm of sequences from a motif database — get_motif_pssm","text":"data frame pssm motif","code":""},{"path":"https://tanaylab.github.io/prego/reference/get_motif_pssm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract pssm of sequences from a motif database — get_motif_pssm","text":"","code":"get_motif_pssm(\"JASPAR.HNF1A\") #> # A tibble: 15 x 5 #>   pos          A            C            G            T #> 1   0 0.36815323 0.1725210262 0.2466605414 0.2126652060 #> 2   1 0.45927632 0.0273026316 0.4715789474 0.0418421053 #> 3   2 0.02280446 0.0642891800 0.0547671033 0.8581392528 #> 4   3 0.14734287 0.1097234161 0.0275066997 0.7154270112 #> 5   4 0.98175132 0.0002081599 0.0170691091 0.0009714127 #> 6   5 0.93368088 0.0417711495 0.0005279134 0.0240200607 #> # ... with 9 more rows"},{"path":"https://tanaylab.github.io/prego/reference/gextract.local_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts local position weight matrix (PWM) scores for given intervals and a PWM. — gextract.local_pwm","title":"Extracts local position weight matrix (PWM) scores for given intervals and a PWM. — gextract.local_pwm","text":"Extracts local position weight matrix (PWM) scores given intervals PWM.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract.local_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts local position weight matrix (PWM) scores for given intervals and a PWM. — gextract.local_pwm","text":"","code":"gextract.local_pwm(   intervals,   pssm,   spat = NULL,   spat_min = 0,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01 )"},{"path":"https://tanaylab.github.io/prego/reference/gextract.local_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts local position weight matrix (PWM) scores for given intervals and a PWM. — gextract.local_pwm","text":"intervals intervals extract pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract.local_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts local position weight matrix (PWM) scores for given intervals and a PWM. — gextract.local_pwm","text":"matrix nrow(intervals) rows ncol(pssm) columns local PWM sequence position.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract.local_pwm_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the frequency of a position weight matrix (PWM) in a given set of intervals — gextract.local_pwm_freq","title":"Calculate the frequency of a position weight matrix (PWM) in a given set of intervals — gextract.local_pwm_freq","text":"Calculate frequency position weight matrix (PWM) given set intervals","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract.local_pwm_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the frequency of a position weight matrix (PWM) in a given set of intervals — gextract.local_pwm_freq","text":"","code":"gextract.local_pwm_freq(   intervals,   pssm,   q_threshold,   bg_intervals = NULL,   spat = NULL,   spat_min = 0,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01,   n_sequences = 10000,   dist_from_edge = 3000000,   chromosomes = NULL )"},{"path":"https://tanaylab.github.io/prego/reference/gextract.local_pwm_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the frequency of a position weight matrix (PWM) in a given set of intervals — gextract.local_pwm_freq","text":"intervals intervals extract pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). q_threshold quantile threshold PWM (e.g. 0.99 top percentile) bg_intervals (optional) intervals set background. provided, random intervals used spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide. n_sequences number sequences sample order compute quantiles. default 1e4. dist_from_edge minimum distance edge chromosome region start end(default: 3e6) chromosomes chromosomes sample (default: chromosomes)","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract.local_pwm_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the frequency of a position weight matrix (PWM) in a given set of intervals — gextract.local_pwm_freq","text":"matrix nrow(intervals) rows ncol(pssm) columns TRUE PWM threshold sequence position.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract pwm of intervals from a motif database — gextract_pwm_old","title":"Extract pwm of intervals from a motif database — gextract_pwm_old","text":"Extract pwm interval motif motif database. gextract_pwm_old older version function, slower, returns slightly different results due float percision instead double.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract pwm of intervals from a motif database — gextract_pwm_old","text":"","code":"gextract_pwm_old(   intervals,   motifs = NULL,   dataset = all_motif_datasets(),   spat = NULL,   spat_min = 1,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01,   func = \"logSumExp\",   parallel = getOption(\"prego.parallel\", TRUE) )  gextract_pwm(   intervals,   motifs = NULL,   dataset = MOTIF_DB,   spat = NULL,   spat_min = 1,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01,   func = \"logSumExp\",   parallel = getOption(\"prego.parallel\", TRUE) )"},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract pwm of intervals from a motif database — gextract_pwm_old","text":"intervals misha intervals set motifs names specific motifs extract dataset dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs JASPAR_motifs, all_motif_datasets(), MotifDB object. spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide. func function use combine PWMs sequence. Either 'logSumExp' 'max'. default 'logSumExp'. parallel logical, whether use parallel processing","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract pwm of intervals from a motif database — gextract_pwm_old","text":"intervals set additional columns per motif, containing pwm interval motif","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract pwm of intervals from a motif database — gextract_pwm_old","text":"","code":"if (FALSE) { # \\dontrun{ library(misha) gdb.init_examples() pwms <- gextract_pwm(gintervals.load(\"annotations\")) pwms[, 1:20] } # }"},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract quantiles of pwm of intervals from a motif database — gextract_pwm.quantile","title":"Extract quantiles of pwm of intervals from a motif database — gextract_pwm.quantile","text":"Extract interval quantile genome motif given length. Note quantiles computed motif separately, therefore might slow intervals un-normalized lengths.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract quantiles of pwm of intervals from a motif database — gextract_pwm.quantile","text":"","code":"gextract_pwm.quantile(   intervals,   motifs = NULL,   dataset = MOTIF_DB,   percision = 0.01,   spat = NULL,   spat_min = 1,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01,   func = \"logSumExp\",   n_sequences = 10000,   dist_from_edge = 3000000,   chromosomes = NULL,   parallel = getOption(\"prego.parallel\", TRUE) )"},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract quantiles of pwm of intervals from a motif database — gextract_pwm.quantile","text":"intervals misha intervals set motifs names specific motifs extract dataset dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs JASPAR_motifs, all_motif_datasets(), MotifDB object. percision percision quantiles. Default 0.01, means quantiles computed every 1% pwm. spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide. func function use combine PWMs sequence. Either 'logSumExp' 'max'. default 'logSumExp'. n_sequences number sequences sample order compute quantiles. default 1e4. dist_from_edge minimum distance edge chromosome region start end(default: 3e6) chromosomes chromosomes sample (default: chromosomes) parallel logical, whether use parallel processing","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract quantiles of pwm of intervals from a motif database — gextract_pwm.quantile","text":"data frame quantiles pwm interval motif. quantiles columns form {motif}.q","code":""},{"path":"https://tanaylab.github.io/prego/reference/gextract_pwm.quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract quantiles of pwm of intervals from a motif database — gextract_pwm.quantile","text":"","code":"if (FALSE) { # \\dontrun{ library(misha) gdb.init_examples() gextract_pwm.quantile(\"annotations\", motifs = c(\"JASPAR.CDX1\", \"JASPAR.CDX2\"), dist_from_edge = 100) } # }"},{"path":"https://tanaylab.github.io/prego/reference/gintervals.center_by_pssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Center intervals by PSSM — gintervals.center_by_pssm","title":"Center intervals by PSSM — gintervals.center_by_pssm","text":"function takes set intervals position-specific scoring matrix (PSSM) centers intervals based maximum score position PSSM. intervals shifted maximum score position becomes center interval.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gintervals.center_by_pssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center intervals by PSSM — gintervals.center_by_pssm","text":"","code":"gintervals.center_by_pssm(   intervals,   pssm,   spat = NULL,   spat_min = 0,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01 )"},{"path":"https://tanaylab.github.io/prego/reference/gintervals.center_by_pssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center intervals by PSSM — gintervals.center_by_pssm","text":"intervals intervals extract pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gintervals.center_by_pssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center intervals by PSSM — gintervals.center_by_pssm","text":"data frame containing centered intervals. intervals columns input intervals, start end positions adjusted center intervals based maximum score position PSSM.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gpwm_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute quantile of pwm for a given interval size — gpwm_quantiles","title":"Compute quantile of pwm for a given interval size — gpwm_quantiles","text":"Computes quantile pwm given interval size sampling random intervals genome, using given intervals. number sequences sample can specified n_sequences.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gpwm_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute quantile of pwm for a given interval size — gpwm_quantiles","text":"","code":"gpwm_quantiles(   size,   quantiles,   pssm,   bg_intervals = NULL,   spat = NULL,   spat_min = 1,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01,   n_sequences = 10000,   dist_from_edge = 3000000,   chromosomes = NULL,   func = \"logSumExp\" )"},{"path":"https://tanaylab.github.io/prego/reference/gpwm_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute quantile of pwm for a given interval size — gpwm_quantiles","text":"size size intervals sample quantiles quantiles compute. See quantile details. pssm PSSM matrix data frame bg_intervals (optional) intervals set background. provided, random intervals used spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide. n_sequences number sequences sample order compute quantiles. default 1e4. dist_from_edge minimum distance edge chromosome region start end(default: 3e6) chromosomes chromosomes sample (default: chromosomes) func function use combine PWMs sequence. Either 'logSumExp' 'max'. default 'logSumExp'.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gpwm_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute quantile of pwm for a given interval size — gpwm_quantiles","text":"named vector quantiles pwm given interval size.","code":""},{"path":"https://tanaylab.github.io/prego/reference/gpwm_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute quantile of pwm for a given interval size — gpwm_quantiles","text":"","code":"if (FALSE) { # \\dontrun{ library(misha) library(dplyr) gdb.init_examples() pssm <- JASPAR_motifs %>%     filter(motif == \"JASPAR.CDX1\") %>%     select(-motif) gpwm_quantiles(1000, seq(0, 1, 0.1), pssm, dist_from_edge = 100) } # }"},{"path":"https://tanaylab.github.io/prego/reference/initialize-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize method for MotifDB objects — initialize,MotifDB-method","title":"Initialize method for MotifDB objects — initialize,MotifDB-method","text":"Initialize method MotifDB objects","code":""},{"path":"https://tanaylab.github.io/prego/reference/initialize-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize method for MotifDB objects — initialize,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' initialize(   .Object,   mat = matrix(0, 4, 1),   rc_mat = matrix(0, 4, 1),   motif_lengths = setNames(as.integer(1), colnames(mat)[1]),   prior = 0.01,   spat_factors = matrix(1, nrow = 1, ncol = 1),   spat_bin_size = 1 )"},{"path":"https://tanaylab.github.io/prego/reference/initialize-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize method for MotifDB objects — initialize,MotifDB-method","text":".Object MotifDB object mat Position weight matrix rc_mat Reverse complement matrix motif_lengths Named vector motif lengths prior Pseudocount prior value spat_factors Matrix spatial factors spat_bin_size Size spatial bins","code":""},{"path":"https://tanaylab.github.io/prego/reference/intervals_to_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert intervals to sequences — intervals_to_seq","title":"Convert intervals to sequences — intervals_to_seq","text":"function takes set intervals converts sequences. requires 'misha' package installed. package installed, display error message instructions install .","code":""},{"path":"https://tanaylab.github.io/prego/reference/intervals_to_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert intervals to sequences — intervals_to_seq","text":"","code":"intervals_to_seq(intervals)"},{"path":"https://tanaylab.github.io/prego/reference/intervals_to_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert intervals to sequences — intervals_to_seq","text":"intervals intervals set data frame 'chrom', 'start', 'end' columns.","code":""},{"path":"https://tanaylab.github.io/prego/reference/intervals_to_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert intervals to sequences — intervals_to_seq","text":"character vector sequences.","code":""},{"path":"https://tanaylab.github.io/prego/reference/intervals_to_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert intervals to sequences — intervals_to_seq","text":"","code":"if (FALSE) { # \\dontrun{ library(misha) gdb.init_examples() intervals_to_seq(gintervals.load(\"annotations\")) } # }"},{"path":"https://tanaylab.github.io/prego/reference/kmer_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a kmer Matrix — kmer_matrix","title":"Generate a kmer Matrix — kmer_matrix","text":"function calculates frequency kmer DNA sequence.","code":""},{"path":"https://tanaylab.github.io/prego/reference/kmer_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a kmer Matrix — kmer_matrix","text":"","code":"kmer_matrix(   sequences,   kmer_length,   max_gap = 0,   mask = NULL,   add_mask = FALSE,   from_range = 1,   to_range = NULL,   set_rownames = FALSE )"},{"path":"https://tanaylab.github.io/prego/reference/kmer_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a kmer Matrix — kmer_matrix","text":"sequences vector strings DNA sequences ('T', 'C', 'G', '' 'N'). kmer_length length kmers considered. max_gap maximum length gap considered pattern. Default: 0 mask string length kmer_length 'N' indicates wildcard position (default NULL - mask). add_mask TRUE, result mask added non-masked kmers. Otherwise - masked kmers returned. from_range Sequences considered position from_range. to_range Sequences considered position to_range (default NULL - using length sequences). set_rownames TRUE, rownames matrix set sequences (default FALSE).","code":""},{"path":"https://tanaylab.github.io/prego/reference/kmer_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a kmer Matrix — kmer_matrix","text":"matrix rows number sequences, columns kmers values number occurrences kmer.","code":""},{"path":"https://tanaylab.github.io/prego/reference/kmer_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a kmer Matrix — kmer_matrix","text":"","code":"kmer_matrix(c(\"ATCG\", \"TCGA\", \"ATAT\"), 2) #>      CG AT TC GA TA #> [1,]  1  1  1  0  0 #> [2,]  1  0  1  1  0 #> [3,]  0  2  0  0  1 kmer_matrix(c(\"ATCG\", \"TCGA\", \"ATAT\"), 3) #>      TCG ATC CGA TAT ATA #> [1,]   1   1   0   0   0 #> [2,]   1   0   1   0   0 #> [3,]   0   0   0   1   1 kmer_matrix(c(\"ATCG\", \"TCGA\", \"ATAT\"), 3, mask = \"ATN\") #>      TCN ATN CGN TAN #> [1,]   1   1   0   0 #> [2,]   1   0   1   0 #> [3,]   0   1   0   1"},{"path":"https://tanaylab.github.io/prego/reference/kmers_to_pssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform k-mers to PSSM (Position-Specific Scoring Matrix) — kmers_to_pssm","title":"Transform k-mers to PSSM (Position-Specific Scoring Matrix) — kmers_to_pssm","text":"function transforms vector k-mers position-specific scoring matrix (PSSM). PSSM represents frequency nucleotide position k-mers. nucleotide 'N', treated equal probabilities '', 'C', 'G', 'T'. result returned data frame columns k-mer, position, nucleotide frequencies.","code":""},{"path":"https://tanaylab.github.io/prego/reference/kmers_to_pssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform k-mers to PSSM (Position-Specific Scoring Matrix) — kmers_to_pssm","text":"","code":"kmers_to_pssm(kmers, prior = 0.01)"},{"path":"https://tanaylab.github.io/prego/reference/kmers_to_pssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform k-mers to PSSM (Position-Specific Scoring Matrix) — kmers_to_pssm","text":"kmers character vector k-mers. prior numeric value indicating prior probability nucleotide. Default 0.01.","code":""},{"path":"https://tanaylab.github.io/prego/reference/kmers_to_pssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform k-mers to PSSM (Position-Specific Scoring Matrix) — kmers_to_pssm","text":"data frame columns k-mer, position, nucleotide frequencies, 'kmer', 'pos', '', 'C', 'G', 'T'.","code":""},{"path":"https://tanaylab.github.io/prego/reference/kmers_to_pssm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform k-mers to PSSM (Position-Specific Scoring Matrix) — kmers_to_pssm","text":"","code":"kmers_to_pssm(c(\"ACGTN\", \"TGCAN\"), prior = 0.01) #>     kmer pos           A           C           G           T #> 1  ACGTN   1 0.970873786 0.009708738 0.009708738 0.009708738 #> 2  ACGTN   2 0.009708738 0.970873786 0.009708738 0.009708738 #> 3  ACGTN   3 0.009708738 0.009708738 0.970873786 0.009708738 #> 4  ACGTN   4 0.009708738 0.009708738 0.009708738 0.970873786 #> 5  ACGTN   5 0.250000000 0.250000000 0.250000000 0.250000000 #> 6  TGCAN   1 0.009708738 0.009708738 0.009708738 0.970873786 #> 7  TGCAN   2 0.009708738 0.009708738 0.970873786 0.009708738 #> 8  TGCAN   3 0.009708738 0.970873786 0.009708738 0.009708738 #> 9  TGCAN   4 0.970873786 0.009708738 0.009708738 0.009708738 #> 10 TGCAN   5 0.250000000 0.250000000 0.250000000 0.250000000"},{"path":"https://tanaylab.github.io/prego/reference/length-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the length of a MotifDB object — length,MotifDB-method","title":"Get the length of a MotifDB object — length,MotifDB-method","text":"Get length MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/length-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the length of a MotifDB object — length,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' length(x)"},{"path":"https://tanaylab.github.io/prego/reference/length-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the length of a MotifDB object — length,MotifDB-method","text":"x MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/length-MotifDB-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the length of a MotifDB object — length,MotifDB-method","text":"number motifs object","code":""},{"path":"https://tanaylab.github.io/prego/reference/length-MotifDB-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the length of a MotifDB object — length,MotifDB-method","text":"","code":"length(MOTIF_DB) #> [1] 3867 length(MOTIF_DB[c(\"HOMER.GATA3_2\", \"JASPAR.CDX1\")]) #> [1] 2"},{"path":"https://tanaylab.github.io/prego/reference/load_multi_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a multiple motif regression model from a file — load_multi_regression","title":"Load a multiple motif regression model from a file — load_multi_regression","text":"Load multiple motif regression model file","code":""},{"path":"https://tanaylab.github.io/prego/reference/load_multi_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a multiple motif regression model from a file — load_multi_regression","text":"","code":"load_multi_regression(   fn,   response = NULL,   sequences = NULL,   motif_dataset = all_motif_datasets(),   parallel = getOption(\"prego.parallel\", FALSE),   alternative = \"two.sided\" )"},{"path":"https://tanaylab.github.io/prego/reference/load_multi_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a multiple motif regression model from a file — load_multi_regression","text":"fn file name list model response matrix response variables - number rows equal number sequences sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper). Please make sure sequences long enough cover spat_num_bins * spat_bin_size bp, centered around motif/signal. motif_dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs, JASPAR_motifs all_motif_datasets(). default all_motif_datasets() used. parallel whether run optimization parallel. use set_parallel set number cores use. alternative alternative hypothesis p-value calculation using ks.test. One \"two.sided\", \"less\" \"greater\".","code":""},{"path":"https://tanaylab.github.io/prego/reference/load_multi_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a multiple motif regression model from a file — load_multi_regression","text":"list following elements: models: list models. model: combined model. spat_min: minimum spatial position. spat_max: maximum spatial position. bidirect: whether model bidirectional. spat_bin_size: spatial bin size. seq_length: sequence length. motif_num: number motifs. predict: function predict response. predict_multi: function predict response motif.","code":""},{"path":"https://tanaylab.github.io/prego/reference/load_multi_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a multiple motif regression model from a file — load_multi_regression","text":"","code":"if (FALSE) { # \\dontrun{ res_multi <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1],     final_metric = \"ks\", spat_bin_size = 40,     spat_num_bins = 7,     motif_num = 2 ) tmp <- tempfile() res_multi$export(tmp) r <- load_multi_regression(tmp) } # }"},{"path":"https://tanaylab.github.io/prego/reference/load_regression_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a motif regression model from a file — load_regression_model","title":"Load a motif regression model from a file — load_regression_model","text":"Load motif regression model file","code":""},{"path":"https://tanaylab.github.io/prego/reference/load_regression_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a motif regression model from a file — load_regression_model","text":"","code":"load_regression_model(fn)"},{"path":"https://tanaylab.github.io/prego/reference/load_regression_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a motif regression model from a file — load_regression_model","text":"fn file name list model","code":""},{"path":"https://tanaylab.github.io/prego/reference/load_regression_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a motif regression model from a file — load_regression_model","text":"list following elements: pssm: data frame PSSM spat: data frame spatial profile spat_min: numeric value minimum value spatial profile spat_max: numeric value maximum value spatial profile bidirect: boolean value indicating whether model bidirectional seq_length: numeric value length sequences","code":""},{"path":"https://tanaylab.github.io/prego/reference/load_regression_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a motif regression model from a file — load_regression_model","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1],     final_metric = \"ks\", spat_bin_size = 40,     spat_num_bins = 7 ) export_fn <- tempfile() export_regression_model(export_fn) r <- load_regression(export_fn) } # }"},{"path":"https://tanaylab.github.io/prego/reference/mask_sequences_by_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Mask sequences by thresholding the PWM — mask_sequences_by_pwm","title":"Mask sequences by thresholding the PWM — mask_sequences_by_pwm","text":"Mask sequences thresholding PWM. Sequences PWM threshold masked 'N'. Sequences edges sequences also masked 'N'.","code":""},{"path":"https://tanaylab.github.io/prego/reference/mask_sequences_by_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mask sequences by thresholding the PWM — mask_sequences_by_pwm","text":"","code":"mask_sequences_by_pwm(   sequences,   pssm,   mask_thresh,   pos_bits_thresh = 0.2,   spat = NULL,   spat_min = 0,   spat_max = NULL,   bidirect = TRUE,   prior = 0.01 )"},{"path":"https://tanaylab.github.io/prego/reference/mask_sequences_by_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mask sequences by thresholding the PWM — mask_sequences_by_pwm","text":"sequences vector sequences pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). mask_thresh Threshold masking. Sequences PWM threshold masked 'N'. pos_bits_thresh Mask positions amount information contributed (Shannon entropy, measured bits) threshold. scale y axis pssm logo plots. spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. prior prior probability nucleotide.","code":""},{"path":"https://tanaylab.github.io/prego/reference/mask_sequences_by_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mask sequences by thresholding the PWM — mask_sequences_by_pwm","text":"vector masked sequences.","code":""},{"path":"https://tanaylab.github.io/prego/reference/mask_sequences_by_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mask sequences by thresholding the PWM — mask_sequences_by_pwm","text":"","code":"res <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) #> ℹ Using 7 bins of size 40 bp #> ℹ Using \"ks\" as the final metric #> ℹ Number of response variables: 1 #>  #> ── Generate candidate kmers  #>  #> ── Regress each candidate kmer  #> ℹ Running regression on 10 candidate kmers #> • Bidirectional: TRUE #> • Spat bin size: 40 #> • Number of spatial bins 7 #> • Length of sequence: 280 #> • Min gap: 0 #> • Max gap: 1 #> • Kmer length: 8 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> • kmer: \"TTAAT*ATT\", score (ks): 0.847160350285881 #> • kmer: \"AAT*ATTAA\", score (ks): 0.843616775749975 #> • kmer: \"TAAT*ATTA\", score (ks): 0.850689772296759 #> • kmer: \"GTTAAT*AT\", score (ks): 0.838714558811362 #> • kmer: \"AT*ATTAAC\", score (ks): 0.838920314752157 #> • kmer: \"AA*CATTAA\", score (ks): 0.846266563897562 #> • kmer: \"TTAA*CATT\", score (ks): 0.84705039605297 #> • kmer: \"TAATCATT\", score (ks): 0.844248196097387 #> • kmer: \"TTA*TCATT\", score (ks): 0.852612338389051 #> • kmer: \"TAA*CATTA\", score (ks): 0.845319433376444 #> ℹ Best match in the database: \"JOLMA.HNF1B_di_full_1\", cor: 0.784 #> ✔ \"JOLMA.HNF1B_di_full_1\" KS test D: 0.8484, p-value: 0 #> ℹ Best motif: \"***TTA*TCATT***\", score (ks): 0.852612338389051 new_sequences <- mask_sequences_by_pwm(     cluster_sequences_example,     res$pssm,     quantile(res$pred, 0.95),     spat = res$spat ) #> ℹ The following positions will be masked: 4, 5, 6, 7, 8, 10, 11, and 12. Overall 8 positions will be masked  head(new_sequences) #> [1] \"CAGTAAAAGCTTTAATGCGTCTTGAGAGGGAGAGCATCAGCTTACAGAGCGAAGACCCCGAATGGCAAAACCCCGTCCCTTTTATGGAGAATTGCCCTCCGCCTCAGACACGTCGCTCCCTGATTGGCTGCAGCCCATCGGCCGAGTTGTCCTCACGGGGAAGGCAGAGCACATGGAGTGGAAAACTACCCCGGGCACATGCACAGATTACTTGTTTACTACTTAGAACACAGGATGTCAGCACCATCTTGTAATGGCGAATGTGAGGGCGGCTCCTCATACTTANNNNNNNNNNNNNNN\" #> [2] \"AATTGCTTCATTAAAACCAAGTTTTTCTTTGTTCATTAGGCGTTAGCCAGATGGGAATTCAGTGTTTTTAAGCAGACACTCACATGGGGTTTTGTTTCTGACATTGATGAATGACTGCCTGCATCCCAAGATGGAAGTTTCCACCCTGGGCTCTGACTGCAACTTTTGTTATTCATAGCAGAAGTCACACCAGTCCACAGCTGAATAGCCACAGTGTTAAGAACAGCTGTCTTACAGCACTGTATGTGGAGAACAGAAAGAGCGGGGTCAAGACTGGTCGCATTGNNNNNNNNNNNNNNN\" #> [3] \"GAGTGAGGTGTAAACTGAGCACCCCTTTTTATGGTCTTCACTGTTGCTAGGTAACTGGGGAGGAGTTTAGCCTGAAGGTCAGAAGCTTGGGCCATTGATTATGTGACTACTGACCCTGCTTCTCTTGTGGGGGCTGTGGGAGGTGGTACCTTAGGCAGGGGCCGAGTTCCAGGAGCATGAGGGAACGCCCACTGTGTCATGTAGGTGATTTATGGCCATCGGGTTTCAGACCTCAGCTCGACTGGAGACCAGCCTGCAATTCCCCACAGGAAACTTTATAAGAACNNNNNNNNNNNNNNN\" #> [4] \"TTCACTGAAGGTTTAAAACCATAGCTAAGTTATTAGTGAAGTTTTGTAGAGATAAGCCCAGTTGGTATTTTATCTTCTGTCCTAGCACCTACAATAAATCATTAGCTGCTTTTTAATGACCTTTGGTTAATTGTTTTACAACCTCTTGGAATGTGCTCTTAGTAGGAGAAAGTCTGGTTACCATCTAAGAGCAATTAACTGGTGACACTTGGGAGGCTGGCAGAGTTCTCATTGCAGCTTTGACTATCAGAAAAGGACCTAATAGCAGTCCTGTTACAAAAGAGCNNNNNNNNNNNNNNN\" #> [5] \"CATGTTACGCTCCATCACTGAGAGACAAGGGTAGGAGCTCAGGGAGGAACCTAATCCAGAAACTGACAGCAGAACCAAAAACGACCACTGATATCTGACTTGCTCTCTGTGTCTGGCTCAGCTGCCTTCCATGTACATCCCAGGACCCACAGAGTGACACAGGCCACAATGGCTGGACCCTCCCACATCAATCATTAATCAAGAGAATGTTTGCCAGACATGCCCACAGACCAATCTGACGGAGGCAGCTCCTCAGCTGAGGCTCCCTTTCCCAGGCGGCTACTGNNNNNNNNNNNNNNN\" #> [6] \"AATTTGTATTTAACTATTTCTGGTTACTTAGCTGTGTGTCCTACCTCTGTGTTTGCTGTAGGATTGCAGTTTGATTCCAGCCAACCTTGCAGAGGCATTTGGATTACTGATTAACTGCAGTGAGGCATCTCCTTGCCACCCACTTCTTCCTACTGTGCAGCACACTTTAAAGAAAGCAGTGGAGCCTGAGGGGCTGCTGTACTTAGCGTCTAAGCAGTTCACAACTGAAGACTTTGAAAAGGTAAAGTTAGATAAAATGATTACTCAGAATGCCTACTCGTTTCTNNNNNNNNNNNNNNN\""},{"path":"https://tanaylab.github.io/prego/reference/motif_db_to_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a MotifDB object back to a tidy data frame — motif_db_to_dataframe","title":"Convert a MotifDB object back to a tidy data frame — motif_db_to_dataframe","text":"Convert MotifDB object back tidy data frame","code":""},{"path":"https://tanaylab.github.io/prego/reference/motif_db_to_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a MotifDB object back to a tidy data frame — motif_db_to_dataframe","text":"","code":"motif_db_to_dataframe(motif_db)"},{"path":"https://tanaylab.github.io/prego/reference/motif_db_to_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a MotifDB object back to a tidy data frame — motif_db_to_dataframe","text":"motif_db MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/motif_db_to_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a MotifDB object back to a tidy data frame — motif_db_to_dataframe","text":"tidy data frame columns motif, position, nucleotide probabilities","code":""},{"path":"https://tanaylab.github.io/prego/reference/motif_db_to_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a MotifDB object back to a tidy data frame — motif_db_to_dataframe","text":"","code":"head(motif_db_to_dataframe(MOTIF_DB)) #> # A tibble: 6 x 6 #>                          motif pos           A           C           G #> 1 HOCOMOCO.AHR_HUMAN.H11MO.0.B   1 0.266233766 0.116883117 0.363636364 #> 2 HOCOMOCO.AHR_HUMAN.H11MO.0.B   2 0.071428571 0.077922078 0.227272727 #> 3 HOCOMOCO.AHR_HUMAN.H11MO.0.B   3 0.142857143 0.285714286 0.136363636 #> 4 HOCOMOCO.AHR_HUMAN.H11MO.0.B   4 0.019480519 0.006493506 0.948051948 #> 5 HOCOMOCO.AHR_HUMAN.H11MO.0.B   5 0.006493506 0.974025974 0.006493506 #> 6 HOCOMOCO.AHR_HUMAN.H11MO.0.B   6 0.019480519 0.006493506 0.967532468 #>             T #> 1 0.253246753 #> 2 0.623376623 #> 3 0.435064935 #> 4 0.025974026 #> 5 0.012987013 #> 6 0.006493506"},{"path":"https://tanaylab.github.io/prego/reference/motif_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate motif enrichment — motif_enrichment","title":"Calculate motif enrichment — motif_enrichment","text":"Calculates motif enrichment groups loci (usually clusters).","code":""},{"path":"https://tanaylab.github.io/prego/reference/motif_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate motif enrichment — motif_enrichment","text":"","code":"motif_enrichment(pwm_q, groups, threshold = 0.99, type = \"relative\")"},{"path":"https://tanaylab.github.io/prego/reference/motif_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate motif enrichment — motif_enrichment","text":"pwm_q matrix representing quantile values position weight matrix (PWM). output gextract_pwm.quantile. groups character vector factor specifying groups sequence belongs. Usually clustering result. threshold threshold value considering position PWM significant. Default 0.99. type type enrichment calculation perform. Possible values \"relative\" (default) \"absolute\".","code":""},{"path":"https://tanaylab.github.io/prego/reference/motif_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate motif enrichment — motif_enrichment","text":"matrix representing motif enrichment values group. type = \"relative\", values relative enrichment motif group compared loci groups. type = \"absolute\", values enrichment motif compared random genome.","code":""},{"path":"https://tanaylab.github.io/prego/reference/motif_enrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate motif enrichment — motif_enrichment","text":"","code":"if (FALSE) { # \\dontrun{ library(misha) gdb.init_examples() annot <- misha.ext::gintervals.normalize(gintervals.load(\"annotations\"), 300) pwm_q <- gextract_pwm.quantile(     annot,     motifs = c(\"JASPAR.CDX1\", \"JASPAR.CDX2\"),     dist_from_edge = 100 ) pwm_q <- as.matrix(pwm_q[, c(\"JASPAR.CDX1.q\", \"JASPAR.CDX2.q\")]) groups <- c(\"Group1\", \"Group1\", \"Group2\", \"Group2\", \"Group2\", \"Group3\", \"Group3\", \"Group3\")  # The threshold of 0.1 is used for demonstration purposes only. # In practice, a threshold of 0.99 is recommended. motif_enrichment(pwm_q, groups, threshold = 0.1, type = \"relative\") motif_enrichment(pwm_q, groups, threshold = 0.1, type = \"absolute\") } # }"},{"path":"https://tanaylab.github.io/prego/reference/names-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of motifs in a MotifDB object — names,MotifDB-method","title":"Get the names of motifs in a MotifDB object — names,MotifDB-method","text":"Get names motifs MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/names-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of motifs in a MotifDB object — names,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' names(x)"},{"path":"https://tanaylab.github.io/prego/reference/names-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of motifs in a MotifDB object — names,MotifDB-method","text":"x MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/names-MotifDB-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of motifs in a MotifDB object — names,MotifDB-method","text":"names motifs object","code":""},{"path":"https://tanaylab.github.io/prego/reference/names-MotifDB-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of motifs in a MotifDB object — names,MotifDB-method","text":"","code":"names(MOTIF_DB) #>    [1] \"HOMER.AP_1\"                        \"HOMER.AP_2gamma\"                   #>    [3] \"HOMER.AP_2alpha\"                   \"HOMER.Ap4\"                         #>    [5] \"HOMER.FOXA1AR\"                     \"HOMER.ARE\"                         #>    [7] \"HOMER.AR_halfsite\"                 \"HOMER.ArntAhr\"                     #>    [9] \"HOMER.Ascl1\"                       \"HOMER.Atf1\"                        #>   [11] \"HOMER.Atf2\"                        \"HOMER.Atf3\"                        #>   [13] \"HOMER.Atf4\"                        \"HOMER.Atf7\"                        #>   [15] \"HOMER.Atoh1\"                       \"HOMER.Bach1\"                       #>   [17] \"HOMER.Bach2\"                       \"HOMER.BATF\"                        #>   [19] \"HOMER.Bcl6\"                        \"HOMER.bHLHE40\"                     #>   [21] \"HOMER.BMAL1\"                       \"HOMER.BMYB\"                        #>   [23] \"HOMER.BORIS\"                       \"HOMER.Brachyury\"                   #>   [25] \"HOMER.bZIPIRF\"                     \"HOMER.Cdx2\"                        #>   [27] \"HOMER.CEBPAP1\"                     \"HOMER.CEBPCEBP\"                    #>   [29] \"HOMER.CEBP\"                        \"HOMER.Chop\"                        #>   [31] \"HOMER.CHR\"                         \"HOMER.CLOCK\"                       #>   [33] \"HOMER.c_Myc\"                       \"HOMER.c_Myc_1\"                     #>   [35] \"HOMER.CRE\"                         \"HOMER.CRX\"                         #>   [37] \"HOMER.CTCF\"                        \"HOMER.CTCF_SatelliteElement\"       #>   [39] \"HOMER.Mouse_Recombination_Hotspot\" \"HOMER.E2A\"                         #>   [41] \"HOMER.E2F1\"                        \"HOMER.E2F4\"                        #>   [43] \"HOMER.E2F6\"                        \"HOMER.E2F7\"                        #>   [45] \"HOMER.E2F\"                         \"HOMER.E2A_1\"                       #>   [47] \"HOMER.EBF\"                         \"HOMER.EBF1\"                        #>   [49] \"HOMER.EBNA1\"                       \"HOMER.E_box\"                       #>   [51] \"HOMER.Egr1\"                        \"HOMER.Egr2\"                        #>   [53] \"HOMER.EHF\"                         \"HOMER.EKLF\"                        #>   [55] \"HOMER.ELF1\"                        \"HOMER.ELF5\"                        #>   [57] \"HOMER.Elk1\"                        \"HOMER.Elk4\"                        #>   [59] \"HOMER.Eomes\"                       \"HOMER.ERE\"                         #>   [61] \"HOMER.ERG\"                         \"HOMER.Erra\"                        #>   [63] \"HOMER.Esrrb\"                       \"HOMER.ETS1\"                        #>   [65] \"HOMER.Ets1_distal\"                 \"HOMER.ETSE_box\"                    #>   [67] \"HOMER.ETS\"                         \"HOMER.ETSRUNX\"                     #>   [69] \"HOMER.ETV1\"                        \"HOMER.EWSERG_fusion\"               #>   [71] \"HOMER.EWSFLI1_fusion\"              \"HOMER.Fli1\"                        #>   [73] \"HOMER.Fosl2\"                       \"HOMER.FOXA1\"                       #>   [75] \"HOMER.FOXA1_1\"                     \"HOMER.Foxa2\"                       #>   [77] \"HOMER.FoxEbox\"                     \"HOMER.Foxh1\"                       #>   [79] \"HOMER.Foxo1\"                       \"HOMER.FOXP1\"                       #>   [81] \"HOMER.Fra1\"                        \"HOMER.FXR\"                         #>   [83] \"HOMER.GABPA\"                       \"HOMER.Gata2\"                       #>   [85] \"HOMER.GATA3\"                       \"HOMER.GATA3_1\"                     #>   [87] \"HOMER.GATA\"                        \"HOMER.GATA_1\"                      #>   [89] \"HOMER.GATA3_2\"                     \"HOMER.Gata4\"                       #>   [91] \"HOMER.Gata1\"                       \"HOMER.GATASCL\"                     #>   [93] \"HOMER.Gfi1b\"                       \"HOMER.GFX\"                         #>   [95] \"HOMER.GFY\"                         \"HOMER.GFY_Staf\"                    #>   [97] \"HOMER.GLI3\"                        \"HOMER.GRE\"                         #>   [99] \"HOMER.GRE_1\"                       \"HOMER.GRHL2\"                       #>  [101] \"HOMER.GSC\"                         \"HOMER.Unknown_ESC_element\"         #>  [103] \"HOMER.HIF_1a\"                      \"HOMER.HIF_1b\"                      #>  [105] \"HOMER.HIF2a\"                       \"HOMER.Hnf1\"                        #>  [107] \"HOMER.HNF4a\"                       \"HOMER.HNF6\"                        #>  [109] \"HOMER.HOXA2\"                       \"HOMER.HOXA9\"                       #>  [111] \"HOMER.Hoxb4\"                       \"HOMER.Hoxc9\"                       #>  [113] \"HOMER.HOXD13\"                      \"HOMER.HRE\"                         #>  [115] \"HOMER.HRE_1\"                       \"HOMER.IRF1\"                        #>  [117] \"HOMER.IRF2\"                        \"HOMER.IRF4\"                        #>  [119] \"HOMER.Isl1\"                        \"HOMER.ISRE\"                        #>  [121] \"HOMER.Jun_AP1\"                     \"HOMER.c_Jun_CRE\"                   #>  [123] \"HOMER.JunD\"                        \"HOMER.Klf4\"                        #>  [125] \"HOMER.KLF5\"                        \"HOMER.Lhx2\"                        #>  [127] \"HOMER.Lhx3\"                        \"HOMER.Unknown\"                     #>  [129] \"HOMER.Nr5a2\"                       \"HOMER.LXRE\"                        #>  [131] \"HOMER.MafA\"                        \"HOMER.MafF\"                        #>  [133] \"HOMER.MafK\"                        \"HOMER.Max\"                         #>  [135] \"HOMER.Maz\"                         \"HOMER.Mef2a\"                       #>  [137] \"HOMER.Mef2c\"                       \"HOMER.Meis1\"                       #>  [139] \"HOMER.MITF\"                        \"HOMER.AMYB\"                        #>  [141] \"HOMER.MYB\"                         \"HOMER.Myf5\"                        #>  [143] \"HOMER.MyoD\"                        \"HOMER.MyoG\"                        #>  [145] \"HOMER.Nanog\"                       \"HOMER.NeuroD1\"                     #>  [147] \"HOMER.NF1FOXA1\"                    \"HOMER.NF1_halfsite\"                #>  [149] \"HOMER.NF1\"                         \"HOMER.NFATAP1\"                     #>  [151] \"HOMER.NFAT\"                        \"HOMER.NF_E2\"                       #>  [153] \"HOMER.NFkB_p65_Rel\"                \"HOMER.NFY\"                         #>  [155] \"HOMER.Nkx2_1\"                      \"HOMER.Nkx2_5\"                      #>  [157] \"HOMER.Nkx3_1\"                      \"HOMER.Nkx6_1\"                      #>  [159] \"HOMER.n_Myc\"                       \"HOMER.NPAS2\"                       #>  [161] \"HOMER.Nr5a2_1\"                     \"HOMER.NRF1\"                        #>  [163] \"HOMER.Nrf2\"                        \"HOMER.NRF\"                         #>  [165] \"HOMER.Nur77\"                       \"HOMER.Oct2\"                        #>  [167] \"HOMER.Oct4\"                        \"HOMER.Oct4Sox17\"                   #>  [169] \"HOMER.OCT4_SOX2_TCF_NANOG\"         \"HOMER.Olig2\"                       #>  [171] \"HOMER.Otx2\"                        \"HOMER.NFkB_p50_p52\"                #>  [173] \"HOMER.p53\"                         \"HOMER.p53_1\"                       #>  [175] \"HOMER.p53_2\"                       \"HOMER.p63\"                         #>  [177] \"HOMER.NFkB_p65\"                    \"HOMER.PAX3FKHR_fusion\"             #>  [179] \"HOMER.PAX5\"                        \"HOMER.PAX5_1\"                      #>  [181] \"HOMER.Pax7\"                        \"HOMER.Pax7_1\"                      #>  [183] \"HOMER.Pax7_2\"                      \"HOMER.Pax8\"                        #>  [185] \"HOMER.PBX1\"                        \"HOMER.Pbx3\"                        #>  [187] \"HOMER.Pdx1\"                        \"HOMER.Phox2a\"                      #>  [189] \"HOMER.Pit1_1bp\"                    \"HOMER.Pit1\"                        #>  [191] \"HOMER.Pitx1\"                       \"HOMER.PPARE\"                       #>  [193] \"HOMER.PRDM14\"                      \"HOMER.PRDM1\"                       #>  [195] \"HOMER.PRDM9\"                       \"HOMER.PR\"                          #>  [197] \"HOMER.Ptf1a\"                       \"HOMER.PU_1_IRF\"                    #>  [199] \"HOMER.PU_1\"                        \"HOMER.RARg\"                        #>  [201] \"HOMER.RBPJEbox\"                    \"HOMER.Rbpj1\"                       #>  [203] \"HOMER.REST_NRSF\"                   \"HOMER.Reverb\"                      #>  [205] \"HOMER.Rfx1\"                        \"HOMER.Rfx2\"                        #>  [207] \"HOMER.RFX\"                         \"HOMER.Rfx5\"                        #>  [209] \"HOMER.RORgt\"                       \"HOMER.RUNX\"                        #>  [211] \"HOMER.RUNX1\"                       \"HOMER.RUNX2\"                       #>  [213] \"HOMER.RUNX_AML\"                    \"HOMER.RXR\"                         #>  [215] \"HOMER.SCL\"                         \"HOMER.Six1\"                        #>  [217] \"HOMER.Smad2\"                       \"HOMER.Smad3\"                       #>  [219] \"HOMER.Smad4\"                       \"HOMER.Sox10\"                       #>  [221] \"HOMER.Sox2\"                        \"HOMER.Sox3\"                        #>  [223] \"HOMER.Sox4\"                        \"HOMER.Sox6\"                        #>  [225] \"HOMER.Sp1\"                         \"HOMER.SPDEF\"                       #>  [227] \"HOMER.SpiB\"                        \"HOMER.Srebp1a\"                     #>  [229] \"HOMER.Srebp2\"                      \"HOMER.CArG\"                        #>  [231] \"HOMER.ZNF143_STAF\"                 \"HOMER.STAT1\"                       #>  [233] \"HOMER.Stat3_il21\"                  \"HOMER.Stat3\"                       #>  [235] \"HOMER.STAT4\"                       \"HOMER.STAT5\"                       #>  [237] \"HOMER.STAT6\"                       \"HOMER.STAT6_1\"                     #>  [239] \"HOMER.T1ISRE\"                      \"HOMER.TATA_Box\"                    #>  [241] \"HOMER.Tbet\"                        \"HOMER.TboxSmad\"                    #>  [243] \"HOMER.Tbx20\"                       \"HOMER.Tbx5\"                        #>  [245] \"HOMER.Tcf12\"                       \"HOMER.Tcf3\"                        #>  [247] \"HOMER.Tcf4\"                        \"HOMER.TCFL2\"                       #>  [249] \"HOMER.Tcfcp2l1\"                    \"HOMER.TEAD2\"                       #>  [251] \"HOMER.TEAD4\"                       \"HOMER.TEAD\"                        #>  [253] \"HOMER.Tlx\"                         \"HOMER.TR4\"                         #>  [255] \"HOMER.THRa\"                        \"HOMER.USF1\"                        #>  [257] \"HOMER.Usf2\"                        \"HOMER.VDR\"                         #>  [259] \"HOMER.X_box\"                       \"HOMER.YY1\"                         #>  [261] \"HOMER.ZBTB33\"                      \"HOMER.ZFX\"                         #>  [263] \"HOMER.Znf263\"                      \"HOMER.ZNF711\"                      #>  [265] \"HOMER.AARE\"                        \"HOMER.SeqBias_C\"                   #>  [267] \"HOMER.SeqBias_G\"                   \"HOMER.SeqBias_A\"                   #>  [269] \"HOMER.caudal\"                      \"HOMER.DREF\"                        #>  [271] \"HOMER.E_box_1\"                     \"HOMER.Initiator\"                   #>  [273] \"HOMER.Unknown1\"                    \"HOMER.TATA_box\"                    #>  [275] \"HOMER.Unknown2\"                    \"HOMER.Unknown3\"                    #>  [277] \"HOMER.Unknown4\"                    \"HOMER.Unknown5\"                    #>  [279] \"HOMER.Unknown6\"                    \"HOMER.E_box_2\"                     #>  [281] \"HOMER.FHY3\"                        \"HOMER.GAGA_repeat\"                 #>  [283] \"HOMER.PCF\"                         \"HOMER.PIF5ox\"                      #>  [285] \"HOMER.SEP3\"                        \"HOMER.Unknown2_1\"                  #>  [287] \"HOMER.Unknown3_1\"                  \"HOMER.Unknown4_1\"                  #>  [289] \"HOMER.Unknown1_1\"                  \"HOMER.CES_1\"                       #>  [291] \"HOMER.DPL_1\"                       \"HOMER.EFL_1\"                       #>  [293] \"HOMER.EGL_5\"                       \"HOMER.ELT_3\"                       #>  [295] \"HOMER.GEI_11\"                      \"HOMER.HLH_1\"                       #>  [297] \"HOMER.LIN_15B\"                     \"HOMER.LIN_39\"                      #>  [299] \"HOMER.PHA_4\"                       \"HOMER.PQM_1\"                       #>  [301] \"HOMER.ABF1\"                        \"HOMER.Cbf1\"                        #>  [303] \"HOMER.GAGA_repeat_2\"               \"HOMER.Pho2\"                        #>  [305] \"HOMER.Pho4\"                        \"HOMER.REB1\"                        #>  [307] \"HOMER.RLR1\"                        \"HOMER.SFP1\"                        #>  [309] \"HOMER.SUT1\"                        \"HOMER.TATA_box_1\"                  #>  [311] \"HOMER.TOD6\"                        \"JASPAR.Arnt\"                       #>  [313] \"JASPAR.Ahr::Arnt\"                  \"JASPAR.br.MA0010.1\"                #>  [315] \"JASPAR.br.MA0011.1\"                \"JASPAR.br.MA0012.1\"                #>  [317] \"JASPAR.br.MA0013.1\"                \"JASPAR.Cf2\"                        #>  [319] \"JASPAR.usp\"                        \"JASPAR.Ddit3::Cebpa\"               #>  [321] \"JASPAR.Dof2\"                       \"JASPAR.Dof3\"                       #>  [323] \"JASPAR.dl.MA0022.1\"                \"JASPAR.dl.MA0023.1\"                #>  [325] \"JASPAR.Eip74EF\"                    \"JASPAR.Mecom\"                      #>  [327] \"JASPAR.FOXF2\"                      \"JASPAR.FOXD1\"                      #>  [329] \"JASPAR.Gam1\"                       \"JASPAR.Foxq1\"                      #>  [331] \"JASPAR.hb\"                         \"JASPAR.IRF2\"                       #>  [333] \"JASPAR.MNB1A\"                      \"JASPAR.myb.Ph3\"                    #>  [335] \"JASPAR.MAX::MYC\"                   \"JASPAR.PBF\"                        #>  [337] \"JASPAR.PPARG\"                      \"JASPAR.PAX6\"                       #>  [339] \"JASPAR.PBX1\"                       \"JASPAR.RORA.MA0071.1\"              #>  [341] \"JASPAR.RORA.MA0072.1\"              \"JASPAR.RREB1\"                      #>  [343] \"JASPAR.RXRA::VDR\"                  \"JASPAR.SOX9\"                       #>  [345] \"JASPAR.squamosa\"                   \"JASPAR.SRY\"                        #>  [347] \"JASPAR.Su(H)\"                      \"JASPAR.TAL1::TCF3\"                 #>  [349] \"JASPAR.Hand1::Tcf3\"                \"JASPAR.bZIP910\"                    #>  [351] \"JASPAR.bZIP911\"                    \"JASPAR.REL\"                        #>  [353] \"JASPAR.RELA\"                       \"JASPAR.TBP\"                        #>  [355] \"JASPAR.Spz1\"                       \"JASPAR.NR1H2::RXRA\"                #>  [357] \"JASPAR.Znf423\"                     \"JASPAR.Macho-1\"                    #>  [359] \"JASPAR.NFIC::TLX1\"                 \"JASPAR.ARR10\"                      #>  [361] \"JASPAR.abi4\"                       \"JASPAR.Nobox\"                      #>  [363] \"JASPAR.ovo\"                        \"JASPAR.PEND\"                       #>  [365] \"JASPAR.EmBP-1\"                     \"JASPAR.TGA1A\"                      #>  [367] \"JASPAR.ZNF354C\"                    \"JASPAR.Lhx3\"                       #>  [369] \"JASPAR.CTCF.MA0139.1\"              \"JASPAR.Pou5f1::Sox2\"               #>  [371] \"JASPAR.EWSR1-FLI1\"                 \"JASPAR.REST\"                       #>  [373] \"JASPAR.Runx1\"                      \"JASPAR.Pparg::Rxra\"                #>  [375] \"JASPAR.Arid3a\"                     \"JASPAR.INSM1\"                      #>  [377] \"JASPAR.RARA::RXRA\"                 \"JASPAR.PLAG1\"                      #>  [379] \"JASPAR.Nr2e3\"                      \"JASPAR.Abd-B\"                      #>  [381] \"JASPAR.Antp\"                       \"JASPAR.Awh\"                        #>  [383] \"JASPAR.B-H1\"                       \"JASPAR.B-H2\"                       #>  [385] \"JASPAR.C15\"                        \"JASPAR.CG11085\"                    #>  [387] \"JASPAR.CG11294\"                    \"JASPAR.CG11617\"                    #>  [389] \"JASPAR.Dbx\"                        \"JASPAR.lms\"                        #>  [391] \"JASPAR.CG15696-RA\"                 \"JASPAR.CG18599\"                    #>  [393] \"JASPAR.CG32105\"                    \"JASPAR.CG32532\"                    #>  [395] \"JASPAR.Vsx2\"                       \"JASPAR.Vsx1\"                       #>  [397] \"JASPAR.CG4328-RA\"                  \"JASPAR.HHEX\"                       #>  [399] \"JASPAR.CG9876\"                     \"JASPAR.Deaf1\"                      #>  [401] \"JASPAR.Dfd\"                        \"JASPAR.Dll\"                        #>  [403] \"JASPAR.Dr\"                         \"JASPAR.E5\"                         #>  [405] \"JASPAR.Gsc\"                        \"JASPAR.HGTX\"                       #>  [407] \"JASPAR.Hmx\"                        \"JASPAR.schlank\"                    #>  [409] \"JASPAR.Lim1\"                       \"JASPAR.Lim3\"                       #>  [411] \"JASPAR.NK7.1\"                      \"JASPAR.OdsH\"                       #>  [413] \"JASPAR.Optix\"                      \"JASPAR.Pph13\"                      #>  [415] \"JASPAR.Ptx1\"                       \"JASPAR.Rx\"                         #>  [417] \"JASPAR.Scr\"                        \"JASPAR.Six4.MA0204.1\"              #>  [419] \"JASPAR.abd-A\"                      \"JASPAR.achi\"                       #>  [421] \"JASPAR.al\"                         \"JASPAR.ap\"                         #>  [423] \"JASPAR.ara\"                        \"JASPAR.bap\"                        #>  [425] \"JASPAR.bcd\"                        \"JASPAR.brk\"                        #>  [427] \"JASPAR.bsh\"                        \"JASPAR.btn\"                        #>  [429] \"JASPAR.caup\"                       \"JASPAR.ct\"                         #>  [431] \"JASPAR.ems\"                        \"JASPAR.en\"                         #>  [433] \"JASPAR.eve\"                        \"JASPAR.exd\"                        #>  [435] \"JASPAR.exex\"                       \"JASPAR.ftz\"                        #>  [437] \"JASPAR.hbn\"                        \"JASPAR.hth\"                        #>  [439] \"JASPAR.ind\"                        \"JASPAR.inv\"                        #>  [441] \"JASPAR.lab\"                        \"JASPAR.lbe\"                        #>  [443] \"JASPAR.lbl\"                        \"JASPAR.mirr\"                       #>  [445] \"JASPAR.oc\"                         \"JASPAR.onecut\"                     #>  [447] \"JASPAR.otp\"                        \"JASPAR.pb\"                         #>  [449] \"JASPAR.prd\"                        \"JASPAR.repo\"                       #>  [451] \"JASPAR.ro\"                         \"JASPAR.Bgb::run\"                   #>  [453] \"JASPAR.sd\"                         \"JASPAR.slbo\"                       #>  [455] \"JASPAR.slou\"                       \"JASPAR.so\"                         #>  [457] \"JASPAR.tup\"                        \"JASPAR.unc-4\"                      #>  [459] \"JASPAR.unpg\"                       \"JASPAR.vis\"                        #>  [461] \"JASPAR.vnd\"                        \"JASPAR.vvl\"                        #>  [463] \"JASPAR.z\"                          \"JASPAR.zen\"                        #>  [465] \"JASPAR.zen2\"                       \"JASPAR.Ubx\"                        #>  [467] \"JASPAR.ARNT::HIF1A\"                \"JASPAR.che-1\"                      #>  [469] \"JASPAR.lin-14\"                     \"JASPAR.mab-3\"                      #>  [471] \"JASPAR.ceh-10::ttx-3\"              \"JASPAR.ceh-22\"                     #>  [473] \"JASPAR.ABF2.MA0266.1\"              \"JASPAR.ACE2\"                       #>  [475] \"JASPAR.ADR1\"                       \"JASPAR.AFT1\"                       #>  [477] \"JASPAR.AFT2\"                       \"JASPAR.ARG80\"                      #>  [479] \"JASPAR.ARG81\"                      \"JASPAR.ARO80\"                      #>  [481] \"JASPAR.ARR1.MA0274.1\"              \"JASPAR.ASG1\"                       #>  [483] \"JASPAR.ASH1\"                       \"JASPAR.AZF1\"                       #>  [485] \"JASPAR.BAS1\"                       \"JASPAR.CAT8\"                       #>  [487] \"JASPAR.CEP3\"                       \"JASPAR.CHA4\"                       #>  [489] \"JASPAR.CRZ1\"                       \"JASPAR.CST6\"                       #>  [491] \"JASPAR.CUP2\"                       \"JASPAR.CUP9\"                       #>  [493] \"JASPAR.DAL80\"                      \"JASPAR.DAL81\"                      #>  [495] \"JASPAR.DAL82\"                      \"JASPAR.ECM22\"                      #>  [497] \"JASPAR.ECM23\"                      \"JASPAR.EDS1\"                       #>  [499] \"JASPAR.FHL1\"                       \"JASPAR.FKH1\"                       #>  [501] \"JASPAR.FKH2\"                       \"JASPAR.GAL4\"                       #>  [503] \"JASPAR.GAT1\"                       \"JASPAR.GAT3\"                       #>  [505] \"JASPAR.GAT4\"                       \"JASPAR.GCR1\"                       #>  [507] \"JASPAR.GCR2\"                       \"JASPAR.GIS1\"                       #>  [509] \"JASPAR.GLN3\"                       \"JASPAR.GSM1\"                       #>  [511] \"JASPAR.GZF3\"                       \"JASPAR.HAC1\"                       #>  [513] \"JASPAR.HAL9\"                       \"JASPAR.HAP2\"                       #>  [515] \"JASPAR.HAP5\"                       \"JASPAR.HCM1\"                       #>  [517] \"JASPAR.HMRA2\"                      \"JASPAR.HSF1.MA0319.1\"              #>  [519] \"JASPAR.IME1\"                       \"JASPAR.INO2\"                       #>  [521] \"JASPAR.INO4\"                       \"JASPAR.IXR1\"                       #>  [523] \"JASPAR.LEU3\"                       \"JASPAR.LYS14\"                      #>  [525] \"JASPAR.MAC1\"                       \"JASPAR.HMRA1\"                      #>  [527] \"JASPAR.MBP1\"                       \"JASPAR.MBP1::SWI6\"                 #>  [529] \"JASPAR.MCM1\"                       \"JASPAR.MET28\"                      #>  [531] \"JASPAR.MET31\"                      \"JASPAR.MET32\"                      #>  [533] \"JASPAR.MET4\"                       \"JASPAR.MGA1\"                       #>  [535] \"JASPAR.MIG1\"                       \"JASPAR.MIG2\"                       #>  [537] \"JASPAR.MIG3\"                       \"JASPAR.MOT3\"                       #>  [539] \"JASPAR.MSN2\"                       \"JASPAR.MSN4\"                       #>  [541] \"JASPAR.NDT80\"                      \"JASPAR.NHP10\"                      #>  [543] \"JASPAR.OAF1\"                       \"JASPAR.OPI1\"                       #>  [545] \"JASPAR.TOD6\"                       \"JASPAR.DOT6\"                       #>  [547] \"JASPAR.PDR3\"                       \"JASPAR.PDR8\"                       #>  [549] \"JASPAR.PHD1\"                       \"JASPAR.PHO2\"                       #>  [551] \"JASPAR.PHO4\"                       \"JASPAR.PUT3\"                       #>  [553] \"JASPAR.RDR1\"                       \"JASPAR.RDS1\"                       #>  [555] \"JASPAR.RDS2\"                       \"JASPAR.REI1\"                       #>  [557] \"JASPAR.RFX1.MA0365.1\"              \"JASPAR.RGM1\"                       #>  [559] \"JASPAR.RGT1\"                       \"JASPAR.RIM101\"                     #>  [561] \"JASPAR.RLM1\"                       \"JASPAR.RME1\"                       #>  [563] \"JASPAR.ROX1\"                       \"JASPAR.RPH1\"                       #>  [565] \"JASPAR.RPN4\"                       \"JASPAR.RSC3\"                       #>  [567] \"JASPAR.RSC30\"                      \"JASPAR.RTG3\"                       #>  [569] \"JASPAR.SFL1\"                       \"JASPAR.SFP1\"                       #>  [571] \"JASPAR.MOT2\"                       \"JASPAR.SIP4\"                       #>  [573] \"JASPAR.SKN7\"                       \"JASPAR.SNT2\"                       #>  [575] \"JASPAR.SOK2\"                       \"JASPAR.SPT15\"                      #>  [577] \"JASPAR.SPT2\"                       \"JASPAR.SPT23\"                      #>  [579] \"JASPAR.SRD1\"                       \"JASPAR.STB3\"                       #>  [581] \"JASPAR.STB4\"                       \"JASPAR.STB5\"                       #>  [583] \"JASPAR.STE12\"                      \"JASPAR.STP1\"                       #>  [585] \"JASPAR.STP2\"                       \"JASPAR.STP3\"                       #>  [587] \"JASPAR.STP4\"                       \"JASPAR.SUM1\"                       #>  [589] \"JASPAR.SUT1\"                       \"JASPAR.SUT2\"                       #>  [591] \"JASPAR.SWI4\"                       \"JASPAR.SWI5\"                       #>  [593] \"JASPAR.TBS1\"                       \"JASPAR.TEA1\"                       #>  [595] \"JASPAR.TEC1\"                       \"JASPAR.THI2\"                       #>  [597] \"JASPAR.TOS8\"                       \"JASPAR.TYE7\"                       #>  [599] \"JASPAR.UGA3\"                       \"JASPAR.UPC2\"                       #>  [601] \"JASPAR.USV1\"                       \"JASPAR.XBP1.MA0414.1\"              #>  [603] \"JASPAR.YAP1\"                       \"JASPAR.YAP3\"                       #>  [605] \"JASPAR.YAP5\"                       \"JASPAR.YAP6\"                       #>  [607] \"JASPAR.YAP7\"                       \"JASPAR.ERT1\"                       #>  [609] \"JASPAR.NSI1\"                       \"JASPAR.URC2\"                       #>  [611] \"JASPAR.YER130C\"                    \"JASPAR.YER184C\"                    #>  [613] \"JASPAR.YGR067C\"                    \"JASPAR.YHP1\"                       #>  [615] \"JASPAR.YKL222C\"                    \"JASPAR.YLL054C\"                    #>  [617] \"JASPAR.YLR278C\"                    \"JASPAR.TDA9\"                       #>  [619] \"JASPAR.YNR063W\"                    \"JASPAR.YOX1\"                       #>  [621] \"JASPAR.YPR013C\"                    \"JASPAR.YPR015C\"                    #>  [623] \"JASPAR.YPR022C\"                    \"JASPAR.YPR196W\"                    #>  [625] \"JASPAR.YRM1\"                       \"JASPAR.YRR1\"                       #>  [627] \"JASPAR.ZAP1\"                       \"JASPAR.ZMS1\"                       #>  [629] \"JASPAR.btd\"                        \"JASPAR.CG34031\"                    #>  [631] \"JASPAR.D\"                          \"JASPAR.fkh\"                        #>  [633] \"JASPAR.gt\"                         \"JASPAR.H2.0\"                       #>  [635] \"JASPAR.h\"                          \"JASPAR.hkb\"                        #>  [637] \"JASPAR.kni\"                        \"JASPAR.nub\"                        #>  [639] \"JASPAR.odd\"                        \"JASPAR.opa\"                        #>  [641] \"JASPAR.PHDP\"                       \"JASPAR.slp1\"                       #>  [643] \"JASPAR.tll\"                        \"JASPAR.ttk\"                        #>  [645] \"JASPAR.Tfcp2l1\"                    \"JASPAR.Zfx\"                        #>  [647] \"JASPAR.DUX4\"                       \"JASPAR.FOS.MA0476.1\"               #>  [649] \"JASPAR.FOSL2\"                      \"JASPAR.FOXH1\"                      #>  [651] \"JASPAR.Gfi1B\"                      \"JASPAR.JUN\"                        #>  [653] \"JASPAR.JUND.MA0492.1\"              \"JASPAR.Nr1h3::Rxra\"                #>  [655] \"JASPAR.MEF2C\"                      \"JASPAR.MAF::NFE2\"                  #>  [657] \"JASPAR.NR2C2.MA0504.1\"             \"JASPAR.Sox6\"                       #>  [659] \"JASPAR.STAT1::STAT2\"               \"JASPAR.Stat4\"                      #>  [661] \"JASPAR.Stat5a::Stat5b\"             \"JASPAR.Stat6\"                      #>  [663] \"JASPAR.TCF7L2\"                     \"JASPAR.ZBTB33\"                     #>  [665] \"JASPAR.ELK4\"                       \"JASPAR.ESR2\"                       #>  [667] \"JASPAR.Nfe2l2\"                     \"JASPAR.STAT1\"                      #>  [669] \"JASPAR.STAT3\"                      \"JASPAR.GATA1::TAL1\"                #>  [671] \"JASPAR.cad\"                        \"JASPAR.cnc::maf-S\"                 #>  [673] \"JASPAR.CTCF.MA0531.1\"              \"JASPAR.Kr\"                         #>  [675] \"JASPAR.Stat92E\"                    \"JASPAR.su(Hw)\"                     #>  [677] \"JASPAR.EcR::usp\"                   \"JASPAR.pan\"                        #>  [679] \"JASPAR.Mad\"                        \"JASPAR.pnr\"                        #>  [681] \"JASPAR.tin\"                        \"JASPAR.blmp-1\"                     #>  [683] \"JASPAR.daf-12\"                     \"JASPAR.dpy-27\"                     #>  [685] \"JASPAR.efl-1\"                      \"JASPAR.elt-3\"                      #>  [687] \"JASPAR.eor-1\"                      \"JASPAR.snpc-4\"                     #>  [689] \"JASPAR.hlh-1\"                      \"JASPAR.pha-4\"                      #>  [691] \"JASPAR.sknach1::Mafk\"                #>  [731] \"JASPAR.FOXP2\"                      \"JASPAR.SREBF1.MA0595.1\"            #>  [733] \"JASPAR.SREBF2.MA0596.1\"            \"JASPAR.KLF5\"                       #>  [735] \"JASPAR.Arid3b\"                     \"JASPAR.Arid5a\"                     #>  [737] \"JASPAR.Arntl\"                      \"JASPAR.Atf1\"                       #>  [739] \"JASPAR.Creb3l2\"                    \"JASPAR.DMRT3\"                      #>  [741] \"JASPAR.FOXG1\"                      \"JASPAR.Foxj2\"                      #>  [743] \"JASPAR.Gmeb1\"                      \"JASPAR.LBX1\"                       #>  [745] \"JASPAR.LIN54\"                      \"JASPAR.mix-a\"                      #>  [747] \"JASPAR.Mlxip\"                      \"JASPAR.Npas2\"                      #>  [749] \"JASPAR.POU6F1.MA0628.1\"            \"JASPAR.Rhox11\"                     #>  [751] \"JASPAR.SHOX\"                       \"JASPAR.Six3\"                       #>  [753] \"JASPAR.ALX3\"                       \"JASPAR.Ar\"                         #>  [755] \"JASPAR.BARHL2\"                     \"JASPAR.BHLHE41\"                    #>  [757] \"JASPAR.CREB3\"                      \"JASPAR.DBP\"                        #>  [759] \"JASPAR.ELF4\"                       \"JASPAR.EN1\"                        #>  [761] \"JASPAR.Esrrg\"                      \"JASPAR.ETV6\"                       #>  [763] \"JASPAR.FLI1\"                       \"JASPAR.FOXI1\"                      #>  [765] \"JASPAR.FOXL1\"                      \"JASPAR.GCM1\"                       #>  [767] \"JASPAR.GRHL1\"                      \"JASPAR.GSC\"                        #>  [769] \"JASPAR.HEY2\"                       \"JASPAR.HINFP\"                      #>  [771] \"JASPAR.HNF1A\"                      \"JASPAR.HNF1B\"                      #>  [773] \"JASPAR.HSF1.MA0486.2\"              \"JASPAR.IRF8\"                       #>  [775] \"JASPAR.IRF9\"                       \"JASPAR.ISX\"                        #>  [777] \"JASPAR.JDP2.MA0655.1\"              \"JASPAR.JDP2.MA0656.1\"              #>  [779] \"JASPAR.KLF13\"                      \"JASPAR.LHX6\"                       #>  [781] \"JASPAR.MEF2B\"                      \"JASPAR.MEOX1\"                      #>  [783] \"JASPAR.MIXL1\"                      \"JASPAR.MLX\"                        #>  [785] \"JASPAR.MLXIPL\"                     \"JASPAR.MSC\"                        #>  [787] \"JASPAR.MYF6\"                       \"JASPAR.NEUROG2.MA0669.1\"           #>  [789] \"JASPAR.NFIA\"                       \"JASPAR.NFIX.MA0671.1\"              #>  [791] \"JASPAR.NHLH1\"                      \"JASPAR.NKX2-3\"                     #>  [793] \"JASPAR.NKX2-8\"                     \"JASPAR.NKX6-1\"                     #>  [795] \"JASPAR.NKX6-2\"                     \"JASPAR.Nr2e1\"                      #>  [797] \"JASPAR.Nr2f6\"                      \"JASPAR.OLIG2\"                      #>  [799] \"JASPAR.PAX4\"                       \"JASPAR.POU4F2\"                     #>  [801] \"JASPAR.Rxra\"                       \"JASPAR.SPDEF\"                      #>  [803] \"JASPAR.SPIC\"                       \"JASPAR.SRF\"                        #>  [805] \"JASPAR.TBXT\"                       \"JASPAR.TBX2\"                       #>  [807] \"JASPAR.TBX20\"                      \"JASPAR.TFAP4.MA0691.1\"             #>  [809] \"JASPAR.TFEB\"                       \"JASPAR.ZBTB7B\"                     #>  [811] \"JASPAR.ZBTB7C\"                     \"JASPAR.ZIC1\"                       #>  [813] \"JASPAR.ZBTB18\"                     \"JASPAR.LBX2\"                       #>  [815] \"JASPAR.Lhx4\"                       \"JASPAR.Lhx8\"                       #>  [817] \"JASPAR.MEOX2\"                      \"JASPAR.Msx3\"                       #>  [819] \"JASPAR.NOTO\"                       \"JASPAR.Nkx3-1\"                     #>  [821] \"JASPAR.OTX1\"                       \"JASPAR.PDX1\"                       #>  [823] \"JASPAR.PHOX2A\"                     \"JASPAR.PITX3\"                      #>  [825] \"JASPAR.PROP1\"                      \"JASPAR.PRRX1\"                      #>  [827] \"JASPAR.RAX2\"                       \"JASPAR.RAX\"                        #>  [829] \"JASPAR.RHOXF1\"                     \"JASPAR.Shox2\"                      #>  [831] \"JASPAR.UNCX\"                       \"JASPAR.VAX1\"                       #>  [833] \"JASPAR.VENTX\"                      \"JASPAR.VSX1\"                       #>  [835] \"JASPAR.VSX2\"                       \"JASPAR.ESR1\"                       #>  [837] \"JASPAR.ESRRB\"                      \"JASPAR.NR2F1.MA0017.2\"             #>  [839] \"JASPAR.NR3C1\"                      \"JASPAR.NR3C2\"                      #>  [841] \"JASPAR.Nr2F6\"                      \"JASPAR.RARA.MA0729.1\"              #>  [843] \"JASPAR.RARA.MA0730.1\"              \"JASPAR.BCL6B\"                      #>  [845] \"JASPAR.EGR2\"                       \"JASPAR.EGR3\"                       #>  [847] \"JASPAR.EGR4\"                       \"JASPAR.GLIS1\"                      #>  [849] \"JASPAR.GLIS2\"                      \"JASPAR.GLIS3\"                      #>  [851] \"JASPAR.HIC2\"                       \"JASPAR.Hic1\"                       #>  [853] \"JASPAR.KLF16\"                      \"JASPAR.SP8\"                        #>  [855] \"JASPAR.ZBED1\"                      \"JASPAR.ZIC4\"                       #>  [857] \"JASPAR.ZNF143\"                     \"JASPAR.ZNF410\"                     #>  [859] \"JASPAR.CUX2\"                       \"JASPAR.ONECUT3\"                    #>  [861] \"JASPAR.E2F7\"                       \"JASPAR.ERF\"                        #>  [863] \"JASPAR.ETS1\"                       \"JASPAR.ETV2\"                       #>  [865] \"JASPAR.ETV3\"                       \"JASPAR.GCM2\"                       #>  [867] \"JASPAR.HSF2\"                       \"JASPAR.HSF4\"                       #>  [869] \"JASPAR.IRF7\"                       \"JASPAR.MEF2D\"                      #>  [871] \"JASPAR.MEIS1.MA0498.2\"             \"JASPAR.MEIS2.MA0774.1\"             #>  [873] \"JASPAR.MEIS3\"                      \"JASPAR.MYBL1\"                      #>  [875] \"JASPAR.MYBL2\"                      \"JASPAR.NFKB1\"                      #>  [877] \"JASPAR.NFKB2\"                      \"JASPAR.PAX1\"                       #>  [879] \"JASPAR.PAX3.MA0780.1\"              \"JASPAR.PAX9\"                       #>  [881] \"JASPAR.PKNOX2\"                     \"JASPAR.POU2F1\"                     #>  [883] \"JASPAR.POU3F1\"                     \"JASPAR.POU3F2\"                     #>  [885] \"JASPAR.POU3F3\"                     \"JASPAR.POU3F4\"                     #>  [887] \"JASPAR.POU4F1\"                     \"JASPAR.POU4F3\"                     #>  [889] \"JASPAR.POU5F1B\"                    \"JASPAR.POU6F2\"                     #>  [891] \"JASPAR.PROX1\"                      \"JASPAR.RFX2\"                       #>  [893] \"JASPAR.SMAD3\"                      \"JASPAR.TGIF1\"                      #>  [895] \"JASPAR.TGIF2\"                      \"JASPAR.RFX5\"                       #>  [897] \"JASPAR.RUNX2\"                      \"JASPAR.EOMES\"                      #>  [899] \"JASPAR.MGA\"                        \"JASPAR.TBR1\"                       #>  [901] \"JASPAR.TBX15\"                      \"JASPAR.TBX19\"                      #>  [903] \"JASPAR.TBX1\"                       \"JASPAR.TBX4\"                       #>  [905] \"JASPAR.TBX5\"                       \"JASPAR.TEAD3\"                      #>  [907] \"JASPAR.TFAP2A.MA0810.1\"            \"JASPAR.TFAP2B.MA0811.1\"            #>  [909] \"JASPAR.TFAP2B.MA0812.1\"            \"JASPAR.TFAP2B.MA0813.1\"            #>  [911] \"JASPAR.TFAP2C.MA0524.2\"            \"JASPAR.TFAP2C.MA0815.1\"            #>  [913] \"JASPAR.Ascl2\"                      \"JASPAR.Atoh1.MA0461.2\"             #>  [915] \"JASPAR.BHLHE40\"                    \"JASPAR.BHLHE23\"                    #>  [917] \"JASPAR.FIGLA\"                      \"JASPAR.HES7\"                       #>  [919] \"JASPAR.HEY1\"                       \"JASPAR.MAX\"                        #>  [921] \"JASPAR.MNT\"                        \"JASPAR.OLIG1\"                      #>  [923] \"JASPAR.OLIG3\"                      \"JASPAR.Tcf21\"                      #>  [925] \"JASPAR.ATF7\"                       \"JASPAR.CEBPG.MA0838.1\"             #>  [927] \"JASPAR.CREB3L1\"                    \"JASPAR.Creb5\"                      #>  [929] \"JASPAR.Mafb\"                       \"JASPAR.NFE2\"                       #>  [931] \"JASPAR.TEF\"                        \"JASPAR.XBP1.MA0844.1\"              #>  [933] \"JASPAR.FOXB1\"                      \"JASPAR.FOXC1\"                      #>  [935] \"JASPAR.FOXC2\"                      \"JASPAR.FOXO4\"                      #>  [937] \"JASPAR.FOXO6\"                      \"JASPAR.FOXP3\"                      #>  [939] \"JASPAR.Foxj3\"                      \"JASPAR.Alx4\"                       #>  [941] \"JASPAR.Alx1\"                       \"JASPAR.RXRB.MA0855.1\"              #>  [943] \"JASPAR.RXRG.MA0856.1\"              \"JASPAR.Rarb.MA0857.1\"              #>  [945] \"JASPAR.Rarb.MA0858.1\"              \"JASPAR.Rarg.MA0859.1\"              #>  [947] \"JASPAR.Rarg.MA0860.1\"              \"JASPAR.TP63\"                       #>  [949] \"JASPAR.TP53\"                       \"JASPAR.TP73\"                       #>  [951] \"JASPAR.GMEB2\"                      \"JASPAR.MTF1\"                       #>  [953] \"JASPAR.E2F1\"                       \"JASPAR.SOX21\"                      #>  [955] \"JASPAR.Sox1\"                       \"JASPAR.TFAP2A.MA0872.1\"            #>  [957] \"JASPAR.ELK1\"                       \"JASPAR.HOXD12\"                     #>  [959] \"JASPAR.Arx\"                        \"JASPAR.BARX1\"                      #>  [961] \"JASPAR.BSX\"                        \"JASPAR.Dlx3\"                       #>  [963] \"JASPAR.Dlx4\"                       \"JASPAR.DLX6\"                       #>  [965] \"JASPAR.Dmbx1\"                      \"JASPAR.EMX2\"                       #>  [967] \"JASPAR.EVX1\"                       \"JASPAR.EVX2\"                       #>  [969] \"JASPAR.GBX1\"                       \"JASPAR.GBX2\"                       #>  [971] \"JASPAR.GSC2\"                       \"JASPAR.GSX1\"                       #>  [973] \"JASPAR.HESX1\"                      \"JASPAR.HMBOX1\"                     #>  [975] \"JASPAR.Hmx1\"                       \"JASPAR.Hmx2\"                       #>  [977] \"JASPAR.Hmx3\"                       \"JASPAR.HOXA10\"                     #>  [979] \"JASPAR.HOXB3\"                      \"JASPAR.HOXC10\"                     #>  [981] \"JASPAR.HOXC12\"                     \"JASPAR.HOXC13\"                     #>  [983] \"JASPAR.HOXD11\"                     \"JASPAR.Hoxa11\"                     #>  [985] \"JASPAR.ISL2\"                       \"JASPAR.dve\"                        #>  [987] \"JASPAR.Ets21C\"                     \"JASPAR.gcm2\"                       #>  [989] \"JASPAR.unc-62\"                     \"JASPAR.dsc-1\"                      #>  [991] \"JASPAR.fkh-2\"                      \"JASPAR.ceh-48\"                     #>  [993] \"JASPAR.ces-2\"                      \"JASPAR.lim-4\"                      #>  [995] \"JASPAR.pal-1\"                      \"JASPAR.sma-4\"                      #>  [997] \"JASPAR.unc-86\"                     \"JASPAR.vab-7\"                      #>  [999] \"JASPAR.zfh-2\"                      \"JASPAR.MATALPHA2\"                  #> [1001] \"JASPAR.NCU00019\"                   \"JASPAR.ABI5\"                       #> [1003] \"JASPAR.AHL12\"                      \"JASPAR.AHL20\"                      #> [1005] \"JASPAR.AHL25\"                      \"JASPAR.NAC025\"                     #> [1007] \"JASPAR.NAC046\"                     \"JASPAR.NAC055\"                     #> [1009] \"JASPAR.NAC079\"                     \"JASPAR.AP1\"                        #> [1011] \"JASPAR.ABF2.MA0941.1\"              \"JASPAR.ARF1\"                       #> [1013] \"JASPAR.ARF5\"                       \"JASPAR.ARF8\"                       #> [1015] \"JASPAR.ARR1.MA0945.1\"              \"JASPAR.ARR11\"                      #> [1017] \"JASPAR.ARR14\"                      \"JASPAR.ARR18\"                      #> [1019] \"JASPAR.ARR2\"                       \"JASPAR.ATHB-12\"                    #> [1021] \"JASPAR.ATHB-16\"                    \"JASPAR.ATHB-51\"                    #> [1023] \"JASPAR.ATHB-6\"                     \"JASPAR.POPTR_0002s00440glyma19g26560.1\"            #> [1071] \"JASPAR.GT-1\"                       \"JASPAR.PHYPADRAFT_48267\"           #> [1073] \"JASPAR.PHYPADRAFT_38837\"           \"JASPAR.PHYPADRAFT_28324\"           #> [1075] \"JASPAR.HAT1\"                       \"JASPAR.HBI1\"                       #> [1077] \"JASPAR.KAN1\"                       \"JASPAR.KAN4\"                       #> [1079] \"JASPAR.P0510F09.23\"                \"JASPAR.OJ1581_H09.2\"               #> [1081] \"JASPAR.DREB1G\"                     \"JASPAR.OJ1058_F05.8\"               #> [1083] \"JASPAR.Os05g0497200\"               \"JASPAR.TCP4\"                       #> [1085] \"JASPAR.MYB111\"                     \"JASPAR.MYB24\"                      #> [1087] \"JASPAR.MYB3\"                       \"JASPAR.MYB4\"                       #> [1089] \"JASPAR.MYB46\"                      \"JASPAR.MYB55\"                      #> [1091] \"JASPAR.MYB59\"                      \"JASPAR.NAC083\"                     #> [1093] \"JASPAR.NAC92\"                      \"JASPAR.NAC043\"                     #> [1095] \"JASPAR.NTL9\"                       \"JASPAR.ERF018\"                     #> [1097] \"JASPAR.ERF094\"                     \"JASPAR.OsI_08196\"                  #> [1099] \"JASPAR.RAP2-3\"                     \"JASPAR.ERF109\"                     #> [1101] \"JASPAR.ARALYDRAFT_897773\"          \"JASPAR.SPL11\"                      #> [1103] \"JASPAR.SPL12\"                      \"JASPAR.SPL4\"                       #> [1105] \"JASPAR.SPL7\"                       \"JASPAR.SPT\"                        #> [1107] \"JASPAR.TCP19\"                      \"JASPAR.TCP2\"                       #> [1109] \"JASPAR.TCP23\"                      \"JASPAR.TCP5\"                       #> [1111] \"JASPAR.DOF5.3\"                     \"JASPAR.UNE10\"                      #> [1113] \"JASPAR.WRKY12\"                     \"JASPAR.WRKY18\"                     #> [1115] \"JASPAR.WRKY2\"                      \"JASPAR.WRKY23\"                     #> [1117] \"JASPAR.WRKY38\"                     \"JASPAR.WRKY43\"                     #> [1119] \"JASPAR.WRKY48\"                     \"JASPAR.WRKY57\"                     #> [1121] \"JASPAR.WRKY60\"                     \"JASPAR.WRKY62\"                     #> [1123] \"JASPAR.WRKY63\"                     \"JASPAR.WRKY75\"                     #> [1125] \"JASPAR.ARALYDRAFT_495258\"          \"JASPAR.ARALYDRAFT_496250\"          #> [1127] \"JASPAR.ARALYDRAFT_493022\"          \"JASPAR.ARALYDRAFT_484486\"          #> [1129] \"JASPAR.FOXK1\"                      \"JASPAR.GATA2\"                      #> [1131] \"JASPAR.HIF1A\"                      \"JASPAR.MYC\"                        #> [1133] \"JASPAR.MYB\"                        \"JASPAR.MYCN\"                       #> [1135] \"JASPAR.NEUROD1\"                    \"JASPAR.NFIC.MA0161.2\"              #> [1137] \"JASPAR.NFYA\"                       \"JASPAR.NR2F2\"                      #> [1139] \"JASPAR.PAX5\"                       \"JASPAR.PBX3\"                       #> [1141] \"JASPAR.POU5F1\"                     \"JASPAR.RBPJ\"                       #> [1143] \"JASPAR.RELB\"                       \"JASPAR.SIX1\"                       #> [1145] \"JASPAR.SIX2\"                       \"JASPAR.SOX10\"                      #> [1147] \"JASPAR.SOX13\"                      \"JASPAR.TEAD2\"                      #> [1149] \"JASPAR.TFDP1\"                      \"JASPAR.ZBTB7A\"                     #> [1151] \"JASPAR.ZEB1\"                       \"JASPAR.ZNF24\"                      #> [1153] \"JASPAR.ZNF384\"                     \"JASPAR.ZNF282\"                     #> [1155] \"JASPAR.ZSCAN4\"                     \"JASPAR.sna\"                        #> [1157] \"JASPAR.FOS::JUN.MA0099.3\"          \"JASPAR.FOS::JUN.MA1126.1\"          #> [1159] \"JASPAR.FOSB::JUN\"                  \"JASPAR.FOSL1::JUN.MA1128.1\"        #> [1161] \"JASPAR.FOSL1::JUN.MA1129.1\"        \"JASPAR.FOSL2::JUN.MA1130.1\"        #> [1163] \"JASPAR.FOSL2::JUN.MA1131.1\"        \"JASPAR.JUN::JUNB.MA1132.1\"         #> [1165] \"JASPAR.JUN::JUNB.MA1133.1\"         \"JASPAR.FOS::JUNB\"                  #> [1167] \"JASPAR.FOSB::JUNB.MA1135.1\"        \"JASPAR.FOSB::JUNB.MA1136.1\"        #> [1169] \"JASPAR.FOSL1::JUNB\"                \"JASPAR.FOSL2::JUNB.MA1138.1\"       #> [1171] \"JASPAR.FOSL2::JUNB.MA1139.1\"       \"JASPAR.FOS::JUND\"                  #> [1173] \"JASPAR.FOSL1::JUND.MA1142.1\"       \"JASPAR.FOSL1::JUND.MA1143.1\"       #> [1175] \"JASPAR.FOSL2::JUND.MA1144.1\"       \"JASPAR.FOSL2::JUND.MA1145.1\"       #> [1177] \"JASPAR.NR1H4::RXRA\"                \"JASPAR.NR4A2::RXRA\"                #> [1179] \"JASPAR.PPARA::RXRA\"                \"JASPAR.RARA::RXRG\"                 #> [1181] \"JASPAR.RORB\"                       \"JASPAR.RORC\"                       #> [1183] \"JASPAR.SOX15\"                      \"JASPAR.Smad4\"                      #> [1185] \"JASPAR.JKD\"                        \"JASPAR.NUC\"                        #> [1187] \"JASPAR.MGP\"                        \"JASPAR.SGR5\"                       #> [1189] \"JASPAR.IDD6\"                       \"JASPAR.TSO1\"                       #> [1191] \"JASPAR.TCX2\"                       \"JASPAR.HHO5\"                       #> [1193] \"JASPAR.PHL12\"                      \"JASPAR.EFM\"                        #> [1195] \"JASPAR.MYR2\"                       \"JASPAR.MYB105\"                     #> [1197] \"JASPAR.MYB118\"                     \"JASPAR.MYB52\"                      #> [1199] \"JASPAR.MYB3R5\"                     \"JASPAR.MYB101\"                     #> [1201] \"JASPAR.MYB56\"                      \"JASPAR.MYB81\"                      #> [1203] \"JASPAR.MYB119\"                     \"JASPAR.MYB65\"                      #> [1205] \"JASPAR.MYB1\"                       \"JASPAR.MYB3R4\"                     #> [1207] \"JASPAR.MYB113\"                     \"JASPAR.RVE8\"                       #> [1209] \"JASPAR.RVE6\"                       \"JASPAR.RVE1\"                       #> [1211] \"JASPAR.LHY\"                        \"JASPAR.YAB4\"                       #> [1213] \"JASPAR.RVE4\"                       \"JASPAR.At3g11280\"                  #> [1215] \"JASPAR.AT5G61620\"                  \"JASPAR.RVE5\"                       #> [1217] \"JASPAR.RVE7L\"                      \"JASPAR.DIV1\"                       #> [1219] \"JASPAR.AT2G38090\"                  \"JASPAR.AT3G10580\"                  #> [1221] \"JASPAR.AT5G56840\"                  \"JASPAR.AT5G05790\"                  #> [1223] \"JASPAR.CAMTA1\"                     \"JASPAR.HAT2\"                       #> [1225] \"JASPAR.AGL16\"                      \"JASPAR.AGL42\"                      #> [1227] \"JASPAR.AGL55\"                      \"JASPAR.AGL63\"                      #> [1229] \"JASPAR.AGL13\"                      \"JASPAR.AGL6\"                       #> [1231] \"JASPAR.ARF2\"                       \"JASPAR.GT-3a\"                      #> [1233] \"JASPAR.GT-2\"                       \"JASPAR.ATHB-20\"                    #> [1235] \"JASPAR.ATHB-X\"                     \"JASPAR.ATHB-13\"                    #> [1237] \"JASPAR.ATHB-40\"                    \"JASPAR.ATHB-53\"                    #> [1239] \"JASPAR.DREB1D\"                     \"JASPAR.TINY\"                       #> [1241] \"JASPAR.RAP2-6\"                     \"JASPAR.ERF014\"                     #> [1243] \"JASPAR.ERF035\"                     \"JASPAR.ERF5\"                       #> [1245] \"JASPAR.DREB2G\"                     \"JASPAR.ERF091\"                     #> [1247] \"JASPAR.ERF034\"                     \"JASPAR.ERF037\"                     #> [1249] \"JASPAR.ERF054\"                     \"JASPAR.ERF017\"                     #> [1251] \"JASPAR.AIL7\"                       \"JASPAR.ERF003\"                     #> [1253] \"JASPAR.ERF104\"                     \"JASPAR.ERF10\"                      #> [1255] \"JASPAR.ERF043\"                     \"JASPAR.DREB2F\"                     #> [1257] \"JASPAR.DREB2E\"                     \"JASPAR.ABR1\"                       #> [1259] \"JASPAR.LEP\"                        \"JASPAR.ERF087\"                     #> [1261] \"JASPAR.ERF012\"                     \"JASPAR.DREB2D\"                     #> [1263] \"JASPAR.RAP2-9\"                     \"JASPAR.ERF086\"                     #> [1265] \"JASPAR.ERF036\"                     \"JASPAR.RAP2-12\"                    #> [1267] \"JASPAR.ERF9\"                       \"JASPAR.DREB2A\"                     #> [1269] \"JASPAR.ERF023.MA1259.1\"            \"JASPAR.ERF013\"                     #> [1271] \"JASPAR.ERF122\"                     \"JASPAR.ERF2\"                       #> [1273] \"JASPAR.ERF055\"                     \"JASPAR.ERF095\"                     #> [1275] \"JASPAR.RAP2-11\"                    \"JASPAR.DOF5.8\"                     #> [1277] \"JASPAR.CDF5\"                       \"JASPAR.DOF4.5\"                     #> [1279] \"JASPAR.DOF3.2\"                     \"JASPAR.DOF4.2\"                     #> [1281] \"JASPAR.DOF3.6\"                     \"JASPAR.DOF1.6\"                     #> [1283] \"JASPAR.DOF3.5\"                     \"JASPAR.DOF1.7\"                     #> [1285] \"JASPAR.DOF3.4\"                     \"JASPAR.DOF1.5\"                     #> [1287] \"JASPAR.DOF5.4\"                     \"JASPAR.DOF5.1\"                     #> [1289] \"JASPAR.TCP13\"                      \"JASPAR.TCP14\"                      #> [1291] \"JASPAR.TCP1\"                       \"JASPAR.TCP9\"                       #> [1293] \"JASPAR.TCP24\"                      \"JASPAR.TCP21\"                      #> [1295] \"JASPAR.TCP22\"                      \"JASPAR.TCP3\"                       #> [1297] \"JASPAR.TCP17\"                      \"JASPAR.TCP7\"                       #> [1299] \"JASPAR.MYB27\"                      \"JASPAR.MYB57\"                      #> [1301] \"JASPAR.MYB62\"                      \"JASPAR.WRKY20\"                     #> [1303] \"JASPAR.WRKY46\"                     \"JASPAR.WRKY26\"                     #> [1305] \"JASPAR.WRKY29\"                     \"JASPAR.WRKY17\"                     #> [1307] \"JASPAR.WRKY6\"                      \"JASPAR.WRKY33\"                     #> [1309] \"JASPAR.WRKY65\"                     \"JASPAR.WRKY22\"                     #> [1311] \"JASPAR.WRKY59\"                     \"JASPAR.WRKY55\"                     #> [1313] \"JASPAR.WRKY11\"                     \"JASPAR.WRKY70\"                     #> [1315] \"JASPAR.WRKY3\"                      \"JASPAR.WRKY42\"                     #> [1317] \"JASPAR.WRKY47\"                     \"JASPAR.WRKY7\"                      #> [1319] \"JASPAR.WRKY14\"                     \"JASPAR.WRKY24\"                     #> [1321] \"JASPAR.WRKY71\"                     \"JASPAR.WRKY50\"                     #> [1323] \"JASPAR.WRKY27\"                     \"JASPAR.SPL15\"                      #> [1325] \"JASPAR.SPL13A\"                     \"JASPAR.GATA19\"                     #> [1327] \"JASPAR.GATA20\"                     \"JASPAR.GATA14\"                     #> [1329] \"JASPAR.ZHD5\"                       \"JASPAR.ZHD9\"                       #> [1331] \"JASPAR.ZHD6\"                       \"JASPAR.BEH4\"                       #> [1333] \"JASPAR.BEH2\"                       \"JASPAR.BEH3\"                       #> [1335] \"JASPAR.BZIP11\"                     \"JASPAR.TGA4\"                       #> [1337] \"JASPAR.TGA3\"                       \"JASPAR.BZIP44\"                     #> [1339] \"JASPAR.BZIP43\"                     \"JASPAR.BZIP3\"                      #> [1341] \"JASPAR.BZIP53\"                     \"JASPAR.BZIP52\"                     #> [1343] \"JASPAR.BZIP28\"                     \"JASPAR.BZIP48\"                     #> [1345] \"JASPAR.TGA10\"                      \"JASPAR.BZIP68\"                     #> [1347] \"JASPAR.TGA9\"                       \"JASPAR.BZIP16\"                     #> [1349] \"JASPAR.BZIP42\"                     \"JASPAR.TRP1\"                       #> [1351] \"JASPAR.AT1G72740\"                  \"JASPAR.AT4G12670\"                  #> [1353] \"JASPAR.TRB2\"                       \"JASPAR.TRP2\"                       #> [1355] \"JASPAR.bHLH80\"                     \"JASPAR.bHLH130\"                    #> [1357] \"JASPAR.bHLH18\"                     \"JASPAR.bHLH77\"                     #> [1359] \"JASPAR.LRL2\"                       \"JASPAR.BHLH72\"                     #> [1361] \"JASPAR.DF1\"                        \"JASPAR.AT1G76870\"                  #> [1363] \"JASPAR.HDG1\"                       \"JASPAR.IDD5\"                       #> [1365] \"JASPAR.IDD4\"                       \"JASPAR.ZAT10\"                      #> [1367] \"JASPAR.GAF1\"                       \"JASPAR.IDD7\"                       #> [1369] \"JASPAR.ANL2\"                       \"JASPAR.DEAR3\"                      #> [1371] \"JASPAR.PLT1\"                       \"JASPAR.AIL6\"                       #> [1373] \"JASPAR.SOL1\"                       \"JASPAR.TCX6\"                       #> [1375] \"JASPAR.AT3G46070\"                  \"JASPAR.FAR1\"                       #> [1377] \"JASPAR.KAN2\"                       \"JASPAR.PHL7\"                       #> [1379] \"JASPAR.AT2G40260\"                  \"JASPAR.HRS1\"                       #> [1381] \"JASPAR.PHL2\"                       \"JASPAR.PHL1\"                       #> [1383] \"JASPAR.GATA6.MA1396.1\"             \"JASPAR.AT1G74840\"                  #> [1385] \"JASPAR.AT1G19000\"                  \"JASPAR.RVE7\"                       #> [1387] \"JASPAR.BPC6\"                       \"JASPAR.BPC5\"                       #> [1389] \"JASPAR.BPC1\"                       \"JASPAR.ATHB-7\"                     #> [1391] \"JASPAR.ERF105\"                     \"JASPAR.SPL14\"                      #> [1393] \"JASPAR.ATHB-15\"                    \"JASPAR.AGL15\"                      #> [1395] \"JASPAR.BZR1\"                       \"JASPAR.SPL5\"                       #> [1397] \"JASPAR.SIZF2\"                      \"JASPAR.ATHB-4\"                     #> [1399] \"JASPAR.bZIP14\"                     \"JASPAR.FaEOBII\"                    #> [1401] \"JASPAR.OsRR22\"                     \"JASPAR.StBRC1\"                     #> [1403] \"JASPAR.TSAR1\"                      \"JASPAR.TSAR2\"                      #> [1405] \"JASPAR.E2FA\"                       \"JASPAR.REF6\"                       #> [1407] \"JASPAR.WRKY40\"                     \"JASPAR.RAMOSA1\"                    #> [1409] \"JASPAR.O2\"                         \"JASPAR.IRF3\"                       #> [1411] \"JASPAR.IRF4\"                       \"JASPAR.IRF5\"                       #> [1413] \"JASPAR.TCF7L1\"                     \"JASPAR.ERF019\"                     #> [1415] \"JASPAR.HYH\"                        \"JASPAR.MYB124\"                     #> [1417] \"JASPAR.TCP8\"                       \"JASPAR.TB1\"                        #> [1419] \"JASPAR.rst2\"                       \"JASPAR.cre-1\"                      #> [1421] \"JASPAR.msn-1\"                      \"JASPAR.NCU02182\"                   #> [1423] \"JASPAR.nit-4\"                      \"JASPAR.nuc-1\"                      #> [1425] \"JASPAR.wc-1\"                       \"JASPAR.atf-7\"                      #> [1427] \"JASPAR.elt-6\"                      \"JASPAR.fkh-9\"                      #> [1429] \"JASPAR.lim-7\"                      \"JASPAR.mab-5\"                      #> [1431] \"JASPAR.unc-30\"                     \"JASPAR.cebp-1\"                     #> [1433] \"JASPAR.ceh-28\"                     \"JASPAR.daf-16\"                     #> [1435] \"JASPAR.fos-1\"                      \"JASPAR.hlh-30\"                     #> [1437] \"JASPAR.lin-54\"                     \"JASPAR.nhr-6\"                      #> [1439] \"JASPAR.dmrt99B\"                    \"JASPAR.Dref\"                       #> [1441] \"JASPAR.grh\"                        \"JASPAR.Hsf\"                        #> [1443] \"JASPAR.M1BP\"                       \"JASPAR.pho\"                        #> [1445] \"JASPAR.sv\"                         \"JASPAR.vfl\"                        #> [1447] \"JASPAR.ARGFX\"                      \"JASPAR.ARNT2\"                      #> [1449] \"JASPAR.ATF6\"                       \"JASPAR.ATOH7\"                      #> [1451] \"JASPAR.BACH2.MA1101.2\"             \"JASPAR.BACH2.MA1470.1\"             #> [1453] \"JASPAR.BARX2\"                      \"JASPAR.CDX4\"                       #> [1455] \"JASPAR.CREB3L4.MA1474.1\"           \"JASPAR.CREB3L4.MA1475.1\"           #> [1457] \"JASPAR.DMRTA2\"                     \"JASPAR.DMRTC2\"                     #> [1459] \"JASPAR.DPRX\"                       \"JASPAR.DRGX\"                       #> [1461] \"JASPAR.ETS2\"                       \"JASPAR.FERD3L\"                     #> [1463] \"JASPAR.FOXN3\"                      \"JASPAR.HES6\"                       #> [1465] \"JASPAR.HNF4A.MA1494.1\"             \"JASPAR.HOXA1\"                      #> [1467] \"JASPAR.HOXA4\"                      \"JASPAR.HOXA6\"                      #> [1469] \"JASPAR.HOXB4\"                      \"JASPAR.HOXB6\"                      #> [1471] \"JASPAR.HOXB7\"                      \"JASPAR.HOXB8\"                      #> [1473] \"JASPAR.HOXB9\"                      \"JASPAR.HOXC4\"                      #> [1475] \"JASPAR.HOXC8\"                      \"JASPAR.HOXD10\"                     #> [1477] \"JASPAR.HOXD4\"                      \"JASPAR.IKZF1\"                      #> [1479] \"JASPAR.IRF6\"                       \"JASPAR.KLF11\"                      #> [1481] \"JASPAR.KLF15\"                      \"JASPAR.KLF17\"                      #> [1483] \"JASPAR.KLF2\"                       \"JASPAR.KLF3\"                       #> [1485] \"JASPAR.KLF6\"                       \"JASPAR.LHX5\"                       #> [1487] \"JASPAR.MAF\"                        \"JASPAR.MAFA\"                       #> [1489] \"JASPAR.MAZ\"                        \"JASPAR.MSANTD3\"                    #> [1491] \"JASPAR.NFIC.MA1527.1\"              \"JASPAR.NFIX.MA1528.1\"              #> [1493] \"JASPAR.NHLH2\"                      \"JASPAR.NKX6-3\"                     #> [1495] \"JASPAR.NR1D1\"                      \"JASPAR.NR1I2\"                      #> [1497] \"JASPAR.NR1I3\"                      \"JASPAR.NR2C1\"                      #> [1499] \"JASPAR.NR2C2.MA1536.1\"             \"JASPAR.NR2F1.MA1537.1\"             #> [1501] \"JASPAR.NR2F1.MA1538.1\"             \"JASPAR.NR2F6\"                      #> [1503] \"JASPAR.NR6A1\"                      \"JASPAR.OSR1\"                       #> [1505] \"JASPAR.OVOL1\"                      \"JASPAR.OVOL2\"                      #> [1507] \"JASPAR.PAX3.MA1546.1\"              \"JASPAR.PLAGL2\"                     #> [1509] \"JASPAR.POU6F1.MA1549.1\"            \"JASPAR.PPARD\"                      #> [1511] \"JASPAR.RARB\"                       \"JASPAR.RARG\"                       #> [1513] \"JASPAR.RFX7\"                       \"JASPAR.RXRB.MA1555.1\"              #> [1515] \"JASPAR.RXRG.MA1556.1\"              \"JASPAR.SMAD5\"                      #> [1517] \"JASPAR.SNAI1\"                      \"JASPAR.SNAI3\"                      #> [1519] \"JASPAR.SOHLH2\"                     \"JASPAR.SOX12\"                      #> [1521] \"JASPAR.SOX14\"                      \"JASPAR.SP9\"                        #> [1523] \"JASPAR.TBX18\"                      \"JASPAR.TCF21\"                      #> [1525] \"JASPAR.TFAP2E\"                     \"JASPAR.TFAP4.MA1570.1\"             #> [1527] \"JASPAR.TGIF2LX\"                    \"JASPAR.TGIF2LY\"                    #> [1529] \"JASPAR.THRB.MA1574.1\"              \"JASPAR.THRB.MA1575.1\"              #> [1531] \"JASPAR.THRB.MA1576.1\"              \"JASPAR.TLX2\"                       #> [1533] \"JASPAR.VEZF1\"                      \"JASPAR.ZBTB26\"                     #> [1535] \"JASPAR.ZBTB32\"                     \"JASPAR.ZBTB6\"                      #> [1537] \"JASPAR.ZFP57\"                      \"JASPAR.ZIC5\"                       #> [1539] \"JASPAR.ZKSCAN1\"                    \"JASPAR.ZNF135\"                     #> [1541] \"JASPAR.ZNF136\"                     \"JASPAR.ZNF140\"                     #> [1543] \"JASPAR.ZNF274\"                     \"JASPAR.ZNF317\"                     #> [1545] \"JASPAR.ZNF382\"                     \"JASPAR.ZNF460\"                     #> [1547] \"JASPAR.ZNF528\"                     \"JASPAR.ZNF682\"                     #> [1549] \"JASPAR.ZNF684\"                     \"JASPAR.ZSCAN29\"                    #> [1551] \"JASPAR.Dmrt1\"                      \"JASPAR.Ebf2\"                       #> [1553] \"JASPAR.Foxf1\"                      \"JASPAR.Foxl2\"                      #> [1555] \"JASPAR.Isl1\"                       \"JASPAR.Plagl1\"                     #> [1557] \"JASPAR.Prdm15\"                     \"JASPAR.Ptf1a\"                      #> [1559] \"JASPAR.Ptf1A.MA1619.1\"             \"JASPAR.Ptf1A.MA1620.1\"             #> [1561] \"JASPAR.Rbpjl\"                      \"JASPAR.Stat2\"                      #> [1563] \"JASPAR.Stat5a\"                     \"JASPAR.Stat5b\"                     #> [1565] \"JASPAR.Wt1\"                        \"JASPAR.Zic1::Zic2\"                 #> [1567] \"JASPAR.Zic2\"                       \"JASPAR.ABF1.MA0570.2\"              #> [1569] \"JASPAR.BEAF-32\"                    \"JASPAR.Trl\"                        #> [1571] \"JASPAR.twi\"                        \"JASPAR.ASCL1.MA1100.2\"             #> [1573] \"JASPAR.ATF3\"                       \"JASPAR.BATF::JUN\"                  #> [1575] \"JASPAR.BCL6\"                       \"JASPAR.E2F2\"                       #> [1577] \"JASPAR.E2F3\"                       \"JASPAR.E2F4\"                       #> [1579] \"JASPAR.EMX1\"                       \"JASPAR.GATA5\"                      #> [1581] \"JASPAR.GFI1\"                       \"JASPAR.GSX2\"                       #> [1583] \"JASPAR.HES1\"                       \"JASPAR.HES2\"                       #> [1585] \"JASPAR.HOXA2\"                      \"JASPAR.HOXA5\"                      #> [1587] \"JASPAR.HOXA9\"                      \"JASPAR.HOXB2\"                      #> [1589] \"JASPAR.HOXB5\"                      \"JASPAR.HOXC9\"                      #> [1591] \"JASPAR.HOXD3\"                      \"JASPAR.HOXD8\"                      #> [1593] \"JASPAR.HOXD9\"                      \"JASPAR.JUNB.MA1140.2\"              #> [1595] \"JASPAR.LHX9\"                       \"JASPAR.LMX1A\"                      #> [1597] \"JASPAR.LMX1B\"                      \"JASPAR.NEUROG1\"                    #> [1599] \"JASPAR.NRL\"                        \"JASPAR.PITX1\"                      #> [1601] \"JASPAR.PRRX2\"                      \"JASPAR.SOX4\"                       #> [1603] \"JASPAR.SOX8\"                       \"JASPAR.SP3\"                        #> [1605] \"JASPAR.TCFL5\"                      \"JASPAR.TFEC\"                       #> [1607] \"JASPAR.ZNF740\"                     \"JASPAR.Nkx3-2\"                     #> [1609] \"JASPAR.AT1G14600\"                  \"JASPAR.DMRTA1\"                     #> [1611] \"JASPAR.ETV7\"                       \"JASPAR.ZIM3\"                       #> [1613] \"JASPAR.ZNF257\"                     \"JASPAR.ZNF343\"                     #> [1615] \"JASPAR.ZNF454\"                     \"JASPAR.ZNF610\"                     #> [1617] \"JASPAR.ZNF675\"                     \"JASPAR.ZNF707\"                     #> [1619] \"JASPAR.ZNF76\"                      \"JASPAR.ZNF784\"                     #> [1621] \"JASPAR.ZNF8\"                       \"JASPAR.ZNF816\"                     #> [1623] \"JASPAR.ZNF85\"                      \"JASPAR.ZNF93\"                      #> [1625] \"JASPAR.ZSCAN31\"                    \"JASPAR.PRDM9\"                      #> [1627] \"JASPAR.Rfx6\"                       \"JASPAR.ASCL1.MA1631.1\"             #> [1629] \"JASPAR.ATF2\"                       \"JASPAR.BATF\"                       #> [1631] \"JASPAR.BHLHE22.MA1635.1\"           \"JASPAR.CEBPG.MA1636.1\"             #> [1633] \"JASPAR.EBF3\"                       \"JASPAR.HAND2\"                      #> [1635] \"JASPAR.MEIS1.MA1639.1\"             \"JASPAR.MEIS2.MA1640.1\"             #> [1637] \"JASPAR.MYF5\"                       \"JASPAR.NEUROG2.MA1642.1\"           #> [1639] \"JASPAR.NFIB\"                       \"JASPAR.NFYC\"                       #> [1641] \"JASPAR.NKX2-2\"                     \"JASPAR.OSR2\"                       #> [1643] \"JASPAR.TCF12\"                      \"JASPAR.ZBTB12\"                     #> [1645] \"JASPAR.ZBTB14\"                     \"JASPAR.ZFP42\"                      #> [1647] \"JASPAR.ZKSCAN5\"                    \"JASPAR.ZNF148\"                     #> [1649] \"JASPAR.ZNF16\"                      \"JASPAR.ZNF341\"                     #> [1651] \"JASPAR.ZNF449\"                     \"JASPAR.ZNF652\"                     #> [1653] \"JASPAR.ABF4\"                       \"JASPAR.NAC013\"                     #> [1655] \"JASPAR.GTL1\"                       \"JASPAR.AT3G10030\"                  #> [1657] \"JASPAR.DREB1B\"                     \"JASPAR.DREB1C\"                     #> [1659] \"JASPAR.ERF118\"                     \"JASPAR.GBF2\"                       #> [1661] \"JASPAR.LBD18\"                      \"JASPAR.NAC029\"                     #> [1663] \"JASPAR.NAC078\"                     \"JASPAR.RAP2-1\"                     #> [1665] \"JASPAR.SRM1\"                       \"JASPAR.TCX3\"                       #> [1667] \"JASPAR.FOXA3\"                      \"JASPAR.ZNF189\"                     #> [1669] \"JASPAR.ZNF331\"                     \"JASPAR.ZNF417\"                     #> [1671] \"JASPAR.ZNF549\"                     \"JASPAR.ZNF680\"                     #> [1673] \"JASPAR.ZNF708\"                     \"JASPAR.ZNF768\"                     #> [1675] \"JASPAR.NAC016\"                     \"JASPAR.NAC020\"                     #> [1677] \"JASPAR.E2FD\"                       \"JASPAR.MYB107\"                     #> [1679] \"JASPAR.MYB99\"                      \"JASPAR.NAC010\"                     #> [1681] \"JASPAR.SMB\"                        \"JASPAR.ATF4\"                       #> [1683] \"JASPAR.BATF3\"                      \"JASPAR.CDX2\"                       #> [1685] \"JASPAR.CEBPA\"                      \"JASPAR.CEBPD\"                      #> [1687] \"JASPAR.CREB1\"                      \"JASPAR.CTCFL\"                      #> [1689] \"JASPAR.E2F6\"                       \"JASPAR.EBF1\"                       #> [1691] \"JASPAR.EGR1\"                       \"JASPAR.EHF\"                        #> [1693] \"JASPAR.ELF1\"                       \"JASPAR.ELF3\"                       #> [1695] \"JASPAR.ESRRA\"                      \"JASPAR.ETV1\"                       #> [1697] \"JASPAR.FOSL1\"                      \"JASPAR.FOXA1\"                      #> [1699] \"JASPAR.FOXA2\"                      \"JASPAR.FOXK2\"                      #> [1701] \"JASPAR.FOXP1\"                      \"JASPAR.GABPA\"                      #> [1703] \"JASPAR.GATA1\"                      \"JASPAR.GATA4.MA0482.2\"             #> [1705] \"JASPAR.GATA6.MA1104.2\"             \"JASPAR.GRHL2\"                      #> [1707] \"JASPAR.HLF\"                        \"JASPAR.HNF4A.MA0114.4\"             #> [1709] \"JASPAR.HNF4G\"                      \"JASPAR.HOXB13\"                     #> [1711] \"JASPAR.JUNB.MA0490.2\"              \"JASPAR.JUND.MA0491.2\"              #> [1713] \"JASPAR.KLF4\"                       \"JASPAR.KLF9\"                       #> [1715] \"JASPAR.LHX2\"                       \"JASPAR.MAFF\"                       #> [1717] \"JASPAR.MAFK\"                       \"JASPAR.MEF2A\"                      #> [1719] \"JASPAR.MITF\"                       \"JASPAR.MXI1\"                       #> [1721] \"JASPAR.MYOD1\"                      \"JASPAR.MYOG\"                       #> [1723] \"JASPAR.MZF1\"                       \"JASPAR.MAFG::NFE2L1\"               #> [1725] \"JASPAR.NFIL3\"                      \"JASPAR.NFYB\"                       #> [1727] \"JASPAR.NKX2-5\"                     \"JASPAR.NR4A1\"                      #> [1729] \"JASPAR.ONECUT1\"                    \"JASPAR.OTX2\"                       #> [1731] \"JASPAR.PBX2\"                       \"JASPAR.PHOX2B\"                     #> [1733] \"JASPAR.PKNOX1\"                     \"JASPAR.POU2F3\"                     #> [1735] \"JASPAR.PRDM1\"                      \"JASPAR.RUNX3\"                      #> [1737] \"JASPAR.SCRT1\"                      \"JASPAR.SCRT2\"                      #> [1739] \"JASPAR.SNAI2\"                      \"JASPAR.SOX2\"                       #> [1741] \"JASPAR.SPIB\"                       \"JASPAR.SREBF1.MA0829.2\"            #> [1743] \"JASPAR.TCF3\"                       \"JASPAR.TCF4\"                       #> [1745] \"JASPAR.TCF7\"                       \"JASPAR.TEAD1\"                      #> [1747] \"JASPAR.TEAD4\"                      \"JASPAR.TFAP2A.MA0003.4\"            #> [1749] \"JASPAR.TFAP2C.MA0814.2\"            \"JASPAR.TWIST1\"                     #> [1751] \"JASPAR.USF1\"                       \"JASPAR.YY2\"                        #> [1753] \"JASPAR.ZNF263\"                     \"JASPAR.ERF112\"                     #> [1755] \"JASPAR.AT5G47660\"                  \"JASPAR.ATHB-23\"                    #> [1757] \"JASPAR.ATHB-5\"                     \"JASPAR.MYB70\"                      #> [1759] \"JASPAR.CDF3\"                       \"JASPAR.CRF4\"                       #> [1761] \"JASPAR.ERF015\"                     \"JASPAR.ERF021\"                     #> [1763] \"JASPAR.ERF027\"                     \"JASPAR.ERF038\"                     #> [1765] \"JASPAR.ERF039\"                     \"JASPAR.ERF3\"                       #> [1767] \"JASPAR.ERF4\"                       \"JASPAR.FUS3\"                       #> [1769] \"JASPAR.GT-4\"                       \"JASPAR.KUA1\"                       #> [1771] \"JASPAR.MYB33\"                      \"JASPAR.MYB73\"                      #> [1773] \"JASPAR.RAP2-10\"                    \"JASPAR.TCP15\"                      #> [1775] \"JASPAR.TCP20\"                      \"JASPAR.TGA5\"                       #> [1777] \"JASPAR.WRKY15\"                     \"JASPAR.WRKY28\"                     #> [1779] \"JASPAR.ZHD1\"                       \"JASPAR.CREM\"                       #> [1781] \"JASPAR.Foxn1\"                      \"JASPAR.ARF10\"                      #> [1783] \"JASPAR.ARF13\"                      \"JASPAR.ARF14\"                      #> [1785] \"JASPAR.ARF16\"                      \"JASPAR.ARF18\"                      #> [1787] \"JASPAR.ARF25\"                      \"JASPAR.ARF27\"                      #> [1789] \"JASPAR.ARF29\"                      \"JASPAR.ARF34\"                      #> [1791] \"JASPAR.ARF35\"                      \"JASPAR.ARF36\"                      #> [1793] \"JASPAR.ARF39\"                      \"JASPAR.ARF4\"                       #> [1795] \"JASPAR.ARF7\"                       \"JASPAR.ceh-38\"                     #> [1797] \"JASPAR.Clamp\"                      \"JASPAR.elt-2\"                      #> [1799] \"JASPAR.Pdp1\"                       \"JASPAR.pqm-1\"                      #> [1801] \"JASPAR.zip-8\"                      \"JASPAR.ASR3\"                       #> [1803] \"JASPAR.AT1G19040\"                  \"JASPAR.AT2G38300\"                  #> [1805] \"JASPAR.AT5G04390\"                  \"JASPAR.AT5G05090\"                  #> [1807] \"JASPAR.ATMYB31\"                    \"JASPAR.BHLH122\"                    #> [1809] \"JASPAR.BHLH49\"                     \"JASPAR.BRN2\"                       #> [1811] \"JASPAR.BZIP18\"                     \"JASPAR.BZIP2\"                      #> [1813] \"JASPAR.BZIP30\"                     \"JASPAR.BZIP63\"                     #> [1815] \"JASPAR.BZIP69\"                     \"JASPAR.DOF4.3\"                     #> [1817] \"JASPAR.DREB1F\"                     \"JASPAR.E2FC\"                       #> [1819] \"JASPAR.E2FE\"                       \"JASPAR.EIL3\"                       #> [1821] \"JASPAR.ERF025\"                     \"JASPAR.ERF057\"                     #> [1823] \"JASPAR.ERF073\"                     \"JASPAR.GATA4.MA1755.1\"             #> [1825] \"JASPAR.GRF9\"                       \"JASPAR.HDG7\"                       #> [1827] \"JASPAR.HSFA1E\"                     \"JASPAR.HSFA4A\"                     #> [1829] \"JASPAR.HSFA6A\"                     \"JASPAR.HSFB3\"                      #> [1831] \"JASPAR.MYB10\"                      \"JASPAR.MYB116\"                     #> [1833] \"JASPAR.MYB121\"                     \"JASPAR.MYB17\"                      #> [1835] \"JASPAR.MYB23\"                      \"JASPAR.MYB30\"                      #> [1837] \"JASPAR.MYB39\"                      \"JASPAR.MYB40\"                      #> [1839] \"JASPAR.MYB41\"                      \"JASPAR.MYB43\"                      #> [1841] \"JASPAR.MYB51\"                      \"JASPAR.MYB60\"                      #> [1843] \"JASPAR.MYB61\"                      \"JASPAR.MYB67\"                      #> [1845] \"JASPAR.MYB74\"                      \"JASPAR.MYB80\"                      #> [1847] \"JASPAR.MYB83\"                      \"JASPAR.MYB92\"                      #> [1849] \"JASPAR.MYB94\"                      \"JASPAR.NAC005\"                     #> [1851] \"JASPAR.NAC011\"                     \"JASPAR.NAC018\"                     #> [1853] \"JASPAR.NAC019\"                     \"JASPAR.NAC047\"                     #> [1855] \"JASPAR.NAC054\"                     \"JASPAR.NAC071\"                     #> [1857] \"JASPAR.NAC073\"                     \"JASPAR.NAC087\"                     #> [1859] \"JASPAR.NAC098\"                     \"JASPAR.NID1\"                       #> [1861] \"JASPAR.NLP7\"                       \"JASPAR.RAP2-4\"                     #> [1863] \"JASPAR.RAP2-7\"                     \"JASPAR.RAV2\"                       #> [1865] \"JASPAR.SPL10\"                      \"JASPAR.TEM1\"                       #> [1867] \"JASPAR.TREE1\"                      \"JASPAR.TRP5\"                       #> [1869] \"JASPAR.VIP1\"                       \"JASPAR.WIN1\"                       #> [1871] \"JASPAR.WRKY53\"                     \"JASPAR.ZHD10\"                      #> [1873] \"JASPAR.GLYMA-06G314400\"            \"JASPAR.GLYMA-07G038400\"            #> [1875] \"JASPAR.GLYMA-08G357600\"            \"JASPAR.GLYMA-13G317000\"            #> [1877] \"JASPAR.ASR1\"                       \"JASPAR.EIL4\"                       #> [1879] \"JASPAR.RIN\"                        \"JASPAR.GRF4\"                       #> [1881] \"JASPAR.O11\"                        \"JASPAR.Zm00001d020267\"             #> [1883] \"JASPAR.Zm00001d052229\"             \"JASPAR.Zm00001d005892\"             #> [1885] \"JASPAR.Zm00001d024324\"             \"JASPAR.Zm00001d020595\"             #> [1887] \"JASPAR.Zm00001d018571\"             \"JASPAR.Zm00001d027846\"             #> [1889] \"JASPAR.Zm00001d005692\"             \"JASPAR.Zm00001d044409\"             #> [1891] \"JASPAR.bHLH145\"                    \"JASPAR.Zm00001d044785\"             #> [1893] \"JASPAR.Zm00001d038683\"             \"JASPAR.Zm00001d035604\"             #> [1895] \"JASPAR.Zm00001d015407\"             \"JASPAR.Zm00001d031796\"             #> [1897] \"JASPAR.Zm00001d002364\"             \"JASPAR.Zm00001d049364\"             #> [1899] \"JASPAR.Zm00001d034298\"             \"JASPAR.TFLG2-Zm00001d042777\"       #> [1901] \"JASPAR.dsx\"                        \"JASPAR.Elba1\"                      #> [1903] \"JASPAR.Elba2\"                      \"JASPAR.GATAd\"                      #> [1905] \"JASPAR.gcm\"                        \"JASPAR.kn\"                         #> [1907] \"JASPAR.msl-1\"                      \"JASPAR.AP4\"                        #> [1909] \"JASPAR.Atbf\"                       \"JASPAR.Atoh7\"                      #> [1911] \"JASPAR.Brachyury\"                  \"JASPAR.Bsx\"                        #> [1913] \"JASPAR.Cebpg\"                      \"JASPAR.Creb1\"                      #> [1915] \"JASPAR.Dlx-b\"                      \"JASPAR.Dlx-c\"                      #> [1917] \"JASPAR.Emx\"                        \"JASPAR.Erf-a\"                      #> [1919] \"JASPAR.Etv1/4/5\"                   \"JASPAR.Fli-Erg-a\"                  #> [1921] \"JASPAR.Fli-Erg-b\"                  \"JASPAR.Fli-Erg-c\"                  #> [1923] \"JASPAR.Fos-b\"                      \"JASPAR.FoxA-a\"                     #> [1925] \"JASPAR.FoxA-b\"                     \"JASPAR.FoxB\"                       #> [1927] \"JASPAR.FoxD-b\"                     \"JASPAR.FoxE\"                       #> [1929] \"JASPAR.FoxF\"                       \"JASPAR.FoxG\"                       #> [1931] \"JASPAR.FoxI-a\"                     \"JASPAR.FoxI-b\"                     #> [1933] \"JASPAR.FoxI-c\"                     \"JASPAR.FoxK\"                       #> [1935] \"JASPAR.FoxL2\"                      \"JASPAR.FoxM\"                       #> [1937] \"JASPAR.FoxO\"                       \"JASPAR.FoxQ\"                       #> [1939] \"JASPAR.GATA-a\"                     \"JASPAR.GATA1/2/3\"                  #> [1941] \"JASPAR.Gsx\"                        \"JASPAR.Hes-b\"                      #> [1943] \"JASPAR.Hes-c\"                      \"JASPAR.Hex\"                        #> [1945] \"JASPAR.Hey\"                        \"JASPAR.Hmbox1\"                     #> [1947] \"JASPAR.Hnf1\"                       \"JASPAR.Hox1\"                       #> [1949] \"JASPAR.Hox3\"                       \"JASPAR.Hox4\"                       #> [1951] \"JASPAR.Hox5\"                       \"JASPAR.Hsf1-2-4\"                   #> [1953] \"JASPAR.Irf-b\"                      \"JASPAR.Isx\"                        #> [1955] \"JASPAR.Klf15\"                      \"JASPAR.Klf3/8/12\"                  #> [1957] \"JASPAR.Klf5-like\"                  \"JASPAR.Klf6-7-like\"                #> [1959] \"JASPAR.large-Maf\"                  \"JASPAR.Lhx3/4\"                     #> [1961] \"JASPAR.Lmx-b\"                      \"JASPAR.Max\"                        #> [1963] \"JASPAR.Meox\"                       \"JASPAR.Mitf\"                       #> [1965] \"JASPAR.Mnx\"                        \"JASPAR.Msx\"                        #> [1967] \"JASPAR.NFkb\"                       \"JASPAR.Nk-1\"                       #> [1969] \"JASPAR.Nk-3\"                       \"JASPAR.Nkx3\"                       #> [1971] \"JASPAR.Noto\"                       \"JASPAR.Otp\"                        #> [1973] \"JASPAR.Otx\"                        \"JASPAR.Prop\"                       #> [1975] \"JASPAR.Rax\"                        \"JASPAR.Rel\"                        #> [1977] \"JASPAR.Six3/6\"                     \"JASPAR.small-Maf\"                  #> [1979] \"JASPAR.Snail\"                      \"JASPAR.SoxB1\"                      #> [1981] \"JASPAR.SoxB2\"                      \"JASPAR.SoxC\"                       #> [1983] \"JASPAR.SoxF\"                       \"JASPAR.Tbox-a\"                     #> [1985] \"JASPAR.Tbox-b\"                     \"JASPAR.Tbx15/18/22\"                #> [1987] \"JASPAR.Tbx2/3\"                     \"JASPAR.Tcf3-4-12\"                  #> [1989] \"JASPAR.Tlx\"                        \"JASPAR.Uncx-b\"                     #> [1991] \"JASPAR.Usf\"                        \"JASPAR.YY1-2\"                      #> [1993] \"JASPAR.BNC2\"                       \"JASPAR.CTCF.MA1929.1\"              #> [1995] \"JASPAR.CTCF.MA1930.1\"              \"JASPAR.ELK1::HOXA1\"                #> [1997] \"JASPAR.ELK1::HOXB13\"               \"JASPAR.ELK1::SREBF2\"               #> [1999] \"JASPAR.ERF::FIGLA\"                 \"JASPAR.ERF::FOXI1\"                 #>  [ reached getOption(\"max.print\") -- omitted 1867 entries ] names(MOTIF_DB[c(\"HOMER.GATA3_2\", \"JASPAR.CDX1\")]) #> [1] \"HOMER.GATA3_2\" \"JASPAR.CDX1\""},{"path":"https://tanaylab.github.io/prego/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://tanaylab.github.io/prego/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a motif from a MotifDB object — plot,MotifDB-method","title":"Plot a motif from a MotifDB object — plot,MotifDB-method","text":"Plot motif MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a motif from a MotifDB object — plot,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' plot(   x,   title = \"\",   subtitle = ggplot2::waiver(),   revcomp = FALSE,   method = \"bits\",   ... )"},{"path":"https://tanaylab.github.io/prego/reference/plot-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a motif from a MotifDB object — plot,MotifDB-method","text":"x MotifDB object title title plot subtitle subtitle plot revcomp whether plot reverse complement PSSM method Height method, can one \"bits\" \"probability\" (default:\"bits\") ... Arguments passed ggseqlogo::ggseqlogo data Character vector sequences named list sequences. sequences must width facet Facet type, can 'wrap' 'grid' scales Facet scales, see facet_wrap ncol Number columns, works facet='wrap', see facet_wrap nrow Number rows, ncol","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot-MotifDB-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a motif from a MotifDB object — plot,MotifDB-method","text":"ggplot object","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot-MotifDB-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a motif from a MotifDB object — plot,MotifDB-method","text":"","code":"plot(MOTIF_DB[\"HOMER.GATA3_2\"])  plot(MOTIF_DB[\"HNF1\", pattern = T])  plot(MOTIF_DB[c(\"HOMER.GATA3_2\", \"JASPAR.CDX1\")])"},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"Plot LOGO pssm result regression","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"","code":"plot_pssm_logo(   pssm,   title = \"Sequence model\",   subtitle = ggplot2::waiver(),   pos_bits_thresh = NULL,   revcomp = FALSE,   method = \"bits\" )"},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"pssm PSSM matrix data frame title title plot subtitle subtitle plot pos_bits_thresh Positions bits threshold highlighted red. NULL, positions highlighted. revcomp whether plot reverse complement PSSM method Height method, can one \"bits\" \"probability\" (default:\"bits\")","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"ggplot object","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"","code":"pssm <- data.frame(     pos = seq(0, 9, by = 1),     A = c(         0.16252439817826936, 0.4519127838188067, 0, 1, 0, 0.9789171974522293,         0.9743866100297978, 0.013113942843003835, 0.3734676916683981,         0.32658771473191045     ),     C = c(         0.43038386467143785, 0.13116231900388756, 0, 0, 0, 0, 0, 0.46975132995175056,         0.1669956368169541, 0.29795679333680375     ),     G = c(         0.22999349381912818, 0.002929742520705392, 1, 0, 0, 0, 0.012679896024852597,         0.4808858097241123, 0.4248389777685435, 0.20458094742321709     ),     T = c(         0.1770982433311646, 0.41399515465660036, 0, 0, 1, 0.0210828025477707,         0.012933493945349648, 0.03624891748113324, 0.0346976937461043,         0.17087454450806872     ) ) plot_pssm_logo(pssm)  if (FALSE) { # \\dontrun{ res <- regress_pwm(sequences_example, response_mat_example) plot_pssm_logo(res$pssm) } # }"},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot LOGO of pssm from dataset (e.g. ","title":"Plot LOGO of pssm from dataset (e.g. ","text":"Plot LOGO pssm dataset (e.g. \"HOMER\" \"JASPAR\")","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot LOGO of pssm from dataset (e.g. ","text":"","code":"plot_pssm_logo_dataset(   motif,   dataset = all_motif_datasets(),   title = motif,   subtitle = ggplot2::waiver(),   pos_bits_thresh = NULL,   revcomp = FALSE,   method = \"bits\" )"},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot LOGO of pssm from dataset (e.g. ","text":"motif motif name (e.g. \"GATA4\") dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs, JASPAR_motifs all_motif_datasets() title title plot subtitle subtitle plot pos_bits_thresh Positions bits threshold highlighted red. NULL, positions highlighted. revcomp whether plot reverse complement PSSM method Height method, can one \"bits\" \"probability\" (default:\"bits\")","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot LOGO of pssm from dataset (e.g. ","text":"ggplot object","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_pssm_logo_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot LOGO of pssm from dataset (e.g. ","text":"","code":"plot_pssm_logo_dataset(\"JASPAR.Brachyury\")   plot_pssm_logo_dataset(\"GATA5\", JASPAR_motifs)"},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","title":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","text":"return scatter plot response variable averages vs regression model's prediction","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","text":"","code":"plot_regression_prediction(pred, response, point_size = 0.5, alpha = 1)"},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","text":"pred 'pred' field regression result response 'response' field regression result (response variable) point_size size points plot (default: 0.5) alpha transparency points plot (default: 1)","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(sequences_example, response_mat_example) plot_regression_prediction(res$pred, res$response) } # }"},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_prediction_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the cumulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","title":"Plot the cumulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","text":"Plot cumulative regression model's prediction stratified response variable","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_prediction_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the cumulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","text":"","code":"plot_regression_prediction_binary(pred, response)"},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_prediction_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the cumulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","text":"pred 'pred' field regression result response 'response' field regression result (response variable). binary (0/1).","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_prediction_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the cumulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","text":"","code":"if (FALSE) { # \\dontrun{ res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1], score_metric = \"ks\") plot_regression_prediction_binary(res_binary$pred, res_binary$response) } # }"},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the regression results — plot_regression_qc","title":"Plot the regression results — plot_regression_qc","text":"Plot QC regression results","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the regression results — plot_regression_qc","text":"","code":"plot_regression_qc(   reg,   response = NULL,   title = glue(\"Motif regression results (consensus: {reg$consensus})\"),   subtitle = NULL,   caption = NULL,   point_size = 0.5,   alpha = 0.5 )"},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the regression results — plot_regression_qc","text":"reg output regress_pwm response response variable title title plot (optional) subtitle subtitle plot (optional) caption caption plot (optional). caption NULL default caption plotted. point_size size points scatter plot alpha transparency points scatter plot","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the regression results — plot_regression_qc","text":"patchwork object","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the regression results — plot_regression_qc","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(sequences_example, response_mat_example) plot_regression_qc(res)  res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1], screen_db = TRUE) plot_regression_qc(res_binary) } # }"},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the regression results for multiple motifs — plot_regression_qc_multi","title":"Plot the regression results for multiple motifs — plot_regression_qc_multi","text":"plot regression results motif_num > 1","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the regression results for multiple motifs — plot_regression_qc_multi","text":"","code":"plot_regression_qc_multi(   reg,   title = glue(\"Motif regression results (consensus: {reg$consensus})\"),   subtitle = NULL,   caption = NULL,   point_size = 0.01,   alpha = 0.5,   response = NULL )"},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the regression results for multiple motifs — plot_regression_qc_multi","text":"reg output regress_pwm title title plot (optional) subtitle subtitle plot (optional) caption caption plot (optional). caption NULL default caption plotted. point_size size points scatter plot alpha transparency points scatter plot response response variable","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_regression_qc_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the regression results for multiple motifs — plot_regression_qc_multi","text":"","code":"if (FALSE) { # \\dontrun{ res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 3], motif_num = 3) plot_regression_qc_multi(res_binary) } # }"},{"path":"https://tanaylab.github.io/prego/reference/plot_spat_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spatial model of the regression result — plot_spat_model","title":"Plot spatial model of the regression result — plot_spat_model","text":"Plot spatial model regression result","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_spat_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spatial model of the regression result — plot_spat_model","text":"","code":"plot_spat_model(spat, title = \"Spatial model\")"},{"path":"https://tanaylab.github.io/prego/reference/plot_spat_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spatial model of the regression result — plot_spat_model","text":"spat 'spat' field regression result title title plot (optional)","code":""},{"path":"https://tanaylab.github.io/prego/reference/plot_spat_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spatial model of the regression result — plot_spat_model","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(sequences_example, response_mat_example) plot_spat_model(res$spat) } # }"},{"path":"https://tanaylab.github.io/prego/reference/prego-package.html","id":null,"dir":"Reference","previous_headings":"","what":"prego: PWM Regression Optimizer — prego-package","title":"prego: PWM Regression Optimizer — prego-package","text":"PREGO implements regression algorithms finding motifs DNA. contains algorithms described : \"Extensive low-affinity transcriptional interactions yeast genome\" doi:10.1101/gr.5113606 .","code":""},{"path":"https://tanaylab.github.io/prego/reference/prego-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"prego: PWM Regression Optimizer — prego-package","text":"Maintainer: Aviezer Lifshitz aviezer.lifshitz@weizmann.ac.il Authors: Amos Tanay amos.tanay@weizmann.ac.il","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the prior value from a MotifDB object — prior,MotifDB-method","title":"Get the prior value from a MotifDB object — prior,MotifDB-method","text":"Get prior value MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the prior value from a MotifDB object — prior,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' prior(object)"},{"path":"https://tanaylab.github.io/prego/reference/prior-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the prior value from a MotifDB object — prior,MotifDB-method","text":"object MotifDB object#'","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-MotifDB-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the prior value from a MotifDB object — prior,MotifDB-method","text":"prior value","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-MotifDB-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the prior value from a MotifDB object — prior,MotifDB-method","text":"","code":"prior(MOTIF_DB) #> [1] 0.01"},{"path":"https://tanaylab.github.io/prego/reference/prior-set-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a new prior for a MotifDB object — prior<-,MotifDB-method","title":"Set a new prior for a MotifDB object — prior<-,MotifDB-method","text":"Set new prior MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-set-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a new prior for a MotifDB object — prior<-,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' prior(object) <- value"},{"path":"https://tanaylab.github.io/prego/reference/prior-set-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a new prior for a MotifDB object — prior<-,MotifDB-method","text":"object MotifDB object value New prior value 0 1","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-set-MotifDB-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a new prior for a MotifDB object — prior<-,MotifDB-method","text":"Updated MotifDB object new prior","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-set-MotifDB-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a new prior for a MotifDB object — prior<-,MotifDB-method","text":"","code":"prior(MOTIF_DB) #> [1] 0.01 prior(MOTIF_DB) <- 0.2 prior(MOTIF_DB) #> [1] 0.2"},{"path":"https://tanaylab.github.io/prego/reference/prior-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the prior for a MotifDB object — prior<-","title":"Set the prior for a MotifDB object — prior<-","text":"Set prior MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the prior for a MotifDB object — prior<-","text":"","code":"prior(object) <- value"},{"path":"https://tanaylab.github.io/prego/reference/prior-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the prior for a MotifDB object — prior<-","text":"object MotifDB object value New prior value","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the prior for a MotifDB object — prior<-","text":"Updated MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the prior for a MotifDB object — prior","title":"Get or set the prior for a MotifDB object — prior","text":"Get set prior MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the prior for a MotifDB object — prior","text":"","code":"prior(object)"},{"path":"https://tanaylab.github.io/prego/reference/prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the prior for a MotifDB object — prior","text":"object MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the prior for a MotifDB object — prior","text":"prior value","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the correlation between two given PSSMs — pssm_cor","title":"Compute the correlation between two given PSSMs — pssm_cor","text":"correlation computed shifting shorter PSSM along longer one computing correlation position. maximum correlation returned.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the correlation between two given PSSMs — pssm_cor","text":"","code":"pssm_cor(pssm1, pssm2, method = \"spearman\", prior = 0.01)"},{"path":"https://tanaylab.github.io/prego/reference/pssm_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the correlation between two given PSSMs — pssm_cor","text":"pssm1 first PSSM matrix data frame pssm2 second PSSM matrix data frame method method use computing correlation. See cor details. prior prior probability nucleotide.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the correlation between two given PSSMs — pssm_cor","text":"Correlation two PSSMs","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the correlation between two given PSSMs — pssm_cor","text":"","code":"if (FALSE) { # \\dontrun{ res1 <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) pssm_cor(res1$pssm, JASPAR_motifs[JASPAR_motifs$motif == \"HNF1A\", ]) } # }"},{"path":"https://tanaylab.github.io/prego/reference/pssm_dataset_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a correlation matrix for a pssm dataset — pssm_dataset_cor","title":"Compute a correlation matrix for a pssm dataset — pssm_dataset_cor","text":"Compute correlation matrix pssm dataset","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_dataset_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a correlation matrix for a pssm dataset — pssm_dataset_cor","text":"","code":"pssm_dataset_cor(   dataset,   method = \"spearman\",   prior = 0.01,   parallel = getOption(\"prego.parallel\", TRUE) )"},{"path":"https://tanaylab.github.io/prego/reference/pssm_dataset_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a correlation matrix for a pssm dataset — pssm_dataset_cor","text":"dataset pssm dataset. data frame columns 'motif', 'pos', '\", 'C', 'G', 'T' method method use computing correlation. See cor details. prior prior probability nucleotide. parallel whether use parallel computing","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_dataset_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a correlation matrix for a pssm dataset — pssm_dataset_cor","text":"correlation matrix PSSMs dataset","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_dataset_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a correlation matrix for a pssm dataset — pssm_dataset_cor","text":"","code":"if (FALSE) { # \\dontrun{ cm <- pssm_dataset_cor(JASPAM_motifs) head(cm) } # }"},{"path":"https://tanaylab.github.io/prego/reference/pssm_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute KL divergence between two PSSMs — pssm_diff","title":"Compute KL divergence between two PSSMs — pssm_diff","text":"Compute KL divergence two PSSMs","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute KL divergence between two PSSMs — pssm_diff","text":"","code":"pssm_diff(pssm1, pssm2)"},{"path":"https://tanaylab.github.io/prego/reference/pssm_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute KL divergence between two PSSMs — pssm_diff","text":"pssm1 first PSSM matrix data frame pssm2 second PSSM matrix data frame","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute KL divergence between two PSSMs — pssm_diff","text":"KL divergence two PSSMs","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute KL divergence between two PSSMs — pssm_diff","text":"","code":"if (FALSE) { # \\dontrun{ res1 <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) pssm_diff(res1$pssm, JASPAR_motifs[JASPAR_motifs$motif == \"HNF1A\", ]) } # }"},{"path":"https://tanaylab.github.io/prego/reference/pssm_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Match PSSM to a directory of motifs — pssm_match","title":"Match PSSM to a directory of motifs — pssm_match","text":"Match PSSM directory motifs. PSSM matched motif directory computing correlation two PSSMs.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match PSSM to a directory of motifs — pssm_match","text":"","code":"pssm_match(   pssm,   motifs,   best = FALSE,   method = \"spearman\",   parallel = getOption(\"prego.parallel\", TRUE) )"},{"path":"https://tanaylab.github.io/prego/reference/pssm_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match PSSM to a directory of motifs — pssm_match","text":"pssm PSSM matrix data frame motifs data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name best return best match method method use computing correlation. See cor details. parallel use parallel processing. Set number cores using set_parallel.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match PSSM to a directory of motifs — pssm_match","text":"best TRUE, string best match. Otherwise, data frame row per motif column named 'cor' correlation pssm. data frame sorted descreasing correlation.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match PSSM to a directory of motifs — pssm_match","text":"","code":"if (FALSE) { # \\dontrun{ res1 <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) head(pssm_match(res1$pssm, JASPAR_motifs)) pssm_match(res1$pssm, JASPAR_motifs, best = TRUE) } # }"},{"path":"https://tanaylab.github.io/prego/reference/pssm_rc.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse complement a PSSM — pssm_rc","title":"Reverse complement a PSSM — pssm_rc","text":"Reverse complement PSSM","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_rc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse complement a PSSM — pssm_rc","text":"","code":"pssm_rc(pssm)"},{"path":"https://tanaylab.github.io/prego/reference/pssm_rc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse complement a PSSM — pssm_rc","text":"pssm PSSM. Data frame columns '', 'C', 'G', 'T' 'pos' matrix columns '', 'C', 'G', 'T'","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_rc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse complement a PSSM — pssm_rc","text":"PSSM format, reverse complemented.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_rc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse complement a PSSM — pssm_rc","text":"","code":"# Create simulated PSSM data frame pssm <- data.frame(     pos = 1:4,     A = c(0.1, 0.2, 0.3, 0.1),     C = c(0.1, 0.3, 0.2, 0.1),     G = c(0.1, 0.3, 0.3, 0.7),     T = c(0.7, 0.2, 0.2, 0.1) )  # Reverse complement the PSSM rc_pssm <- pssm_rc(pssm)"},{"path":"https://tanaylab.github.io/prego/reference/pssm_to_kmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform PSSM (Position-Specific Scoring Matrix) to a KMER — pssm_to_kmer","title":"Transform PSSM (Position-Specific Scoring Matrix) to a KMER — pssm_to_kmer","text":"function transforms PSSM k-mer given length.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_to_kmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform PSSM (Position-Specific Scoring Matrix) to a KMER — pssm_to_kmer","text":"","code":"pssm_to_kmer(pssm, kmer_length = NULL, pos_bits_thresh = NULL, prior = 0.01)"},{"path":"https://tanaylab.github.io/prego/reference/pssm_to_kmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform PSSM (Position-Specific Scoring Matrix) to a KMER — pssm_to_kmer","text":"pssm PSSM matrix data frame. PSSM must least kmer_length rows. kmer_length length k-mer return. NULL - length k-mer equal number rows PSSM. pos_bits_thresh numeric value indicating minimum number bits per position include nucleotide k-mer. nucleotide meet threshold, replaced 'N'. Default NULL. prior numeric value indicating prior probability nucleotide. Default 0.01.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_to_kmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform PSSM (Position-Specific Scoring Matrix) to a KMER — pssm_to_kmer","text":"character vector length 1 containing k-mer.","code":""},{"path":"https://tanaylab.github.io/prego/reference/pssm_to_kmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform PSSM (Position-Specific Scoring Matrix) to a KMER — pssm_to_kmer","text":"","code":"pssm_to_kmer(get_motif_pssm(\"HOMER.AP_1\")) #> [1] \"ATGACTCATC\" plot_pssm_logo_dataset(\"HOMER.AP_1\")"},{"path":"https://tanaylab.github.io/prego/reference/rc.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Complement DNA Sequences — rc","title":"Reverse Complement DNA Sequences — rc","text":"function takes character vector DNA sequences returns reverse complements. uses efficient C++ implementation via Rcpp improved performance.","code":""},{"path":"https://tanaylab.github.io/prego/reference/rc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Complement DNA Sequences — rc","text":"","code":"rc(dna)"},{"path":"https://tanaylab.github.io/prego/reference/rc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Complement DNA Sequences — rc","text":"dna character vector DNA sequences. Can single sequence multiple sequences. sequences can upper lower case.","code":""},{"path":"https://tanaylab.github.io/prego/reference/rc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Complement DNA Sequences — rc","text":"character vector length input, element reverse complement corresponding input sequence.","code":""},{"path":"https://tanaylab.github.io/prego/reference/rc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse Complement DNA Sequences — rc","text":"function performs following operations sequence: 1. Converts sequence uppercase. 2. Reverses sequence. 3. Complements base (<->T, C<->G). Non-standard characters (, T, C, G) preserved reversed positions.","code":""},{"path":"https://tanaylab.github.io/prego/reference/rc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Complement DNA Sequences — rc","text":"","code":"rc(\"ATCG\") # Returns \"CGAT\" #> [1] \"CGAT\" rc(c(\"ATCG\", \"GGCC\", \"TATA\")) # Returns c(\"CGAT\", \"GGCC\", \"TATA\") #> [1] \"CGAT\" \"GGCC\" \"TATA\""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Run PWM regression on clusters — regress_pwm.clusters","title":"Run PWM regression on clusters — regress_pwm.clusters","text":"Run PWM regression clusters","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run PWM regression on clusters — regress_pwm.clusters","text":"","code":"regress_pwm.clusters(   sequences,   clusters,   use_sample = TRUE,   match_with_db = TRUE,   screen_db = FALSE,   sample_frac = NULL,   sample_ratio = 1,   final_metric = \"ks\",   parallel = getOption(\"prego.parallel\", TRUE),   use_sge = FALSE,   dataset = all_motif_datasets(),   motifs = NULL,   min_D = 0,   prior = 0.01,   alternative = \"two.sided\",   ... )"},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run PWM regression on clusters — regress_pwm.clusters","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper). Please make sure sequences long enough cover spat_num_bins * spat_bin_size bp, centered around motif/signal. clusters vector cluster assignments sequence use_sample whether use sampled optimization (default: FALSE). match_with_db match resulting PWMs motif databases using pssm_match. add column named 'db_match' stats data frame, together 'pred_mat_db' database motif predictions, 'db_dataset' similar 'motif_dataset' database motifs. Note closest match returned, even similar enough absolute terms. Also, match done resulting regression pssm pssms database - order find best motif database set screen_db=TRUE. screen_db screen best motif database explains clusters. See screen_pwm.clusters. sample_frac vector two numbers, specifying fraction sequences use sampling sequences cluster (first number) cluster (second number). NULL - sample_ratio sample_frac NULL, number sequences cluster equal sample_ratio times number sequences cluster. final_metric metric use order choose best motif. One 'ks' 'r2'. Note unlike score_metric used regression , metric used choosing best motif runs sampled dataset. NULL - 'ks' used binary response 'r2' continuous response. parallel whether run optimization parallel. use set_parallel set number cores use. use_sge use function gcluster.run2 misha.ext package run optimization SGE cluster. relevant misha.ext package installed. Note gcluster.run2 writes current environment starting parallelization, better run function clean environment. Also, Note 'prego' needs installed order work, .e. use devtools::load_all() pkgload::load_all() load package. dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs JASPAR_motifs, all_motif_datasets(), MotifDB object. motifs names specific motifs extract dataset min_D minimum distance consider match prior prior probability nucleotide. alternative alternative hypothesis KS test. Can \"two.sided\", \"less\" \"greater\" ... Arguments passed regress_pwm, regress_pwm.sample response matrix response variables - number rows equal number sequences motif Initial motif start regression . Can either string kmer character \"*\" indicates wildcard data frame pre-computed PSSM (see slot pssm return value function). NULL - K-mer screen performed order find best kmer initialization. init_from_dataset TRUE, regression initialized PSSM best motif dataset. init_from_dataset initialize regression PSSM best motif motif_dataset, using final_metric metric. TRUE, motif parameter ignored. See screen_pwm details. motif_length Length seed motif. motif shorter , extended wildcards (stars). Note motif longer , truncated. score_metric metric use optimizing PWM. One \"r2\" \"ks\". using \"ks\" response variable single vector 0 1. bidirect motif bi-directional. TRUE, reverse-complement motif used well. spat_bin_size size spatial bin (bp). spat_num_bins number spatial bins. Please make sure sequences long enough cover number bins. bp outside spat_bin_size * spat_num_bins ignored. bidirect TRUE, number bins odd 'prego' symmetrizes motif around center bin. spat_model previously computed spatial model (see spat) return value function. improve_epsilon minimum improve objective function continue optimization min_nuc_prob minimum nucleotide probability every iteration unif_prior uniform prior nucleotide probabilities include_response include response resulting list (default: TRUE) verbose show verbose messages. seed random seed consensus_single_thresh,consensus_double_thresh thresholds consensus sequence calculation (single double nucleotides) motif_dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs, JASPAR_motifs all_motif_datasets(). default all_motif_datasets() used. multi_kmers TRUE, different candidates kmers regressed order find best seed according final_metric. kmer_length vector kmer lengths screen order find best seed motif. max_cands maximum number kmer candidates try. motif_num Number motifs infer. motif_num > 1, function run motif_num times, time residuals linear model previous runs (see smooth_k parameter). best motif returned, others stored 'models' return value. smooth_k k smoothing predictions model order compute residuals motif_num > 1. residuals computed response - running mean size 'k' current model. min_kmer_cor minimal correlation kmer response order use seed. internal_num_folds number folds use internal cross-validation. sample_for_kmers Use random sample dataset order find best kmer. useful dataset large kmer screen take long time. Note final regression performed entire dataset. relevant multi_kmers TRUE. sample_idxs indices sequences use kmer screen. NULL, random sample used. log_energy transform energy log scale iteration. energy_func function transform energy iteration. accept numeric vector return numeric vector. e.g. log function(x) x^2. Note range input energies 0 1 (probability motif sequence), inferred function using returned energies (log scale) make sure function first log transforms using log_energy=TRUE. xmin,xmax,npts range energy function number points use interpolation. energy_func_generator function generate energy function regressing multiple motifs. accept result previous iteration + original response return function similar energy_func. e.g.  function(prev_reg, resp) {        df <- data.frame(x = prev_reg$pred, y = resp)        fn_gam <- .formula(\"y ~ s(x, k=3, bs='cr')\")        model <- mgcv::gam(fn_gam, family = binomial(link = \"logit\"), data = df, method=\"REML\")        function(z){            mgcv::predict.gam(object = model, newdata = data.frame(x = z)) }}. parameter NULL, energy_func_generator create energy function run another step regression initialized previous motif energy_func energy function. useful energy function monotonic, example - one might want use gam model fit energy function like example . optimize_pwm optimize PWM model (Default: TRUE). FALSE, PWM model used initial model spatial model. optimize_spat optimize spatial model (Default: TRUE). FALSE, spatial model used initial model PWM model. kmer_sequence_length length sequence use kmer screen. NULL, entire sequence used. symmetrize_spat TRUE, spatial model symmetrized around center bin. Default: TRUE. min_gap,max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple testing severely).","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run PWM regression on clusters — regress_pwm.clusters","text":"list following elements: models: list models cluster cluster_mat: indicator matrix cluster assignments pred_mat: matrix energies predicted motifs per cluster (columns) sequence (rows) motif_dataset: data frame PSSMs cluster spat_dataset: data frame spatial model cluster stats: data frame statistics cluster","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run PWM regression on clusters — regress_pwm.clusters","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm.clusters(cluster_sequences_example, clusters_example) head(res$pred_mat) res$stats  plot_regression_qc(res$models[[1]], title = names(res$models)[1])  # multiple motifs per cluster res_multi <- regress_pwm.clusters(cluster_sequences_example, clusters_example, motif_num = 3) res_multi$multi_stats plot_regression_qc_multi(res_multi$models[[1]], title = names(res_multi$models)[1]) } # }  # screen also for the best motif in the database res_screen <- regress_pwm.clusters(cluster_sequences_example, clusters_example, screen_db = TRUE) #> ℹ Using sampled optimization #> ℹ Running regression for 5 clusters #> ℹ Matching with motif databases #> ℹ Screening motif databases for 5 clusters res_screen$stats #> # A tibble: 5 x 9 #>   cluster consensus      ks_D        r2      seed_motif #> 1    c100  WGA***AT 0.6530423 0.3224333 ***TGAT*GATG*** #> 2    c111    Y*RTAA 0.8413087 0.5127852 ***CAATTAAC**** #> 3     c29 T*A***W*Y 0.8219863 0.5360583 ***TTAA*CATT*** #> 4      c5      <NA> 0.5633821 0.1974345 ***AATCA*TAA*** #> 5      c6       ATC 0.5971442 0.2654848 ***TA*CTTATC*** #>                        db_match db_match_cor   ks_D_db #> 1 HOCOMOCO.PDX1_HUMAN.H11MO.0.A    0.7996138 0.6337245 #> 2           JOLMA.CDX2_mono_DBD    0.8912204 0.7803839 #> 3          JASPAR.RFX1.MA0365.1    0.7338186 0.8606183 #> 4        JOLMA.NKX6-1_mono_full    0.6767482 0.5793942 #> 5                  JASPAR.GATA2    0.7807456 0.5790557 #>                         db_motif #> 1                    HOMER.HOXA2 #> 2                    JASPAR.CDX1 #> 3 HOCOMOCO.HNF1B_HUMAN.H11MO.0.A #> 4                    HOMER.Gata2 #> 5                   JASPAR.GATA5  plot_regression_qc(res_screen$models[[1]], title = names(res_screen$models)[1]) #> Warning: All aesthetics have length 1, but the data has 2359 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing a #>   single row."},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validate a PWM regression model — regress_pwm.cv","title":"Cross-validate a PWM regression model — regress_pwm.cv","text":"Perform cross-validation PWM regression model. can either provide explicit folds, use nfolds argument set number folds. response binary (0 1) categories vector given, folds stratified response/categories.","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validate a PWM regression model — regress_pwm.cv","text":"","code":"regress_pwm.cv(   sequences,   response,   nfolds = NULL,   metric = NULL,   folds = NULL,   categories = NULL,   use_sample = FALSE,   seed = 60427,   parallel = getOption(\"prego.parallel\", FALSE),   fold_parallel = !parallel && getOption(\"prego.parallel\", FALSE),   add_full_model = TRUE,   alternative = \"less\",   ... )"},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validate a PWM regression model — regress_pwm.cv","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper). Please make sure sequences long enough cover spat_num_bins * spat_bin_size bp, centered around motif/signal. response matrix response variables - number rows equal number sequences nfolds number folds cross-validation. Can NULL folds provided. metric metric use cross-validation. One 'ks' 'r2'. NULL - 'ks' set binary response 'r2' continuous response. folds vector fold numbers sequence (optional) categories vector categories sequence (optional) use_sample whether use sampled optimization . seed random seed parallel whether run cross-validation parallel. fold_parallel whether run optimization fold parallel. recommended set FALSE parallel TRUE. add_full_model whether add full model (without cross-validation) results. alternative alternative hypothesis p-value calculation using ks.test. One \"two.sided\", \"less\" \"greater\". ... Arguments passed regress_pwm, regress_pwm.sample motif Initial motif start regression . Can either string kmer character \"*\" indicates wildcard data frame pre-computed PSSM (see slot pssm return value function). NULL - K-mer screen performed order find best kmer initialization. init_from_dataset TRUE, regression initialized PSSM best motif dataset. init_from_dataset initialize regression PSSM best motif motif_dataset, using final_metric metric. TRUE, motif parameter ignored. See screen_pwm details. motif_length Length seed motif. motif shorter , extended wildcards (stars). Note motif longer , truncated. score_metric metric use optimizing PWM. One \"r2\" \"ks\". using \"ks\" response variable single vector 0 1. bidirect motif bi-directional. TRUE, reverse-complement motif used well. spat_bin_size size spatial bin (bp). spat_num_bins number spatial bins. Please make sure sequences long enough cover number bins. bp outside spat_bin_size * spat_num_bins ignored. bidirect TRUE, number bins odd 'prego' symmetrizes motif around center bin. spat_model previously computed spatial model (see spat) return value function. improve_epsilon minimum improve objective function continue optimization min_nuc_prob minimum nucleotide probability every iteration unif_prior uniform prior nucleotide probabilities include_response include response resulting list (default: TRUE) verbose show verbose messages. consensus_single_thresh,consensus_double_thresh thresholds consensus sequence calculation (single double nucleotides) match_with_db match resulting PWMs motif databases using pssm_match. Note closest match returned, even similar enough absolute terms. screen_db Screen motif_dataset using screen_pwm use best motif initial motif. TRUE, following fields added return value: \"db_motif\", \"db_motif_pred\", \"db_motif_pssm\" \"db_motif_score\". motif_dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs, JASPAR_motifs all_motif_datasets(). default all_motif_datasets() used. multi_kmers TRUE, different candidates kmers regressed order find best seed according final_metric. final_metric metric use order choose best motif. One 'ks' 'r2'. Note unlike score_metric used regression , metric used choosing best motif runs sampled dataset. NULL - 'ks' used binary response 'r2' continuous response. kmer_length vector kmer lengths screen order find best seed motif. max_cands maximum number kmer candidates try. motif_num Number motifs infer. motif_num > 1, function run motif_num times, time residuals linear model previous runs (see smooth_k parameter). best motif returned, others stored 'models' return value. smooth_k k smoothing predictions model order compute residuals motif_num > 1. residuals computed response - running mean size 'k' current model. min_kmer_cor minimal correlation kmer response order use seed. internal_num_folds number folds use internal cross-validation. sample_for_kmers Use random sample dataset order find best kmer. useful dataset large kmer screen take long time. Note final regression performed entire dataset. relevant multi_kmers TRUE. sample_frac fraction dataset use kmer screen. Default: 0.1. sample_idxs indices sequences use kmer screen. NULL, random sample used. sample_ratio ratio '1' category '0' category sampled dataset (binary response). Relevant sample_frac NULL. log_energy transform energy log scale iteration. energy_func function transform energy iteration. accept numeric vector return numeric vector. e.g. log function(x) x^2. Note range input energies 0 1 (probability motif sequence), inferred function using returned energies (log scale) make sure function first log transforms using log_energy=TRUE. xmin,xmax,npts range energy function number points use interpolation. energy_func_generator function generate energy function regressing multiple motifs. accept result previous iteration + original response return function similar energy_func. e.g.  function(prev_reg, resp) {        df <- data.frame(x = prev_reg$pred, y = resp)        fn_gam <- .formula(\"y ~ s(x, k=3, bs='cr')\")        model <- mgcv::gam(fn_gam, family = binomial(link = \"logit\"), data = df, method=\"REML\")        function(z){            mgcv::predict.gam(object = model, newdata = data.frame(x = z)) }}. parameter NULL, energy_func_generator create energy function run another step regression initialized previous motif energy_func energy function. useful energy function monotonic, example - one might want use gam model fit energy function like example . optimize_pwm optimize PWM model (Default: TRUE). FALSE, PWM model used initial model spatial model. optimize_spat optimize spatial model (Default: TRUE). FALSE, spatial model used initial model PWM model. kmer_sequence_length length sequence use kmer screen. NULL, entire sequence used. symmetrize_spat TRUE, spatial model symmetrized around center bin. Default: TRUE. min_gap,max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple testing severely).","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validate a PWM regression model — regress_pwm.cv","text":"list following elements: cv_models: list models, one fold. cv_pred: vector predictions sequence. score: score model cross-validated predictions. cv_scores: vector scores fold. folds: vector fold number sequence. full_model: full model (without cross-validation), add_full_model TRUE.","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validate a PWM regression model — regress_pwm.cv","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm.cv(     cluster_sequences_example, cluster_mat_example[, 1],     nfolds = 5, use_sample = TRUE, sample_frac = c(0.1, 1) ) res$score res$cv_scores  plot(     res$cv_pred,     res$full_model$pred,     xlab = \"CV predictions\", ylab = \"Full model predictions\", cex = 0.1 ) plot_regression_prediction_binary(res$cv_pred, cluster_mat_example[, 1]) plot_regression_prediction_binary(res$full_model$pred, cluster_mat_example[, 1])  # without sampling res <- regress_pwm.cv(     cluster_sequences_example, cluster_mat_example[, 1],     nfolds = 5, use_sample = FALSE ) res$score res$cv_scores plot(res$cv_pred,     res$full_model$pred,     xlab = \"CV predictions\", ylab = \"Full model predictions\", cex = 0.1 ) } # }"},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a PWM regression — regress_multiple_motifs","title":"Perform a PWM regression — regress_multiple_motifs","text":"Perform PWM regression","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a PWM regression — regress_multiple_motifs","text":"","code":"regress_multiple_motifs(   sequences,   response,   motif = NULL,   motif_length = 15,   score_metric = \"r2\",   bidirect = TRUE,   spat_bin_size = NULL,   spat_num_bins = NULL,   spat_model = NULL,   improve_epsilon = 0.0001,   min_nuc_prob = 0.001,   unif_prior = 0.05,   include_response = TRUE,   seed = 60427,   verbose = FALSE,   kmer_length = 8,   multi_kmers = FALSE,   final_metric = NULL,   max_cands = 10,   min_gap = 0,   max_gap = 1,   min_kmer_cor = 0.08,   motif_num = 2,   smooth_k = 100,   consensus_single_thresh = 0.6,   consensus_double_thresh = 0.85,   internal_num_folds = 1,   match_with_db = TRUE,   motif_dataset = all_motif_datasets(),   parallel = getOption(\"prego.parallel\", FALSE),   alternative = \"less\",   sample_for_kmers = FALSE,   sample_frac = NULL,   sample_idxs = NULL,   sample_ratio = 1,   log_energy = FALSE,   energy_func_generator = NULL,   energy_func = NULL,   optimize_pwm = TRUE,   optimize_spat = TRUE,   ... )  regress_pwm(   sequences,   response,   motif = NULL,   motif_length = 15,   init_from_dataset = FALSE,   score_metric = \"r2\",   bidirect = TRUE,   spat_bin_size = NULL,   spat_num_bins = NULL,   spat_model = NULL,   improve_epsilon = 0.0001,   min_nuc_prob = 0.001,   unif_prior = 0.05,   include_response = TRUE,   seed = 60427,   verbose = FALSE,   kmer_length = 8,   multi_kmers = TRUE,   final_metric = NULL,   max_cands = 10,   min_gap = 0,   max_gap = 1,   min_kmer_cor = 0.08,   motif_num = 1,   smooth_k = 100,   consensus_single_thresh = 0.6,   consensus_double_thresh = 0.85,   internal_num_folds = 1,   match_with_db = TRUE,   screen_db = FALSE,   motif_dataset = all_motif_datasets(),   parallel = getOption(\"prego.parallel\", FALSE),   alternative = \"less\",   sample_for_kmers = FALSE,   sample_frac = NULL,   sample_idxs = NULL,   sample_ratio = 1,   log_energy = FALSE,   energy_func = NULL,   xmin = -100,   xmax = 100,   npts = 10000,   energy_func_generator = NULL,   optimize_pwm = TRUE,   optimize_spat = TRUE,   kmer_sequence_length = NULL,   symmetrize_spat = TRUE,   ... )"},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a PWM regression — regress_multiple_motifs","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper). Please make sure sequences long enough cover spat_num_bins * spat_bin_size bp, centered around motif/signal. response matrix response variables - number rows equal number sequences motif Initial motif start regression . Can either string kmer character \"*\" indicates wildcard data frame pre-computed PSSM (see slot pssm return value function). NULL - K-mer screen performed order find best kmer initialization. init_from_dataset TRUE, regression initialized PSSM best motif dataset. motif_length Length seed motif. motif shorter , extended wildcards (stars). Note motif longer , truncated. score_metric metric use optimizing PWM. One \"r2\" \"ks\". using \"ks\" response variable single vector 0 1. bidirect motif bi-directional. TRUE, reverse-complement motif used well. spat_bin_size size spatial bin (bp). spat_num_bins number spatial bins. Please make sure sequences long enough cover number bins. bp outside spat_bin_size * spat_num_bins ignored. bidirect TRUE, number bins odd 'prego' symmetrizes motif around center bin. spat_model previously computed spatial model (see spat) return value function. improve_epsilon minimum improve objective function continue optimization min_nuc_prob minimum nucleotide probability every iteration unif_prior uniform prior nucleotide probabilities include_response include response resulting list (default: TRUE) seed random seed verbose show verbose messages. kmer_length vector kmer lengths screen order find best seed motif. multi_kmers TRUE, different candidates kmers regressed order find best seed according final_metric. final_metric metric use order choose best motif. One 'ks' 'r2'. Note unlike score_metric used regression , metric used choosing best motif runs sampled dataset. NULL - 'ks' used binary response 'r2' continuous response. max_cands maximum number kmer candidates try. min_gap, max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple testing severely). min_kmer_cor minimal correlation kmer response order use seed. motif_num Number motifs infer. motif_num > 1, function run motif_num times, time residuals linear model previous runs (see smooth_k parameter). best motif returned, others stored 'models' return value. smooth_k k smoothing predictions model order compute residuals motif_num > 1. residuals computed response - running mean size 'k' current model. consensus_single_thresh, consensus_double_thresh thresholds consensus sequence calculation (single double nucleotides) internal_num_folds number folds use internal cross-validation. match_with_db match resulting PWMs motif databases using pssm_match. Note closest match returned, even similar enough absolute terms. motif_dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs, JASPAR_motifs all_motif_datasets(). default all_motif_datasets() used. parallel whether run optimization parallel. use set_parallel set number cores use. alternative alternative hypothesis p-value calculation using ks.test. One \"two.sided\", \"less\" \"greater\". sample_for_kmers Use random sample dataset order find best kmer. useful dataset large kmer screen take long time. Note final regression performed entire dataset. relevant multi_kmers TRUE. sample_frac fraction dataset use kmer screen. Default: 0.1. sample_idxs indices sequences use kmer screen. NULL, random sample used. sample_ratio ratio '1' category '0' category sampled dataset (binary response). Relevant sample_frac NULL. log_energy transform energy log scale iteration. energy_func_generator function generate energy function regressing multiple motifs. accept result previous iteration + original response return function similar energy_func. e.g.  function(prev_reg, resp) {        df <- data.frame(x = prev_reg$pred, y = resp)        fn_gam <- .formula(\"y ~ s(x, k=3, bs='cr')\")        model <- mgcv::gam(fn_gam, family = binomial(link = \"logit\"), data = df, method=\"REML\")        function(z){            mgcv::predict.gam(object = model, newdata = data.frame(x = z)) }}. parameter NULL, energy_func_generator create energy function run another step regression initialized previous motif energy_func energy function. useful energy function monotonic, example - one might want use gam model fit energy function like example . energy_func function transform energy iteration. accept numeric vector return numeric vector. e.g. log function(x) x^2. Note range input energies 0 1 (probability motif sequence), inferred function using returned energies (log scale) make sure function first log transforms using log_energy=TRUE. optimize_pwm optimize PWM model (Default: TRUE). FALSE, PWM model used initial model spatial model. optimize_spat optimize spatial model (Default: TRUE). FALSE, spatial model used initial model PWM model. ... Arguments passed screen_kmers min_cor patterns maximum correlation one response variable larger min_cor reported is_train boolean vector determine subset sequences use screening min_gap,max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple testing severely). from_range Sequences considered position from_range (default 0) to_range Sequences considered position to_range (default NULL - using length sequences) return_mat Return matrix patterns correlation response variables instead data frame. (default: FALSE) init_from_dataset initialize regression PSSM best motif motif_dataset, using final_metric metric. TRUE, motif parameter ignored. See screen_pwm details. screen_db Screen motif_dataset using screen_pwm use best motif initial motif. TRUE, following fields added return value: \"db_motif\", \"db_motif_pred\", \"db_motif_pssm\" \"db_motif_score\". xmin, xmax, npts range energy function number points use interpolation. kmer_sequence_length length sequence use kmer screen. NULL, entire sequence used. symmetrize_spat TRUE, spatial model symmetrized around center bin. Default: TRUE.","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a PWM regression — regress_multiple_motifs","text":"list following elements: pssm: data frame pssm matrix inferred motif, rows positions columns nucleotides. spat: data frame inferred spatial model, spatial factor bin. pred: vector predicted pwm sequence. consensus: Consensus sequence based PSSM. response: response matrix. include_response FALSE, response matrix included list. r2: \\(r^2\\) prediction respect response variable. ks: response binary, Kolmogorov-Smirnov test results predictions response 1 vs predictions response 0. seed_motif: seed motif started regression. kmers: k-mers screened order find best seed motif (motif NULL). sample_idxs: indices sequences used regression (regress_pwm.sample). predict: function can used predict PWM new sequence. match_with_db TRUE, following additional elements returned: motif_db: motif database similar resulting PSSM. db_match_cor: correlation resulting PSSM closest match motif database. db_match_pssm: PSSM closest match motif database. db_match_pred: predicted PWM closest match motif database. db_match_r2: \\(r^2\\) predicted PWM closest match motif database response db_match_ks: response binary, Kolmogorov-Smirnov test results predicted PWM closest match motif database response 1 vs predictions response 0. screen_db TRUE, following additional elements returned: db_motif: best motif motif database. db_motif_pred: predicted PWM best motif motif database. db_motif_pssm: PSSM best motif motif database. db_motif_score: score best motif motif database. n_motifs greater 1, list following elements returned: models: list () inferred model multi_stats: data frame following columns: model, score (KS binary, r^2 otherwise), comb_score (score combined linear model models 1:) additional statistics per model pred: vector predicted pwm using linear model combined scores. comb_modle: linear model combined scores. predict: function can used predict PWM new sequence. predict_multi: function can used predict PWM different models new sequence","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a PWM regression — regress_multiple_motifs","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm(sequences_example, response_mat_example) res$pssm res$spat head(res$pred)  plot_regression_qc(res)  # intialize with a pre-computed PSSM res1 <- regress_pwm(sequences_example, response_mat_example, motif = res$pssm)  # intialize with a pre-computed PSSM and spatial model res2 <- regress_pwm(     sequences_example,     response_mat_example,     motif = res$pssm,     spat_model = res$spat )  # binary response res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) plot_regression_qc(res_binary)  # match with db res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1], match_with_db = TRUE) plot_regression_qc(res_binary)  # Screen for best db motif res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1], screen_db = TRUE) plot_regression_qc(res_binary)  # initialize with a motif from the database res_binary <- regress_pwm(     cluster_sequences_example,     cluster_mat_example[, 1],     init_from_dataset = TRUE )  # use multiple kmer seeds res_multi <- regress_pwm(     cluster_sequences_example,     cluster_mat_example[, 1],     multi_kmers = TRUE,     kmer_length = 6:8,     final_metric = \"ks\" ) plot_regression_qc(res_multi)  # Screen for multiple motifs res_multi <- regress_pwm(     cluster_sequences_example,     cluster_mat_example[, 1],     motif_num = 3,     match_with_db = TRUE ) res_multi$multi_stats plot_regression_qc_multi(res_multi) } # }  # regress_multiple_motifs is an alias for regress_pwm with motif_num > 1 res_multi2 <- regress_multiple_motifs(     cluster_sequences_example,     cluster_mat_example[, 1],     motif_num = 5,     match_with_db = TRUE ) #> ℹ Using 7 bins of size 40 bp #> ℹ Running regression for 5 motifs #>  #> ── Running first regression ── #>  #> ℹ Using 7 bins of size 40 bp #> ℹ Using \"ks\" as the final metric #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ Gaps of length 0:1 are allowed #> ℹ minimal correlation: 0.08 #> ✔ Found 1032 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TTAAT*ATT***\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 10 #> • Spat max: 290 #> • Spat bin size: 40 #> • Number of bins: 7 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. Consensus: \"T*AM**W*Y\" #> ℹ Best match in the database: \"JOLMA.HNF1B_di_full_1\", cor: 0.784 #> ✔ \"JOLMA.HNF1B_di_full_1\" KS test D: 0.8487, p-value: 0 #> ✔ KS test D: 0.8472, p-value: 0 #>  #> ── Running regression #2 ── #>  #> ℹ Using 7 bins of size 40 bp #> ℹ Using \"r2\" as the final metric #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ Gaps of length 0:1 are allowed #> ℹ minimal correlation: 0.08 #> ✔ Found 2525 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TAATGC*TA***\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 10 #> • Spat max: 290 #> • Spat bin size: 40 #> • Number of bins: 7 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. Consensus: \"TTAATGS*TA*T\" #> ℹ Best match in the database: \"JOLMA.SOX9_mono_DBD\", cor: 0.685 #> ✔ R^2: 0.0055 #> ℹ KS statistic: 0.395846125038647 #> ℹ KS test statistic for models 1 and 2: 0.85079972652967 #> ℹ Improvement in KS test statistic: 0.00363937624378918 #>  #> ── Running regression #3 ── #>  #> ℹ Using 7 bins of size 40 bp #> ℹ Using \"r2\" as the final metric #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ Gaps of length 0:1 are allowed #> ℹ minimal correlation: 0.08 #> ✔ Found 2720 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***AAG*GGTTG***\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 10 #> • Spat max: 290 #> • Spat bin size: 40 #> • Number of bins: 7 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. Consensus: \"T**AAA*GG*TG*A\" #> ℹ Best match in the database: \"JASPAR.MSN4\", cor: 0.676 #> ✔ R^2: 0.0354 #> ℹ KS statistic: 0.0200617485553538 #> ℹ KS test statistic for models 1, 2, and 3: 0.865892850144356 #> ℹ Improvement in KS test statistic: 0.0150931236146855 #>  #> ── Running regression #4 ── #>  #> ℹ Using 7 bins of size 40 bp #> ℹ Using \"r2\" as the final metric #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ Gaps of length 0:1 are allowed #> ℹ minimal correlation: 0.08 #> ✔ Found 1679 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***AGCG*AACC***\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 10 #> • Spat max: 290 #> • Spat bin size: 40 #> • Number of bins: 7 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. Consensus: \"GCG*AACCTAC\" #> ℹ Best match in the database: \"JASPAR.NAC025\", cor: 0.721 #> ✔ R^2: 0.0204 #> ℹ KS statistic: 0.112921908544206 #> ℹ KS test statistic for models 1, 2, 3, and 4: 0.874352794143903 #> ℹ Improvement in KS test statistic: 0.00845994399954719 #>  #> ── Running regression #5 ── #>  #> ℹ Using 7 bins of size 40 bp #> ℹ Using \"r2\" as the final metric #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ Gaps of length 0:1 are allowed #> ℹ minimal correlation: 0.08 #> ✔ Found 1864 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***AGCG*AACC***\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 10 #> • Spat max: 290 #> • Spat bin size: 40 #> • Number of bins: 7 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. Consensus: \"AGCG*AACCTA\" #> ℹ Best match in the database: \"JASPAR.ACE2\", cor: 0.642 #> ✔ R^2: 0.0101 #> ℹ KS statistic: 0.106887489603337 #> ℹ KS test statistic for models 1, 2, 3, 4, and 5: 0.880010538187867 #> ℹ Improvement in KS test statistic: 0.00565774404396424 #> ✔ Best model: model #1 (score of 0.847160350285881)"},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Run PWM regression on a sample of the data — regress_pwm.sample","title":"Run PWM regression on a sample of the data — regress_pwm.sample","text":"optimization performed sampled dataset size sample_frac, explicit sampled indices sample_idxs.","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run PWM regression on a sample of the data — regress_pwm.sample","text":"","code":"regress_pwm.sample(   sequences,   response,   spat_bin_size = NULL,   spat_num_bins = NULL,   bidirect = TRUE,   include_response = TRUE,   motif_num = 1,   multi_kmers = TRUE,   sample_frac = NULL,   sample_idxs = NULL,   sample_ratio = 1,   parallel = getOption(\"prego.parallel\", TRUE),   match_with_db = TRUE,   screen_db = FALSE,   motif_dataset = all_motif_datasets(),   seed = 60427,   final_metric = NULL,   unif_prior = 0.05,   alternative = \"two.sided\",   energy_func = NULL,   ... )"},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run PWM regression on a sample of the data — regress_pwm.sample","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper). Please make sure sequences long enough cover spat_num_bins * spat_bin_size bp, centered around motif/signal. response matrix response variables - number rows equal number sequences spat_bin_size size spatial bin (bp). spat_num_bins number spatial bins. Please make sure sequences long enough cover number bins. bp outside spat_bin_size * spat_num_bins ignored. bidirect TRUE, number bins odd 'prego' symmetrizes motif around center bin. bidirect motif bi-directional. TRUE, reverse-complement motif used well. include_response include response resulting list (default: TRUE) motif_num Number motifs infer. motif_num > 1, function run motif_num times, time residuals linear model previous runs (see smooth_k parameter). best motif returned, others stored 'models' return value. multi_kmers TRUE, different candidates kmers regressed order find best seed according final_metric. sample_frac fraction dataset sample. response categorical (0 1), sampling stratified category, .e. sample_frac can vector length 2 fraction 0 1 responses sample respectively. NULL - default 0.1 continuous variables, binary variables - number 0 responses equal sample_ratio times number 1 responses. sample_idxs indices sequences use. NULL, indices sampled using sample_frac. sample_ratio ratio '1' category '0' category sampled dataset. Relevant sample_frac NULL. parallel whether run optimization parallel. use set_parallel set number cores use. match_with_db match resulting PWMs motif databases using pssm_match. Note closest match returned, even similar enough absolute terms. screen_db Screen motif_dataset using screen_pwm use best motif initial motif. TRUE, following fields added return value: \"db_motif\", \"db_motif_pred\", \"db_motif_pssm\" \"db_motif_score\". motif_dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs, JASPAR_motifs all_motif_datasets(). default all_motif_datasets() used. seed random seed final_metric metric use order choose best motif. One 'ks' 'r2'. Note unlike score_metric used regression , metric used choosing best motif runs sampled dataset. NULL - 'ks' used binary response 'r2' continuous response. unif_prior uniform prior nucleotide probabilities alternative alternative hypothesis p-value calculation using ks.test. One \"two.sided\", \"less\" \"greater\". energy_func function transform energy iteration. accept numeric vector return numeric vector. e.g. log function(x) x^2. Note range input energies 0 1 (probability motif sequence), inferred function using returned energies (log scale) make sure function first log transforms using log_energy=TRUE. ... Arguments passed regress_pwm, screen_kmers motif Initial motif start regression . Can either string kmer character \"*\" indicates wildcard data frame pre-computed PSSM (see slot pssm return value function). NULL - K-mer screen performed order find best kmer initialization. init_from_dataset TRUE, regression initialized PSSM best motif dataset. init_from_dataset initialize regression PSSM best motif motif_dataset, using final_metric metric. TRUE, motif parameter ignored. See screen_pwm details. motif_length Length seed motif. motif shorter , extended wildcards (stars). Note motif longer , truncated. score_metric metric use optimizing PWM. One \"r2\" \"ks\". using \"ks\" response variable single vector 0 1. spat_model previously computed spatial model (see spat) return value function. improve_epsilon minimum improve objective function continue optimization min_nuc_prob minimum nucleotide probability every iteration verbose show verbose messages. consensus_single_thresh,consensus_double_thresh thresholds consensus sequence calculation (single double nucleotides) kmer_length vector kmer lengths screen order find best seed motif. max_cands maximum number kmer candidates try. smooth_k k smoothing predictions model order compute residuals motif_num > 1. residuals computed response - running mean size 'k' current model. min_kmer_cor minimal correlation kmer response order use seed. internal_num_folds number folds use internal cross-validation. sample_for_kmers Use random sample dataset order find best kmer. useful dataset large kmer screen take long time. Note final regression performed entire dataset. relevant multi_kmers TRUE. log_energy transform energy log scale iteration. xmin,xmax,npts range energy function number points use interpolation. energy_func_generator function generate energy function regressing multiple motifs. accept result previous iteration + original response return function similar energy_func. e.g.  function(prev_reg, resp) {        df <- data.frame(x = prev_reg$pred, y = resp)        fn_gam <- .formula(\"y ~ s(x, k=3, bs='cr')\")        model <- mgcv::gam(fn_gam, family = binomial(link = \"logit\"), data = df, method=\"REML\")        function(z){            mgcv::predict.gam(object = model, newdata = data.frame(x = z)) }}. parameter NULL, energy_func_generator create energy function run another step regression initialized previous motif energy_func energy function. useful energy function monotonic, example - one might want use gam model fit energy function like example . optimize_pwm optimize PWM model (Default: TRUE). FALSE, PWM model used initial model spatial model. optimize_spat optimize spatial model (Default: TRUE). FALSE, spatial model used initial model PWM model. kmer_sequence_length length sequence use kmer screen. NULL, entire sequence used. symmetrize_spat TRUE, spatial model symmetrized around center bin. Default: TRUE. min_gap,max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple testing severely). min_cor patterns maximum correlation one response variable larger min_cor reported is_train boolean vector determine subset sequences use screening from_range Sequences considered position from_range (default 0) to_range Sequences considered position to_range (default NULL - using length sequences) return_mat Return matrix patterns correlation response variables instead data frame. (default: FALSE)","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run PWM regression on a sample of the data — regress_pwm.sample","text":"list following elements: pssm: data frame pssm matrix inferred motif, rows positions columns nucleotides. spat: data frame inferred spatial model, spatial factor bin. pred: vector predicted pwm sequence. consensus: Consensus sequence based PSSM. response: response matrix. include_response FALSE, response matrix included list. r2: \\(r^2\\) prediction respect response variable. ks: response binary, Kolmogorov-Smirnov test results predictions response 1 vs predictions response 0. seed_motif: seed motif started regression. kmers: k-mers screened order find best seed motif (motif NULL). sample_idxs: indices sequences used regression (regress_pwm.sample). predict: function can used predict PWM new sequence. match_with_db TRUE, following additional elements returned: motif_db: motif database similar resulting PSSM. db_match_cor: correlation resulting PSSM closest match motif database. db_match_pssm: PSSM closest match motif database. db_match_pred: predicted PWM closest match motif database. db_match_r2: \\(r^2\\) predicted PWM closest match motif database response db_match_ks: response binary, Kolmogorov-Smirnov test results predicted PWM closest match motif database response 1 vs predictions response 0. screen_db TRUE, following additional elements returned: db_motif: best motif motif database. db_motif_pred: predicted PWM best motif motif database. db_motif_pssm: PSSM best motif motif database. db_motif_score: score best motif motif database. n_motifs greater 1, list following elements returned: models: list () inferred model multi_stats: data frame following columns: model, score (KS binary, r^2 otherwise), comb_score (score combined linear model models 1:) additional statistics per model pred: vector predicted pwm using linear model combined scores. comb_modle: linear model combined scores. predict: function can used predict PWM new sequence. predict_multi: function can used predict PWM different models new sequence","code":""},{"path":"https://tanaylab.github.io/prego/reference/regress_pwm.sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run PWM regression on a sample of the data — regress_pwm.sample","text":"","code":"if (FALSE) { # \\dontrun{ res <- regress_pwm.sample(     cluster_sequences_example,     cluster_mat_example[, 1],     final_metric = \"ks\",     screen_db = TRUE )  res$pssm res$spat head(res$pred)  plot_regression_qc(res) } # }"},{"path":"https://tanaylab.github.io/prego/reference/sample_quantile_matched_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample rows respecting quantiles of a reference distribution — sample_quantile_matched_rows","title":"Sample rows respecting quantiles of a reference distribution — sample_quantile_matched_rows","text":"function randomly samples rows data frame way quantiles selected data match closely possible full data.","code":""},{"path":"https://tanaylab.github.io/prego/reference/sample_quantile_matched_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample rows respecting quantiles of a reference distribution — sample_quantile_matched_rows","text":"","code":"sample_quantile_matched_rows(   data_frame,   reference,   sample_fraction,   num_quantiles = 10,   seed = 60427,   verbose = TRUE )"},{"path":"https://tanaylab.github.io/prego/reference/sample_quantile_matched_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample rows respecting quantiles of a reference distribution — sample_quantile_matched_rows","text":"data_frame data frame sample rows. reference numeric vector length number rows data frame. sample_fraction fraction specifying proportion rows sample data frame. num_quantiles integer specifying number quantiles, default 10. seed integer specifying random seed use. verbose logical specifying whether print messages.","code":""},{"path":"https://tanaylab.github.io/prego/reference/sample_quantile_matched_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample rows respecting quantiles of a reference distribution — sample_quantile_matched_rows","text":"data frame sampled rows.","code":""},{"path":"https://tanaylab.github.io/prego/reference/sample_quantile_matched_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample rows respecting quantiles of a reference distribution — sample_quantile_matched_rows","text":"","code":"sampled <- sample_quantile_matched_rows(mtcars, mtcars$mpg, sample_fraction = 0.1) #> ✔ Sampled 3 rows from the data frame. plot(quantile(mtcars$mpg), quantile(sampled$mpg)) abline(0, 1)"},{"path":"https://tanaylab.github.io/prego/reference/screen_kmers.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen for kmers — screen_kmers","title":"Screen for kmers — screen_kmers","text":"Screen kmers","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_kmers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen for kmers — screen_kmers","text":"","code":"screen_kmers(   sequences,   response,   kmer_length = 6,   min_cor = 0.08,   is_train = NULL,   min_gap = 0,   max_gap = 0,   from_range = 0,   to_range = NULL,   return_mat = FALSE,   seed = 60427,   verbose = FALSE )"},{"path":"https://tanaylab.github.io/prego/reference/screen_kmers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen for kmers — screen_kmers","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper) response matrix response variables - number rows equal number sequences kmer_length number non-gap characters motifs screened min_cor patterns maximum correlation one response variable larger min_cor reported is_train boolean vector determine subset sequences use screening min_gap, max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple testing severely). from_range Sequences considered position from_range (default 0) to_range Sequences considered position to_range (default NULL - using length sequences) return_mat Return matrix patterns correlation response variables instead data frame. (default: FALSE) seed random seed verbose show verbose messages","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_kmers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen for kmers — screen_kmers","text":"data frame following columns, together column response variable correlation kmers response variable: kmer: kmer pattern, \"*\" indicates wildcard max_r2: maximum R^2 one response variables avg_n: average number times kmer appears sequences avg_var: variance number times kmer appears sequences return_mat TRUE, matrix correlations response variables (rows kmers) returned instead data frame. kmer found, empty data frame returned.","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_kmers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen for kmers — screen_kmers","text":"","code":"kmers <- screen_kmers(sequences_example, response_mat_example) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ minimal correlation: 0.08 #> ✔ Found 575 kmers in 1000 sequences. head(kmers) #>     kmer     max_r2 avg_n    avg_var          c1          c2         c3 #> 1 AGATAA 0.04998882 0.140 0.15240000 -0.01025383 -0.03046725 -0.2235818 #> 2 TTATCT 0.02975253 0.128 0.13761599  0.03136108  0.04927359 -0.1724892 #> 3 CTTATC 0.02680831 0.080 0.07960001  0.02861430  0.01967959 -0.1637324 #> 4 GGGGAG 0.02300140 0.243 0.28195098  0.04611732  0.02960520  0.1516621 #> 5 GGGCGG 0.02280306 0.062 0.06015600  0.06576437  0.02662074  0.1510068 #> 6 TAACTG 0.02215597 0.071 0.06995900 -0.01145993 -0.02249238 -0.1488488 #>             c4          c5 #> 1  0.004382457 -0.03498838 #> 2  0.035843253  0.02917432 #> 3  0.059437271  0.03772539 #> 4  0.044013925  0.03089626 #> 5  0.104473867  0.12732512 #> 6 -0.037136175 -0.01858661  kmers <- screen_kmers(sequences_example, response_mat_example, return_mat = TRUE) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ minimal correlation: 0.08 #> ✔ Found 575 kmers in 1000 sequences. head(kmers) #>                 c1          c2         c3           c4          c5 #> AGATAA -0.01025383 -0.03046725 -0.2235818  0.004382457 -0.03498838 #> TTATCT  0.03136108  0.04927359 -0.1724892  0.035843253  0.02917432 #> CTTATC  0.02861430  0.01967959 -0.1637324  0.059437271  0.03772539 #> GGGGAG  0.04611732  0.02960520  0.1516621  0.044013925  0.03089626 #> GGGCGG  0.06576437  0.02662074  0.1510068  0.104473867  0.12732512 #> TAACTG -0.01145993 -0.02249238 -0.1488488 -0.037136175 -0.01858661  kmers <- screen_kmers(sequences_example, response_mat_example, max_gap = 3) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ Gaps of length 0:3 are allowed #> ℹ minimal correlation: 0.08 #> ✔ Found 4884 kmers in 1000 sequences. head(kmers) #>       kmer     max_r2 avg_n    avg_var           c1           c2         c3 #> 1   AGATAA 0.05012437 0.139 0.15167901 -0.011159671 -0.033565160 -0.2238847 #> 2  AGA*AAG 0.03404951 0.220 0.23760001  0.062884174  0.063842162 -0.1845251 #> 3   TTATCT 0.02915060 0.127 0.13487099  0.036021627  0.051995803 -0.1707355 #> 4 ACAT**CT 0.02848161 0.090 0.09190000 -0.002383306 -0.023468828 -0.1687650 #> 5  AG*TAAG 0.02829135 0.118 0.12007600  0.034630746 -0.005794165 -0.1682003 #> 6   CTTATC 0.02680831 0.080 0.07960001  0.028614303  0.019679585 -0.1637324 #>            c4          c5 #> 1 0.001539792 -0.03616555 #> 2 0.025056362  0.02373981 #> 3 0.032191906  0.02568413 #> 4 0.019714575 -0.02059141 #> 5 0.046150818  0.02593128 #> 6 0.059437271  0.03772539"},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen for motifs in a database for every cluster — screen_pwm.clusters","title":"Screen for motifs in a database for every cluster — screen_pwm.clusters","text":"Screen motifs database every cluster","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen for motifs in a database for every cluster — screen_pwm.clusters","text":"","code":"screen_pwm.clusters(   sequences,   clusters,   dataset = all_motif_datasets(),   motifs = NULL,   parallel = getOption(\"prego.parallel\", TRUE),   min_D = 0.4,   only_best = FALSE,   prior = 0.01,   alternative = \"two.sided\",   ... )"},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen for motifs in a database for every cluster — screen_pwm.clusters","text":"sequences vector sequences clusters vector cluster assignments dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs JASPAR_motifs, all_motif_datasets(), MotifDB object. motifs names specific motifs extract dataset parallel logical, whether use parallel processing min_D minimum distance consider match only_best TRUE, return best match cluster prior prior probability nucleotide. alternative alternative hypothesis KS test. Can \"two.sided\", \"less\" \"greater\" ... Arguments passed compute_pwm pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. func function use combine PWMs sequence. Either 'logSumExp' 'max'. default 'logSumExp'.","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen for motifs in a database for every cluster — screen_pwm.clusters","text":"matrix KS D statistics cluster (columns) every motif (rows) least one cluster D >= min_D. only_best TRUE, named vector name best motif match cluster returned (regardless min_D).","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen for motifs in a database for every cluster — screen_pwm.clusters","text":"","code":"if (FALSE) { # \\dontrun{ D_mat <- screen_pwm.clusters(cluster_sequences_example, clusters_example) dim(D_mat) D_mat[1:5, 1:5]  # return only the best match screen_pwm.clusters(cluster_sequences_example, clusters_example, only_best = TRUE) } # }"},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen for motifs in a database given a response variable — screen_pwm","title":"Screen for motifs in a database given a response variable — screen_pwm","text":"Screen motifs database given response variable","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen for motifs in a database given a response variable — screen_pwm","text":"","code":"screen_pwm(   sequences,   response,   metric = NULL,   dataset = all_motif_datasets(),   motifs = NULL,   parallel = getOption(\"prego.parallel\", TRUE),   only_best = FALSE,   prior = 0.01,   alternative = \"two.sided\",   ... )"},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen for motifs in a database given a response variable — screen_pwm","text":"sequences vector sequences response vector response variable sequence. response matrix, average used. metric metric use order choose best motif. One 'ks' 'r2'. NULL - default 'ks' binary variables, 'r2' continuous variables. dataset data frame PSSMs ('', 'C', 'G' 'T' columns), additional column 'motif' containing motif name, example HOMER_motifs JASPAR_motifs, all_motif_datasets(), MotifDB object. motifs names specific motifs extract dataset parallel logical, whether use parallel processing only_best return best motif (one highest score). FALSE, motifs returned. prior prior probability nucleotide. alternative alternative hypothesis KS test. One 'two.sided', 'less' 'greater'. ... Arguments passed compute_pwm pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min minimum position use sequences. default 1. spat_max maximum position use sequences. default length sequences. bidirect motif bi-directional. TRUE, reverse-complement motif used well. func function use combine PWMs sequence. Either 'logSumExp' 'max'. default 'logSumExp'.","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen for motifs in a database given a response variable — screen_pwm","text":"data frame following columns: motif: motif name. score: score motif (depending metric). only_best TRUE, best motif returned (data framw single row).","code":""},{"path":"https://tanaylab.github.io/prego/reference/screen_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen for motifs in a database given a response variable — screen_pwm","text":"","code":"res_screen <- screen_pwm(cluster_sequences_example, cluster_mat_example[, 1]) #> ℹ Performing PWM screening head(res_screen) #> # A tibble: 6 x 2 #>                            motif     score #> 1 HOCOMOCO.HNF1B_HUMAN.H11MO.0.A 0.8606183 #> 2 HOCOMOCO.HNF1B_MOUSE.H11MO.0.A 0.8510730 #> 3                   JASPAR.HNF1A 0.8510730 #> 4            JOLMA.HNF1A_di_full 0.8505374 #> 5          JOLMA.HNF1B_di_full_1 0.8484232 #> 6          JOLMA.HNF1B_di_full_2 0.8484090  # only best match screen_pwm(cluster_sequences_example, cluster_mat_example[, 1]) #> ℹ Performing PWM screening #> # A tibble: 3,867 x 2 #>                            motif     score #> 1 HOCOMOCO.HNF1B_HUMAN.H11MO.0.A 0.8606183 #> 2 HOCOMOCO.HNF1B_MOUSE.H11MO.0.A 0.8510730 #> 3                   JASPAR.HNF1A 0.8510730 #> 4            JOLMA.HNF1A_di_full 0.8505374 #> 5          JOLMA.HNF1B_di_full_1 0.8484232 #> 6          JOLMA.HNF1B_di_full_2 0.8484090 #> # ... with 3,861 more rows  # with r^2 metric res_screen <- screen_pwm(sequences_example, response_mat_example[, 1], metric = \"r2\") #> ℹ Performing PWM screening head(res_screen) #> # A tibble: 6 x 2 #>               motif      score #> 1       JASPAR.SOX2 0.04355104 #> 2       JASPAR.SUT1 0.04011911 #> 3      JASPAR.SOX13 0.03979196 #> 4 JOLMA.IRX3_di_DBD 0.03947399 #> 5        JASPAR.dsx 0.03903627 #> 6       JASPAR.Sox3 0.03876807"},{"path":"https://tanaylab.github.io/prego/reference/set_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parallel threads — set_parallel","title":"Set parallel threads — set_parallel","text":"Set number parallel threads use. prego uses R function doMC::registerDoMC register parallelization. default, prego uses 80% number available cores. options saved 'prego.parallel' (use parallelization, logical) 'prego.parallel.nc' (number cores use, integer).","code":""},{"path":"https://tanaylab.github.io/prego/reference/set_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set parallel threads — set_parallel","text":"","code":"set_parallel(thread_num = max(1, round(parallel::detectCores() * 0.8)))"},{"path":"https://tanaylab.github.io/prego/reference/set_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parallel threads — set_parallel","text":"thread_num number threads. use '1' non parallel behavior","code":""},{"path":"https://tanaylab.github.io/prego/reference/set_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parallel threads — set_parallel","text":"None","code":""},{"path":"https://tanaylab.github.io/prego/reference/set_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parallel threads — set_parallel","text":"","code":"# \\donttest{ set_parallel(8) # }"},{"path":"https://tanaylab.github.io/prego/reference/show-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for MotifDB objects — show,MotifDB-method","title":"Show method for MotifDB objects — show,MotifDB-method","text":"Show method MotifDB objects","code":""},{"path":"https://tanaylab.github.io/prego/reference/show-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for MotifDB objects — show,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' show(object)"},{"path":"https://tanaylab.github.io/prego/reference/show-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for MotifDB objects — show,MotifDB-method","text":"object MotifDB object","code":""},{"path":"https://tanaylab.github.io/prego/reference/sub-MotifDB-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get specific motifs from the MotifDB — [,MotifDB-method","title":"Get specific motifs from the MotifDB — [,MotifDB-method","text":"Get specific motifs MotifDB","code":""},{"path":"https://tanaylab.github.io/prego/reference/sub-MotifDB-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get specific motifs from the MotifDB — [,MotifDB-method","text":"","code":"# S4 method for class 'MotifDB' x[i, j, ..., pattern = FALSE, drop = TRUE]"},{"path":"https://tanaylab.github.io/prego/reference/sub-MotifDB-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get specific motifs from the MotifDB — [,MotifDB-method","text":"x MotifDB object Character vector motif names, numeric indices, regex pattern(s) j used ... used pattern Logical indicating whether treat character input regex pattern (default: FALSE) drop used","code":""},{"path":"https://tanaylab.github.io/prego/reference/sub-MotifDB-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get specific motifs from the MotifDB — [,MotifDB-method","text":"MotifDB object containing specified motifs","code":""},{"path":"https://tanaylab.github.io/prego/reference/sub-MotifDB-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get specific motifs from the MotifDB — [,MotifDB-method","text":"","code":"MOTIF_DB[\"HOMER.GATA3_2\"] #> MotifDB object with 1 motifs and prior 0.01 #> Slots include: @mat, @rc_mat @motif_lengths, @prior, @spat_factors, @spat_bin_size MOTIF_DB[c(\"HOMER.GATA3_2\", \"JASPAR.CDX1\")] #> MotifDB object with 2 motifs and prior 0.01 #> Slots include: @mat, @rc_mat @motif_lengths, @prior, @spat_factors, @spat_bin_size MOTIF_DB[\"GATA\", pattern = T] #> MotifDB object with 40 motifs and prior 0.01 #> Slots include: @mat, @rc_mat @motif_lengths, @prior, @spat_factors, @spat_bin_size"},{"path":"https://tanaylab.github.io/prego/reference/trim_pssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim PSSM — trim_pssm","title":"Trim PSSM — trim_pssm","text":"function trims Position-Specific Scoring Matrix (PSSM) removing positions low information content beginning end motif.","code":""},{"path":"https://tanaylab.github.io/prego/reference/trim_pssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim PSSM — trim_pssm","text":"","code":"trim_pssm(pssm, bits_thresh = 0.1)"},{"path":"https://tanaylab.github.io/prego/reference/trim_pssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim PSSM — trim_pssm","text":"pssm data frame representing PSSM, columns position (pos) bits per position (bits). bits_thresh threshold value bits per position. Positions bits threshold kept, positions bits threshold beginning end motif removed. default value 0.1.","code":""},{"path":"https://tanaylab.github.io/prego/reference/trim_pssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim PSSM — trim_pssm","text":"trimmed PSSM data frame, positions filtered based bits threshold.","code":""},{"path":"https://tanaylab.github.io/prego/news/index.html","id":"prego-003","dir":"Changelog","previous_headings":"","what":"prego 0.0.3","title":"prego 0.0.3","text":"Added MotifDB object store motif information. Implmented faster energy computation method, now used default.","code":""},{"path":"https://tanaylab.github.io/prego/news/index.html","id":"prego-0009000","dir":"Changelog","previous_headings":"","what":"prego 0.0.0.9000","title":"prego 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
