[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Weizmann Institute Science Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aviezer Lifshitz. Author, maintainer. Amos Tanay. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lifshitz , Tanay (2022). prego: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {prego: What the Package Does (One Line, Title Case)},   author = {Aviezer Lifshitz and Amos Tanay},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version prego like :","code":"remotes::install_github(\"tanaylab/prego\")"},{"path":[]},{"path":"/reference/compute_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"Compute PWMs set sequences given PSSM matrix","code":""},{"path":"/reference/compute_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"","code":"compute_pwm(   sequences,   pssm,   spat = NULL,   spat_min = 0,   spat_max = NULL,   bidirect = TRUE )"},{"path":"/reference/compute_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"sequences vector sequences pssm PSSM matrix data frame. columns matrix data frame named nucleotides ('', 'C', 'G' 'T'). spat data frame spatial model (returned $spat slot regression). contain column called 'bin' column called 'spat_factor'. spat_min start spatial model beginning sequence (bp) spat_max end spatial model beginning sequence (bp). NULL - spatial model end end sequence. bidirect motif bi-directional. TRUE, reverse-complement motif used well.","code":""},{"path":"/reference/compute_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"vector predicted pwm sequence.","code":""},{"path":"/reference/compute_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute PWMs for a set of sequences given a PSSM matrix — compute_pwm","text":"","code":"res <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 198 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TAATCATT****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. KS test D: 0.81, p-value: 0  pwm <- compute_pwm(cluster_sequences_example, res$pssm, res$spat) head(pwm) #> [1] -16.21544 -16.56435 -16.61700 -15.03914 -15.00868 -14.20146  # this is similar to the prediction in the regression head(res$pred) #> [1] -16.21544 -16.56435 -16.61700 -15.03914 -15.00868 -14.20146"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot_pssm_logo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"Plot LOGO pssm result regression","code":""},{"path":"/reference/plot_pssm_logo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"","code":"plot_pssm_logo(pssm)"},{"path":"/reference/plot_pssm_logo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"pssm 'pssm' field regression result","code":""},{"path":"/reference/plot_pssm_logo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot LOGO of the pssm result from the regression — plot_pssm_logo","text":"","code":"res <- regress_pwm(sequences_example, response_mat_example) #> ℹ Number of response variables: 5 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 2138 kmers in 1000 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TTTACAAC****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. R^2: 0, 0.0022, 0.0248, 0.0033, and 0.0029 plot_pssm_logo(res$pssm) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead."},{"path":"/reference/plot_regression_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","title":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","text":"return scatter plot response variable averages vs regression model's prediction","code":""},{"path":"/reference/plot_regression_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","text":"","code":"plot_regression_prediction(pred, response, point_size = 0.5)"},{"path":"/reference/plot_regression_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","text":"pred 'pred' field regression result response 'response' field regression result (response variable) point_size size points plot (default: 0.5)","code":""},{"path":"/reference/plot_regression_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot response variable averages vs the regression model's prediction — plot_regression_prediction","text":"","code":"res <- regress_pwm(sequences_example, response_mat_example) #> ℹ Number of response variables: 5 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 2138 kmers in 1000 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TTTACAAC****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. R^2: 0, 0.0022, 0.0248, 0.0033, and 0.0029 plot_regression_prediction(res$pred, res$response)"},{"path":"/reference/plot_regression_prediction_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the comulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","title":"Plot the comulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","text":"Plot comulative regression model's prediction stratified response variable","code":""},{"path":"/reference/plot_regression_prediction_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the comulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","text":"","code":"plot_regression_prediction_binary(pred, response)"},{"path":"/reference/plot_regression_prediction_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the comulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","text":"pred 'pred' field regression result response 'response' field regression result (response variable). binary (0/1).","code":""},{"path":"/reference/plot_regression_prediction_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the comulative of the regression model's prediction stratified by the response variable — plot_regression_prediction_binary","text":"","code":"res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1], score_metric = \"ks\") #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 198 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TAATCATT****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"ks\" #> • Seed: 60427 #> ✔ Finished running regression. KS test D: 0.64, p-value: 0 plot_regression_prediction_binary(res_binary$pred, res_binary$response)"},{"path":"/reference/plot_regression_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the regression results — plot_regression_qc","title":"Plot the regression results — plot_regression_qc","text":"Plot QC regression results","code":""},{"path":"/reference/plot_regression_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the regression results — plot_regression_qc","text":"","code":"plot_regression_qc(reg)"},{"path":"/reference/plot_regression_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the regression results — plot_regression_qc","text":"reg output regress_pwm","code":""},{"path":"/reference/plot_regression_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the regression results — plot_regression_qc","text":"patchwork object","code":""},{"path":"/reference/plot_regression_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the regression results — plot_regression_qc","text":"","code":"res <- regress_pwm(sequences_example, response_mat_example) #> ℹ Number of response variables: 5 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 2138 kmers in 1000 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TTTACAAC****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. R^2: 0, 0.0022, 0.0248, 0.0033, and 0.0029 plot_regression_qc(res) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead.   res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 198 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TAATCATT****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. KS test D: 0.81, p-value: 0 plot_regression_qc(res_binary) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead."},{"path":"/reference/plot_spat_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spatial model of the regression result — plot_spat_model","title":"Plot spatial model of the regression result — plot_spat_model","text":"Plot spatial model regression result","code":""},{"path":"/reference/plot_spat_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spatial model of the regression result — plot_spat_model","text":"","code":"plot_spat_model(spat)"},{"path":"/reference/plot_spat_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spatial model of the regression result — plot_spat_model","text":"spat 'spat' field regression result","code":""},{"path":"/reference/plot_spat_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spatial model of the regression result — plot_spat_model","text":"","code":"res <- regress_pwm(sequences_example, response_mat_example) #> ℹ Number of response variables: 5 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 2138 kmers in 1000 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TTTACAAC****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. R^2: 0, 0.0022, 0.0248, 0.0033, and 0.0029 plot_spat_model(res$spat)"},{"path":"/reference/prego-package.html","id":null,"dir":"Reference","previous_headings":"","what":"prego: What the Package Does (One Line, Title Case) — prego-package","title":"prego: What the Package Does (One Line, Title Case) — prego-package","text":"package (one paragraph).","code":""},{"path":"/reference/prego-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"prego: What the Package Does (One Line, Title Case) — prego-package","text":"Maintainer: Aviezer Lifshitz aviezer.lifshitz@weizmann.ac.il Authors: Amos Tanay amos.tanay@weizmann.ac.il","code":""},{"path":"/reference/regress_pwm.cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validate a two-phase regression model — regress_pwm.cv","title":"Cross-validate a two-phase regression model — regress_pwm.cv","text":"Perform cross-validation two-phase regression model. can either provide explicit folds, use nfolds argument set number folds. response binary (0 1) categories vector given, folds stratified response/categories.","code":""},{"path":"/reference/regress_pwm.cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validate a two-phase regression model — regress_pwm.cv","text":"","code":"regress_pwm.cv(   sequences,   response,   nfolds = NULL,   metric = NULL,   folds = NULL,   categories = NULL,   two_phase = TRUE,   seed = 60427,   parallel = getOption(\"prego.parallel\"),   add_full_model = TRUE,   ... )"},{"path":"/reference/regress_pwm.cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validate a two-phase regression model — regress_pwm.cv","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper) response matrix response variables - number rows equal number sequences nfolds number folds cross-validation. Can NULL folds provided. metric metric use cross-validation. One 'ks' 'r2'. NULL - 'ks' set binary response 'r2' continuous response. folds vector fold numbers sequence (optional) categories vector categories sequence (optional) two_phase whether use two-phase optimization . seed random seed parallel whether run cross-validation parallel. add_full_model whether add full model (without cross-validation) results.","code":""},{"path":"/reference/regress_pwm.cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validate a two-phase regression model — regress_pwm.cv","text":"list following elements: cv_models: list models, one fold. cv_pred: vector predictions sequence. score: score model cross-validated predictions. cv_scores: vector scores fold. folds: vector fold number sequence. full_model: full model (without cross-validation), add_full_model TRUE.","code":""},{"path":"/reference/regress_pwm.cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validate a two-phase regression model — regress_pwm.cv","text":"","code":"res <- regress_pwm.cv(cluster_sequences_example, cluster_mat_example[, 1], nfolds = 5, two_phase = TRUE, two_phase_sample_frac = c(0.1, 1)) #> ℹ Stratified sampling #> ℹ Response is binary: setting metric to \"ks\" #> ℹ Using two-phase optimization #> ✔ Cross-validation score: 0.800231665948154 #> ℹ Performing two phase optimization #>  #> ── First phase ── #>  #> ℹ Sampling 0.1 and 1 of the dataset for the first phase #> ℹ Stratified sampling #> ℹ sampled 187 0s and 492 1s #>  #> ── Generate candidate kmers  #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■       88% | ETA:  0s #>  #>  #> ── Regress each candidate kmer on sampled data  #> ℹ Running regression on 15 candidate kmers #> → \"AAT*ATT\", score: 0.543857765944515 #> → \"GTTAA\", score: 0.559869865388793 #>  ■■■■■                             13% | ETA: 21s #>  #> → \"TTAAT\", score: 0.555580173344022 #> ■■■■■                             13% | ETA: 21s #>  #> → \"GT*AAT\", score: 0.545262699076249 #> ■■■■■                             13% | ETA: 21s #>  ■■■■■■■■■                         27% | ETA: 16s #>  #> → \"GTTAAT\", score: 0.560946041669412 #> ■■■■■■■■■                         27% | ETA: 16s #>  ■■■■■■■■■■■                       33% | ETA: 14s #>  #> → \"CTTATC\", score: 0.151711180054944 #> ■■■■■■■■■■■                       33% | ETA: 14s #>  ■■■■■■■■■■■■■                     40% | ETA: 12s #>  #> → \"TAAT*AT\", score: 0.56209422911021 #> ■■■■■■■■■■■■■                     40% | ETA: 12s #>  ■■■■■■■■■■■■■■■                   47% | ETA: 11s #>  #> → \"CTTATCT\", score: 0.158662742723064 #> ■■■■■■■■■■■■■■■                   47% | ETA: 11s #>  ■■■■■■■■■■■■■■■■■                 53% | ETA: 10s #>  #> → \"TCTTATC\", score: 0.150810938356088 #> ■■■■■■■■■■■■■■■■■                 53% | ETA: 10s #>  ■■■■■■■■■■■■■■■■■■■               60% | ETA:  8s #>  #> → \"AAT*ATTA\", score: 0.572837809679498 #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  8s #>  ■■■■■■■■■■■■■■■■■■■■■             67% | ETA:  7s #>  #> → \"TAAT*ATT\", score: 0.571376333083161 #> ■■■■■■■■■■■■■■■■■■■■■             67% | ETA:  7s #>  ■■■■■■■■■■■■■■■■■■■■■■■           73% | ETA:  6s #>  #> → \"TAATCATT\", score: 0.557645279955876 #> ■■■■■■■■■■■■■■■■■■■■■■■           73% | ETA:  6s #>  ■■■■■■■■■■■■■■■■■■■■■■■■■         80% | ETA:  4s #>  #> → \"AAGATAAC\", score: 0.119153655041005 #> ■■■■■■■■■■■■■■■■■■■■■■■■■         80% | ETA:  4s #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  3s #>  #> → \"AAT*ATTAA\", score: 0.577939719038964 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  3s #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     93% | ETA:  1s #>  #> → \"TTAAT*ATT\", score: 0.577939810354334 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     93% | ETA:  1s #>  #> ℹ Best motif in the first phase: \"***TTAAT*ATT***\", score: 0.577939810354334 #>  #> ── Phase 2: Running regression on the full dataset ── #>  #> ℹ Number of response variables: 1 #> ℹ Initializing regression with pre-computed PSSM #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. KS test D: 0.83, p-value: 0 res$score #>         D  #> 0.8002317  res$cv_scores #>   fold1.D   fold2.D   fold3.D   fold4.D   fold5.D  #> 0.7979798 0.8220440 0.8454615 0.8320567 0.7639109   plot(res$cv_pred, res$full_model$pred, xlab = \"CV predictions\", ylab = \"Full model predictions\", cex = 0.1)  plot_regression_prediction_binary(res$cv_pred, cluster_mat_example[, 1])  plot_regression_prediction_binary(res$full_model$pred, cluster_mat_example[, 1])   # single phase res <- regress_pwm.cv(cluster_sequences_example, cluster_mat_example[, 1], nfolds = 5, two_phase = FALSE) #> ℹ Stratified sampling #> ℹ Response is binary: setting metric to \"ks\" #> ℹ Using single-phase optimization #> ✔ Cross-validation score: 0.787515077882434 #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 198 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TAATCATT****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. KS test D: 0.81, p-value: 0 res$score #>         D  #> 0.7875151  res$cv_scores #>   fold1.D   fold2.D   fold3.D   fold4.D   fold5.D  #> 0.8009507 0.7938206 0.8164907 0.8132899 0.7606281  plot(res$cv_pred, res$full_model$pred, xlab = \"CV predictions\", ylab = \"Full model predictions\", cex = 0.1)"},{"path":"/reference/regress_pwm.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a PWM regression — regress_pwm","title":"Perform a PWM regression — regress_pwm","text":"Perform PWM regression","code":""},{"path":"/reference/regress_pwm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a PWM regression — regress_pwm","text":"","code":"regress_pwm(   sequences,   response,   motif = NULL,   motif_length = 15,   score_metric = \"r2\",   bidirect = TRUE,   spat_min = 0,   spat_max = NULL,   spat_bin = 50,   improve_epsilon = 0.0001,   min_nuc_prob = 0.001,   unif_prior = 0.05,   is_train = NULL,   include_response = TRUE,   seed = 60427,   verbose = FALSE,   kmer_length = 8,   motif_num = 1,   ... )"},{"path":"/reference/regress_pwm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a PWM regression — regress_pwm","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper) response matrix response variables - number rows equal number sequences motif Initial motif start regression . Can either string kmer character \"*\" indicates wildcard data frame pre-computed PSSM (see thre slot pssm return value function). NULL - K-mer screen performed order find best kmer initialization. motif_length Length seed motif. motif shorter , extended wildcards (stars). Note motif longer , truncated. score_metric metric use optimizing PWM. One \"r2\" \"ks\". using \"ks\" response variable single vector 0 1. bidirect motif bi-directional. TRUE, reverse-complement motif used well. spat_min start spatial model beginning sequence (bp) spat_max end spatial model beginning sequence (bp). NULL - spatial model end end sequence. spat_bin size spatial bin (bp). improve_epsilon minimum improve objective function continue optimization min_nuc_prob minimum nucleotide probability every iteration unif_prior uniform prior nucleotide probabilities is_train boolean vector determine subset sequences use screening include_response include response resulting list (default: TRUE) seed random seed verbose show verbose messages. kmer_length number non-gap characters motifs screened ... Arguments passed screen_kmers min_cor patterns maximum correlation one response variable larger min_cor reported min_n patterns average number occurrences sequences larger min_n reported min_gap,max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple tesing severly). from_range Sequences considered position from_range (default 0) to_range Sequences considered position to_range (default NULL - using length sequences) return_mat Return matrix patterns correlation response variables instead data frame. (default: FALSE)","code":""},{"path":"/reference/regress_pwm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a PWM regression — regress_pwm","text":"list following elements: pssm: data frame pssm matrix inferred motif, rows positions columns nucleotides. spat: data frame inferred spatial model, spatial factor bin. pred: vector predicted pwm sequence. response: response matrix. include_response FALSE, response matrix included list. r2: \\(r^2\\) prediction respect response variable. ks: response binary, Kolmogorov-Smirnov test results predictions response 1 vs predictions response 0. seed_motif: seed motif started regression. kmers: k-mers screened order find best seed motif (motif NULL).","code":""},{"path":"/reference/regress_pwm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a PWM regression — regress_pwm","text":"","code":"res <- regress_pwm(sequences_example, response_mat_example) #> ℹ Number of response variables: 5 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 2138 kmers in 1000 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TTTACAAC****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. R^2: 0, 0.0022, 0.0248, 0.0033, and 0.0029 res$pssm #>    pos           A           C           G           T #> 1    0 0.283506006 0.224376753 0.341985554 0.150131658 #> 2    1 0.253086418 0.246913567 0.308641970 0.191358030 #> 3    2 0.221712694 0.169537887 0.445516258 0.163233161 #> 4    3 0.245094895 0.130914375 0.093120612 0.530870140 #> 5    4 0.001055855 0.100411795 0.001055855 0.897476554 #> 6    5 0.001167131 0.005718939 0.001052752 0.992061198 #> 7    6 0.902136743 0.001007861 0.046462409 0.050393071 #> 8    7 0.001005576 0.854739487 0.001005576 0.143249318 #> 9    8 0.942350328 0.001108647 0.055432372 0.001108647 #> 10   9 0.840756953 0.001106953 0.105424076 0.052712038 #> 11  10 0.124257408 0.637169480 0.078802861 0.159770235 #> 12  11 0.199003056 0.325700551 0.090969816 0.384326607 #> 13  12 0.109775484 0.223810568 0.305429220 0.360984772 #> 14  13 0.118960544 0.381039500 0.263755500 0.236244485 #> 15  14 0.250000000 0.250000000 0.250000000 0.250000000 res$spat #>   bin spat_factor #> 1   0   0.1443009 #> 2  50   0.1443009 #> 3 100   0.1443009 #> 4 150   0.1443009 #> 5 200   0.1443009 #> 6 250   0.1443009 #> 7 300   0.1443009 head(res$pred) #> [1] -19.31668 -18.09744 -14.56399 -19.52544 -17.17279 -20.74502  plot_regression_qc(res) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead.   # intialize with a pre-computed PSSM res1 <- regress_pwm(sequences_example, response_mat_example, motif = res$pssm) #> ℹ Number of response variables: 5 #> ℹ Initializing regression with pre-computed PSSM #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. R^2: 0, 0.0022, 0.0248, 0.0033, and 0.0029  # binary response res_binary <- regress_pwm(cluster_sequences_example, cluster_mat_example[, 1]) #> ℹ Number of response variables: 1 #> ℹ Screening for kmers in order to initialize regression #> ℹ Number of response variables: 1 #> ℹ Screening kmers of length 8, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 198 kmers in 2359 sequences. #> ℹ Motif is shorter than 15, extending with wildcards #> ℹ Initializing regression with the following motif: \"***TAATCATT****\" #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. KS test D: 0.81, p-value: 0 plot_regression_qc(res_binary) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead."},{"path":"/reference/regress_pwm_two_phase.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a 2-phase PWM regression — regress_pwm_two_phase","title":"Run a 2-phase PWM regression — regress_pwm_two_phase","text":"first phase optimization performed sampled dataset size two_phase_sample_frac different candidates kmers regressed order find best seed. Thenm optimization performed full dataset initializing motif sampled dataset. can also give explicit indices sequences use first phase using first_phase_idxs.","code":""},{"path":"/reference/regress_pwm_two_phase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a 2-phase PWM regression — regress_pwm_two_phase","text":"","code":"regress_pwm_two_phase(   sequences,   response,   motif_length = 15,   score_metric = \"r2\",   bidirect = TRUE,   spat_min = 0,   spat_max = NULL,   spat_bin = 50,   improve_epsilon = 0.0001,   min_nuc_prob = 0.001,   unif_prior = 0.05,   is_train = NULL,   include_response = TRUE,   seed = 60427,   verbose = FALSE,   kmer_length = 5:8,   min_gap = 0,   max_gap = 1,   min_kmer_cor = 0.1,   two_phase_sample_frac = 0.1,   first_phase_idxs = NULL,   first_phase_metric = \"r2\",   ... )"},{"path":"/reference/regress_pwm_two_phase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a 2-phase PWM regression — regress_pwm_two_phase","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper) response matrix response variables - number rows equal number sequences motif_length Length seed motif. motif shorter , extended wildcards (stars). Note motif longer , truncated. score_metric metric use optimizing PWM. One \"r2\" \"ks\". using \"ks\" response variable single vector 0 1. bidirect motif bi-directional. TRUE, reverse-complement motif used well. spat_min start spatial model beginning sequence (bp) spat_max end spatial model beginning sequence (bp). NULL - spatial model end end sequence. spat_bin size spatial bin (bp). improve_epsilon minimum improve objective function continue optimization min_nuc_prob minimum nucleotide probability every iteration unif_prior uniform prior nucleotide probabilities is_train boolean vector determine subset sequences use screening include_response include response resulting list (default: TRUE) seed random seed verbose verbosity second phase optimization. kmer_length vector kmer lengths screen order find best seed motif. two_phase_sample_frac fraction dataset sample first phase optimization (default: 0.1). response categorical (0 1), sampling stratified category, .e. two_phase_sample_frac can vector length 2 fraction 0 1 responses sample respectively. first_phase_idxs indices sequences use first phase optimization. NULL, indices sampled using two_phase_sample_frac. first_phase_metric metric use order choose best motif first phase optimization. One 'ks' 'r2'. Note unlike score_metric used regression , metric used choosing best motif first phase optimization runs sampled dataset.","code":""},{"path":"/reference/regress_pwm_two_phase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a 2-phase PWM regression — regress_pwm_two_phase","text":"list following elements: pssm: data frame pssm matrix inferred motif, rows positions columns nucleotides. spat: data frame inferred spatial model, spatial factor bin. pred: vector predicted pwm sequence. response: response matrix. include_response FALSE, response matrix included list. r2: \\(r^2\\) prediction respect response variable. ks: response binary, Kolmogorov-Smirnov test results predictions response 1 vs predictions response 0. seed_motif: seed motif started regression. kmers: k-mers screened order find best seed motif (motif NULL).","code":""},{"path":"/reference/regress_pwm_two_phase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a 2-phase PWM regression — regress_pwm_two_phase","text":"","code":"res <- regress_pwm_two_phase(cluster_sequences_example, cluster_mat_example[, 1], two_phase_sample_frac = c(0.1, 1)) #> ℹ Performing two phase optimization #>  #> ── First phase ── #>  #> ℹ Sampling 0.1 and 1 of the dataset for the first phase #> ℹ Stratified sampling #> ℹ sampled 187 0s and 492 1s #>  #> ── Generate candidate kmers  #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■       88% | ETA:  0s #>  #>  #> ── Regress each candidate kmer on sampled data  #> ℹ Running regression on 15 candidate kmers #> → \"AAT*ATT\", score: 0.543857765944515 #> → \"GTTAA\", score: 0.559869865388793 #>  ■■■■■                             13% | ETA: 21s #>  #> → \"TTAAT\", score: 0.555580173344022 #> ■■■■■                             13% | ETA: 21s #>  #> → \"GT*AAT\", score: 0.545262699076249 #> ■■■■■                             13% | ETA: 21s #>  ■■■■■■■■■                         27% | ETA: 16s #>  #> → \"GTTAAT\", score: 0.560946041669412 #> ■■■■■■■■■                         27% | ETA: 16s #>  ■■■■■■■■■■■                       33% | ETA: 14s #>  #> → \"CTTATC\", score: 0.151711180054944 #> ■■■■■■■■■■■                       33% | ETA: 14s #>  ■■■■■■■■■■■■■                     40% | ETA: 12s #>  #> → \"TAAT*AT\", score: 0.56209422911021 #> ■■■■■■■■■■■■■                     40% | ETA: 12s #>  ■■■■■■■■■■■■■■■                   47% | ETA: 11s #>  #> → \"CTTATCT\", score: 0.158662742723064 #> ■■■■■■■■■■■■■■■                   47% | ETA: 11s #>  ■■■■■■■■■■■■■■■■■                 53% | ETA: 10s #>  #> → \"TCTTATC\", score: 0.150810938356088 #> ■■■■■■■■■■■■■■■■■                 53% | ETA: 10s #>  ■■■■■■■■■■■■■■■■■■■               60% | ETA:  8s #>  #> → \"AAT*ATTA\", score: 0.572837809679498 #> ■■■■■■■■■■■■■■■■■■■               60% | ETA:  8s #>  ■■■■■■■■■■■■■■■■■■■■■             67% | ETA:  7s #>  #> → \"TAAT*ATT\", score: 0.571376333083161 #> ■■■■■■■■■■■■■■■■■■■■■             67% | ETA:  7s #>  ■■■■■■■■■■■■■■■■■■■■■■■           73% | ETA:  6s #>  #> → \"TAATCATT\", score: 0.557645279955876 #> ■■■■■■■■■■■■■■■■■■■■■■■           73% | ETA:  6s #>  ■■■■■■■■■■■■■■■■■■■■■■■■■         80% | ETA:  4s #>  #> → \"AAGATAAC\", score: 0.119153655041005 #> ■■■■■■■■■■■■■■■■■■■■■■■■■         80% | ETA:  4s #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  3s #>  #> → \"AAT*ATTAA\", score: 0.577939719038964 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  3s #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     93% | ETA:  1s #>  #> → \"TTAAT*ATT\", score: 0.577939810354334 #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     93% | ETA:  1s #>  #> ℹ Best motif in the first phase: \"***TTAAT*ATT***\", score: 0.577939810354334 #>  #> ── Phase 2: Running regression on the full dataset ── #>  #> ℹ Number of response variables: 1 #> ℹ Initializing regression with pre-computed PSSM #> ℹ Running regression #> • Motif length: 15 #> • Bidirectional: TRUE #> • Spat min: 0 #> • Spat max: 300 #> • Spat bin: 50 #> • Improve epsilon: 0.0001 #> • Min nuc prob: 0.001 #> • Uniform prior: 0.05 #> • Score metric: \"r2\" #> • Seed: 60427 #> ✔ Finished running regression. KS test D: 0.83, p-value: 0 res$pssm #>    pos          A           C          G          T #> 1    0 0.25000000 0.250000000 0.25000000 0.25000000 #> 2    1 0.23809522 0.238095224 0.28571427 0.23809522 #> 3    2 0.18249571 0.103743941 0.51960766 0.19415271 #> 4    3 0.04545455 0.090909094 0.09090909 0.77272725 #> 5    4 0.10962366 0.192643940 0.11717096 0.58056140 #> 6    5 0.69929713 0.041135125 0.21843264 0.04113512 #> 7    6 0.47980279 0.245986715 0.24598671 0.02822370 #> 8    7 0.25770038 0.210081339 0.02956769 0.50265062 #> 9    8 0.23391813 0.292397648 0.29239765 0.18128656 #> 10   9 0.55470997 0.080730051 0.02080175 0.34375826 #> 11  10 0.22261342 0.001079256 0.32796940 0.44833785 #> 12  11 0.04319188 0.179354280 0.04319188 0.73426199 #> 13  12 0.27777779 0.222222239 0.27777779 0.22222224 #> 14  13 0.25000000 0.250000000 0.25000000 0.25000000 #> 15  14 0.20899472 0.317460328 0.26455027 0.20899472 res$spat #>   bin spat_factor #> 1   0   0.1414429 #> 2  50   0.1414429 #> 3 100   0.1414429 #> 4 150   0.1414429 #> 5 200   0.1414429 #> 6 250   0.1414429 #> 7 300   0.1414429 head(res$pred) #> [1] -16.44488 -16.38409 -16.67833 -15.60762 -15.36360 -14.67840  plot_regression_qc(res) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead."},{"path":"/reference/screen_kmers.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen for kmers — screen_kmers","title":"Screen for kmers — screen_kmers","text":"Screen kmers","code":""},{"path":"/reference/screen_kmers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen for kmers — screen_kmers","text":"","code":"screen_kmers(   sequences,   response,   kmer_length = 6,   min_cor = 0.08,   min_n = 50,   is_train = NULL,   min_gap = 0,   max_gap = 0,   from_range = 0,   to_range = NULL,   return_mat = FALSE,   seed = 60427,   verbose = FALSE )"},{"path":"/reference/screen_kmers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen for kmers — screen_kmers","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go toupper) response matrix response variables - number rows equal number sequences kmer_length number non-gap characters motifs screened min_cor patterns maximum correlation one response variable larger min_cor reported min_n patterns average number occurrences sequences larger min_n reported is_train boolean vector determine subset sequences use screening min_gap, max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple tesing severly). from_range Sequences considered position from_range (default 0) to_range Sequences considered position to_range (default NULL - using length sequences) return_mat Return matrix patterns correlation response variables instead data frame. (default: FALSE) seed random seed verbose show verbose messages","code":""},{"path":"/reference/screen_kmers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen for kmers — screen_kmers","text":"data frame following columns, together column response variable correlation kmers response variable: kmer: kmer pattern, \"*\" indicates wildcard, max_r2: maximum R^2 one response variables, avg_n: average number times kmer appears sequences, avg_var: variance number times kmer appears sequences, return_mat TRUE, matrix correlations response variables (rows kmers) returned instead data frame. kmer found, empty data frame returned.","code":""},{"path":"/reference/screen_kmers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen for kmers — screen_kmers","text":"","code":"kmers <- screen_kmers(sequences_example, response_mat_example) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 575 kmers in 1000 sequences. head(kmers) #>     kmer     max_r2 avg_n    avg_var          c1          c2         c3 #> 1 AGATAA 0.04998882 0.140 0.15240000 -0.01025383 -0.03046725 -0.2235818 #> 2 TTATCT 0.02975253 0.128 0.13761599  0.03136108  0.04927359 -0.1724892 #> 3 CTTATC 0.02680831 0.080 0.07960001  0.02861430  0.01967959 -0.1637324 #> 4 GGGGAG 0.02300140 0.243 0.28195098  0.04611732  0.02960520  0.1516621 #> 5 GGGCGG 0.02280306 0.062 0.06015600  0.06576437  0.02662074  0.1510068 #> 6 TAACTG 0.02215597 0.071 0.06995900 -0.01145993 -0.02249238 -0.1488488 #>             c4          c5 #> 1  0.004382457 -0.03498838 #> 2  0.035843253  0.02917432 #> 3  0.059437271  0.03772539 #> 4  0.044013925  0.03089626 #> 5  0.104473867  0.12732512 #> 6 -0.037136175 -0.01858661  kmers <- screen_kmers(sequences_example, response_mat_example, return_mat = TRUE) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 575 kmers in 1000 sequences. head(kmers) #>                 c1          c2         c3           c4          c5 #> AGATAA -0.01025383 -0.03046725 -0.2235818  0.004382457 -0.03498838 #> TTATCT  0.03136108  0.04927359 -0.1724892  0.035843253  0.02917432 #> CTTATC  0.02861430  0.01967959 -0.1637324  0.059437271  0.03772539 #> GGGGAG  0.04611732  0.02960520  0.1516621  0.044013925  0.03089626 #> GGGCGG  0.06576437  0.02662074  0.1510068  0.104473867  0.12732512 #> TAACTG -0.01145993 -0.02249238 -0.1488488 -0.037136175 -0.01858661  kmers <- screen_kmers(sequences_example, response_mat_example, max_gap = 3) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ Gaps of length 0:3 are allowed #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> ✔ Found 4884 kmers in 1000 sequences. head(kmers) #>       kmer     max_r2 avg_n    avg_var           c1           c2         c3 #> 1   AGATAA 0.05012437 0.139 0.15167901 -0.011159671 -0.033565160 -0.2238847 #> 2  AGA*AAG 0.03404951 0.220 0.23760001  0.062884174  0.063842162 -0.1845251 #> 3   TTATCT 0.02915060 0.127 0.13487099  0.036021627  0.051995803 -0.1707355 #> 4 ACAT**CT 0.02848161 0.090 0.09190000 -0.002383306 -0.023468828 -0.1687650 #> 5  AG*TAAG 0.02829135 0.118 0.12007600  0.034630746 -0.005794165 -0.1682003 #> 6   CTTATC 0.02680831 0.080 0.07960001  0.028614303  0.019679585 -0.1637324 #>            c4          c5 #> 1 0.001539792 -0.03616555 #> 2 0.025056362  0.02373981 #> 3 0.032191906  0.02568413 #> 4 0.019714575 -0.02059141 #> 5 0.046150818  0.02593128 #> 6 0.059437271  0.03772539"},{"path":"/reference/set_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parallel threads — set_parallel","title":"Set parallel threads — set_parallel","text":"Set number parallel threads use. prego uses R function doMC::registerDoMC register parallelization. default, prego uses 80% number available cores. options saved 'prego.parallel' (use parallelization, logical) 'prego.parallel.nc' (number cores use, integer).","code":""},{"path":"/reference/set_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set parallel threads — set_parallel","text":"","code":"set_parallel(thread_num = max(1, round(parallel::detectCores() * 0.8)))"},{"path":"/reference/set_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parallel threads — set_parallel","text":"thread_num number threads. use '1' non parallel behavior","code":""},{"path":"/reference/set_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parallel threads — set_parallel","text":"None","code":""},{"path":"/reference/set_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parallel threads — set_parallel","text":"","code":"# \\donttest{ set_parallel(8) #> ℹ Parallelization enabled. Using 8 threads. # }"}]
