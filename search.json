[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Weizmann Institute Science Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aviezer Lifshitz. Author, maintainer. Amos Tanay. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lifshitz , Tanay (2022). prego: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {prego: What the Package Does (One Line, Title Case)},   author = {Aviezer Lifshitz and Amos Tanay},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version prego like :","code":"remotes::install_github(\"tanaylab/prego\")"},{"path":[]},{"path":"/reference/prego-package.html","id":null,"dir":"Reference","previous_headings":"","what":"prego: What the Package Does (One Line, Title Case) — prego-package","title":"prego: What the Package Does (One Line, Title Case) — prego-package","text":"package (one paragraph).","code":""},{"path":"/reference/prego-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"prego: What the Package Does (One Line, Title Case) — prego-package","text":"Maintainer: Aviezer Lifshitz aviezer.lifshitz@weizmann.ac.il Authors: Amos Tanay amos.tanay@weizmann.ac.il","code":""},{"path":"/reference/screen_kmers.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen for kmers — screen_kmers","title":"Screen for kmers — screen_kmers","text":"Screen kmers","code":""},{"path":"/reference/screen_kmers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen for kmers — screen_kmers","text":"","code":"screen_kmers(   sequences,   response,   kmer_length = 6,   min_cor = 0.08,   min_n = 50,   is_train = NULL,   min_gap = 0,   max_gap = 0,   from_range = 0,   to_range = NULL,   return_mat = FALSE,   seed = 60427 )"},{"path":"/reference/screen_kmers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen for kmers — screen_kmers","text":"sequences vector DNA sequences ('', 'T', 'C' 'G'. go thruogh toupper) response matrix response variables - number rows equal number sequences kmer_length number non-gap characters motifs screened min_cor patterns maximum correlation one response variable larger min_cor reported min_n patterns average number occurrences sequences larger min_n reported is_train boolean vector determine subset sequences use screening min_gap, max_gap length gap considered pattern. one gap, length min_gap:max_gap, used, located anywhere motif. Note greatly expand search space (increase multiple tesing severly). from_range Sequences considered position from_range (default 0) to_range Sequences considered position to_range (default NULL - using length sequences) return_mat Return matrix patterns correlation response variables instead data frame. (default: FALSE) seed random seed","code":""},{"path":"/reference/screen_kmers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen for kmers — screen_kmers","text":"data frame following columns, together column response variable correlation kmers response variable: kmer:kmer pattern, max_r2:maximum R^2 one response variables, avg_n:average number times kmer appears sequences, avg_var:variance number times kmer appears sequences,   return_mat TRUE, matrix correlations response variables (rows kmers) returned instead data frame.","code":""},{"path":"/reference/screen_kmers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen for kmers — screen_kmers","text":"","code":"#' kmers <- screen_kmers(sequences_example, response_mat_example) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> done normalizing response  #> new best AAAACA  0.0065304 #> new best AAACAG  0.00992902 #> new best AAATGA  0.013271 #> new best AACTCA  0.0184843 #> new best AGATAA  0.0499888 #> done screening  #> ✔ Found 575 kmers in 1000 sequences. head(kmers) #>     kmer      max_r2 avg_n  avg_var          c1          c2           c3 #> 1 AAAACA 0.006530396 0.228 0.364016  0.01514325 -0.06328546  0.008038806 #> 2 AAACAG 0.009929021 0.187 0.194031  0.02554438 -0.03654361 -0.099644475 #> 3 AAAGGC 0.006959220 0.158 0.161036 -0.01958851  0.01340878  0.083421938 #> 4 AAATCG 0.006565580 0.014 0.013804 -0.01707704 -0.08102827 -0.011113539 #> 5 AAATGA 0.013270982 0.121 0.128359 -0.04639426 -0.02196606 -0.015282936 #> 6 AACAAT 0.009038075 0.091 0.090719 -0.09506879 -0.01191485 -0.019761512 #>             c4           c5 #> 1 -0.080810867 -0.020295398 #> 2 -0.002127784 -0.015842479 #> 3 -0.024523977 -0.002591754 #> 4  0.038912542  0.043552887 #> 5 -0.115199745 -0.066986881 #> 6 -0.035760492 -0.010772286  kmers <- screen_kmers(sequences_example, response_mat_example, return_mat = TRUE) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> done normalizing response  #> new best AAAACA  0.0065304 #> new best AAACAG  0.00992902 #> new best AAATGA  0.013271 #> new best AACTCA  0.0184843 #> new best AGATAA  0.0499888 #> done screening  #> ✔ Found 575 kmers in 1000 sequences. head(kmers) #>                 c1          c2           c3           c4           c5 #> AAAACA  0.01514325 -0.06328546  0.008038806 -0.080810867 -0.020295398 #> AAACAG  0.02554438 -0.03654361 -0.099644475 -0.002127784 -0.015842479 #> AAAGGC -0.01958851  0.01340878  0.083421938 -0.024523977 -0.002591754 #> AAATCG -0.01707704 -0.08102827 -0.011113539  0.038912542  0.043552887 #> AAATGA -0.04639426 -0.02196606 -0.015282936 -0.115199745 -0.066986881 #> AACAAT -0.09506879 -0.01191485 -0.019761512 -0.035760492 -0.010772286  kmers <- screen_kmers(sequences_example, response_mat_example, max_gap = 3) #> ℹ Number of response variables: 5 #> ℹ Screening kmers of length 6, from position 0 to position 300 #> ℹ Gaps of length 0:3 are allowed #> ℹ minimal correlation: 0.08, minimal number of occurrences: 50 #> done normalizing response  #> new best AA1AAAT  0.00816524 #> new best AA1AATT  0.00847449 #> new best AA1ACAT  0.011623 #> new best AA1GTTT  0.0168297 #> new best AA2AATG  0.0193508 #> new best AAGA2AG  0.0248085 #> new best ACAT2CT  0.0284816 #> new best AGA1AAG  0.0340495 #> new best AGATAA  0.0501244 #> done screening  #> ✔ Found 4884 kmers in 1000 sequences. head(kmers) #>      kmer      max_r2 avg_n  avg_var           c1          c2            c3 #> 1 AA1AAAT 0.008165239 0.157 0.424351 -0.090361714 -0.04867296 -0.0001863262 #> 2 AA1AACA 0.006417318 0.179 0.262959  0.002516045 -0.08010817  0.0094803311 #> 3 AA1AATA 0.007362609 0.096 0.098784 -0.074151732 -0.08580565 -0.0123533392 #> 4 AA1AATT 0.008474493 0.076 0.078224 -0.092057012 -0.02860663  0.0131487334 #> 5 AA1ACAT 0.011623012 0.074 0.070524 -0.007930962 -0.05136836 -0.1078100726 #> 6 AA1ACCA 0.006922199 0.103 0.110391 -0.047498509 -0.04368650  0.0069228597 #>            c4          c5 #> 1 -0.06059008 -0.04480414 #> 2 -0.06207323 -0.01855677 #> 3 -0.01127854 -0.06702007 #> 4 -0.04431058 -0.07880085 #> 5 -0.10164641 -0.06795115 #> 6 -0.02831929 -0.08319975"}]
